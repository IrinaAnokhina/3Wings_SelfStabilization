
Wingy_smth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab8  080075f8  080075f8  000175f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080080b0  080080b0  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080080b4  080080b4  000180b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  080080b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000065c  20000080  08008138  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200006dc  08008138  000206dc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   00017b34  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002f7a  00000000  00000000  00037bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d78  00000000  00000000  0003ab58  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c20  00000000  00000000  0003b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000732c  00000000  00000000  0003c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003c80  00000000  00000000  0004381c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004749c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003ba4  00000000  00000000  00047518  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	080075e0 	.word	0x080075e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	080075e0 	.word	0x080075e0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpun>:
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__aeabi_dcmpun+0x10>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d10a      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x20>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d102      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	f04f 0001 	mov.w	r0, #1
 8000a1e:	4770      	bx	lr

08000a20 <__aeabi_d2iz>:
 8000a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d215      	bcs.n	8000a56 <__aeabi_d2iz+0x36>
 8000a2a:	d511      	bpl.n	8000a50 <__aeabi_d2iz+0x30>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d912      	bls.n	8000a5c <__aeabi_d2iz+0x3c>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	bf18      	it	ne
 8000a4c:	4240      	negne	r0, r0
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_d2iz+0x48>
 8000a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	bf08      	it	eq
 8000a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_d2uiz>:
 8000a70:	004a      	lsls	r2, r1, #1
 8000a72:	d211      	bcs.n	8000a98 <__aeabi_d2uiz+0x28>
 8000a74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a78:	d211      	bcs.n	8000a9e <__aeabi_d2uiz+0x2e>
 8000a7a:	d50d      	bpl.n	8000a98 <__aeabi_d2uiz+0x28>
 8000a7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a84:	d40e      	bmi.n	8000aa4 <__aeabi_d2uiz+0x34>
 8000a86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_d2uiz+0x3a>
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_frsub>:
 8000ab0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab4:	e002      	b.n	8000abc <__addsf3>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_fsub>:
 8000ab8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000abc <__addsf3>:
 8000abc:	0042      	lsls	r2, r0, #1
 8000abe:	bf1f      	itttt	ne
 8000ac0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac4:	ea92 0f03 	teqne	r2, r3
 8000ac8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000acc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad0:	d06a      	beq.n	8000ba8 <__addsf3+0xec>
 8000ad2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ada:	bfc1      	itttt	gt
 8000adc:	18d2      	addgt	r2, r2, r3
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	4048      	eorgt	r0, r1
 8000ae2:	4041      	eorgt	r1, r0
 8000ae4:	bfb8      	it	lt
 8000ae6:	425b      	neglt	r3, r3
 8000ae8:	2b19      	cmp	r3, #25
 8000aea:	bf88      	it	hi
 8000aec:	4770      	bxhi	lr
 8000aee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000af2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000afa:	bf18      	it	ne
 8000afc:	4240      	negne	r0, r0
 8000afe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b02:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b06:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b0a:	bf18      	it	ne
 8000b0c:	4249      	negne	r1, r1
 8000b0e:	ea92 0f03 	teq	r2, r3
 8000b12:	d03f      	beq.n	8000b94 <__addsf3+0xd8>
 8000b14:	f1a2 0201 	sub.w	r2, r2, #1
 8000b18:	fa41 fc03 	asr.w	ip, r1, r3
 8000b1c:	eb10 000c 	adds.w	r0, r0, ip
 8000b20:	f1c3 0320 	rsb	r3, r3, #32
 8000b24:	fa01 f103 	lsl.w	r1, r1, r3
 8000b28:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b2c:	d502      	bpl.n	8000b34 <__addsf3+0x78>
 8000b2e:	4249      	negs	r1, r1
 8000b30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b38:	d313      	bcc.n	8000b62 <__addsf3+0xa6>
 8000b3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3e:	d306      	bcc.n	8000b4e <__addsf3+0x92>
 8000b40:	0840      	lsrs	r0, r0, #1
 8000b42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b46:	f102 0201 	add.w	r2, r2, #1
 8000b4a:	2afe      	cmp	r2, #254	; 0xfe
 8000b4c:	d251      	bcs.n	8000bf2 <__addsf3+0x136>
 8000b4e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b56:	bf08      	it	eq
 8000b58:	f020 0001 	biceq.w	r0, r0, #1
 8000b5c:	ea40 0003 	orr.w	r0, r0, r3
 8000b60:	4770      	bx	lr
 8000b62:	0049      	lsls	r1, r1, #1
 8000b64:	eb40 0000 	adc.w	r0, r0, r0
 8000b68:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	d1ed      	bne.n	8000b4e <__addsf3+0x92>
 8000b72:	fab0 fc80 	clz	ip, r0
 8000b76:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b7a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b82:	bfaa      	itet	ge
 8000b84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b88:	4252      	neglt	r2, r2
 8000b8a:	4318      	orrge	r0, r3
 8000b8c:	bfbc      	itt	lt
 8000b8e:	40d0      	lsrlt	r0, r2
 8000b90:	4318      	orrlt	r0, r3
 8000b92:	4770      	bx	lr
 8000b94:	f092 0f00 	teq	r2, #0
 8000b98:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b9c:	bf06      	itte	eq
 8000b9e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ba2:	3201      	addeq	r2, #1
 8000ba4:	3b01      	subne	r3, #1
 8000ba6:	e7b5      	b.n	8000b14 <__addsf3+0x58>
 8000ba8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb0:	bf18      	it	ne
 8000bb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb6:	d021      	beq.n	8000bfc <__addsf3+0x140>
 8000bb8:	ea92 0f03 	teq	r2, r3
 8000bbc:	d004      	beq.n	8000bc8 <__addsf3+0x10c>
 8000bbe:	f092 0f00 	teq	r2, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	4608      	moveq	r0, r1
 8000bc6:	4770      	bx	lr
 8000bc8:	ea90 0f01 	teq	r0, r1
 8000bcc:	bf1c      	itt	ne
 8000bce:	2000      	movne	r0, #0
 8000bd0:	4770      	bxne	lr
 8000bd2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd6:	d104      	bne.n	8000be2 <__addsf3+0x126>
 8000bd8:	0040      	lsls	r0, r0, #1
 8000bda:	bf28      	it	cs
 8000bdc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be0:	4770      	bx	lr
 8000be2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be6:	bf3c      	itt	cc
 8000be8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bec:	4770      	bxcc	lr
 8000bee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfa:	4770      	bx	lr
 8000bfc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c00:	bf16      	itet	ne
 8000c02:	4608      	movne	r0, r1
 8000c04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c08:	4601      	movne	r1, r0
 8000c0a:	0242      	lsls	r2, r0, #9
 8000c0c:	bf06      	itte	eq
 8000c0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c12:	ea90 0f01 	teqeq	r0, r1
 8000c16:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_ui2f>:
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	e004      	b.n	8000c2c <__aeabi_i2f+0x8>
 8000c22:	bf00      	nop

08000c24 <__aeabi_i2f>:
 8000c24:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c28:	bf48      	it	mi
 8000c2a:	4240      	negmi	r0, r0
 8000c2c:	ea5f 0c00 	movs.w	ip, r0
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c38:	4601      	mov	r1, r0
 8000c3a:	f04f 0000 	mov.w	r0, #0
 8000c3e:	e01c      	b.n	8000c7a <__aeabi_l2f+0x2a>

08000c40 <__aeabi_ul2f>:
 8000c40:	ea50 0201 	orrs.w	r2, r0, r1
 8000c44:	bf08      	it	eq
 8000c46:	4770      	bxeq	lr
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e00a      	b.n	8000c64 <__aeabi_l2f+0x14>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_l2f>:
 8000c50:	ea50 0201 	orrs.w	r2, r0, r1
 8000c54:	bf08      	it	eq
 8000c56:	4770      	bxeq	lr
 8000c58:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c5c:	d502      	bpl.n	8000c64 <__aeabi_l2f+0x14>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	ea5f 0c01 	movs.w	ip, r1
 8000c68:	bf02      	ittt	eq
 8000c6a:	4684      	moveq	ip, r0
 8000c6c:	4601      	moveq	r1, r0
 8000c6e:	2000      	moveq	r0, #0
 8000c70:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c74:	bf08      	it	eq
 8000c76:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7e:	fabc f28c 	clz	r2, ip
 8000c82:	3a08      	subs	r2, #8
 8000c84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c88:	db10      	blt.n	8000cac <__aeabi_l2f+0x5c>
 8000c8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8e:	4463      	add	r3, ip
 8000c90:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c94:	f1c2 0220 	rsb	r2, r2, #32
 8000c98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca0:	eb43 0002 	adc.w	r0, r3, r2
 8000ca4:	bf08      	it	eq
 8000ca6:	f020 0001 	biceq.w	r0, r0, #1
 8000caa:	4770      	bx	lr
 8000cac:	f102 0220 	add.w	r2, r2, #32
 8000cb0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb4:	f1c2 0220 	rsb	r2, r2, #32
 8000cb8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cbc:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc0:	eb43 0002 	adc.w	r0, r3, r2
 8000cc4:	bf08      	it	eq
 8000cc6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_fmul>:
 8000ccc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd4:	bf1e      	ittt	ne
 8000cd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cda:	ea92 0f0c 	teqne	r2, ip
 8000cde:	ea93 0f0c 	teqne	r3, ip
 8000ce2:	d06f      	beq.n	8000dc4 <__aeabi_fmul+0xf8>
 8000ce4:	441a      	add	r2, r3
 8000ce6:	ea80 0c01 	eor.w	ip, r0, r1
 8000cea:	0240      	lsls	r0, r0, #9
 8000cec:	bf18      	it	ne
 8000cee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cf2:	d01e      	beq.n	8000d32 <__aeabi_fmul+0x66>
 8000cf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cf8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cfc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d00:	fba0 3101 	umull	r3, r1, r0, r1
 8000d04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d08:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d0c:	bf3e      	ittt	cc
 8000d0e:	0049      	lslcc	r1, r1, #1
 8000d10:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d14:	005b      	lslcc	r3, r3, #1
 8000d16:	ea40 0001 	orr.w	r0, r0, r1
 8000d1a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d1e:	2afd      	cmp	r2, #253	; 0xfd
 8000d20:	d81d      	bhi.n	8000d5e <__aeabi_fmul+0x92>
 8000d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2a:	bf08      	it	eq
 8000d2c:	f020 0001 	biceq.w	r0, r0, #1
 8000d30:	4770      	bx	lr
 8000d32:	f090 0f00 	teq	r0, #0
 8000d36:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d3a:	bf08      	it	eq
 8000d3c:	0249      	lsleq	r1, r1, #9
 8000d3e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d42:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d46:	3a7f      	subs	r2, #127	; 0x7f
 8000d48:	bfc2      	ittt	gt
 8000d4a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d4e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d52:	4770      	bxgt	lr
 8000d54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d58:	f04f 0300 	mov.w	r3, #0
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	dc5d      	bgt.n	8000e1c <__aeabi_fmul+0x150>
 8000d60:	f112 0f19 	cmn.w	r2, #25
 8000d64:	bfdc      	itt	le
 8000d66:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d6a:	4770      	bxle	lr
 8000d6c:	f1c2 0200 	rsb	r2, r2, #0
 8000d70:	0041      	lsls	r1, r0, #1
 8000d72:	fa21 f102 	lsr.w	r1, r1, r2
 8000d76:	f1c2 0220 	rsb	r2, r2, #32
 8000d7a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d82:	f140 0000 	adc.w	r0, r0, #0
 8000d86:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d8a:	bf08      	it	eq
 8000d8c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d90:	4770      	bx	lr
 8000d92:	f092 0f00 	teq	r2, #0
 8000d96:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d9a:	bf02      	ittt	eq
 8000d9c:	0040      	lsleq	r0, r0, #1
 8000d9e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000da2:	3a01      	subeq	r2, #1
 8000da4:	d0f9      	beq.n	8000d9a <__aeabi_fmul+0xce>
 8000da6:	ea40 000c 	orr.w	r0, r0, ip
 8000daa:	f093 0f00 	teq	r3, #0
 8000dae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0049      	lsleq	r1, r1, #1
 8000db6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dba:	3b01      	subeq	r3, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xe6>
 8000dbe:	ea41 010c 	orr.w	r1, r1, ip
 8000dc2:	e78f      	b.n	8000ce4 <__aeabi_fmul+0x18>
 8000dc4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc8:	ea92 0f0c 	teq	r2, ip
 8000dcc:	bf18      	it	ne
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d00a      	beq.n	8000dea <__aeabi_fmul+0x11e>
 8000dd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd8:	bf18      	it	ne
 8000dda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	d1d8      	bne.n	8000d92 <__aeabi_fmul+0xc6>
 8000de0:	ea80 0001 	eor.w	r0, r0, r1
 8000de4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	bf17      	itett	ne
 8000df0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000df4:	4608      	moveq	r0, r1
 8000df6:	f091 0f00 	teqne	r1, #0
 8000dfa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dfe:	d014      	beq.n	8000e2a <__aeabi_fmul+0x15e>
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d101      	bne.n	8000e0a <__aeabi_fmul+0x13e>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	d10f      	bne.n	8000e2a <__aeabi_fmul+0x15e>
 8000e0a:	ea93 0f0c 	teq	r3, ip
 8000e0e:	d103      	bne.n	8000e18 <__aeabi_fmul+0x14c>
 8000e10:	024b      	lsls	r3, r1, #9
 8000e12:	bf18      	it	ne
 8000e14:	4608      	movne	r0, r1
 8000e16:	d108      	bne.n	8000e2a <__aeabi_fmul+0x15e>
 8000e18:	ea80 0001 	eor.w	r0, r0, r1
 8000e1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e28:	4770      	bx	lr
 8000e2a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_fdiv>:
 8000e34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e3c:	bf1e      	ittt	ne
 8000e3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e42:	ea92 0f0c 	teqne	r2, ip
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d069      	beq.n	8000f20 <__aeabi_fdiv+0xec>
 8000e4c:	eba2 0203 	sub.w	r2, r2, r3
 8000e50:	ea80 0c01 	eor.w	ip, r0, r1
 8000e54:	0249      	lsls	r1, r1, #9
 8000e56:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e5a:	d037      	beq.n	8000ecc <__aeabi_fdiv+0x98>
 8000e5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e60:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e64:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	bf38      	it	cc
 8000e70:	005b      	lslcc	r3, r3, #1
 8000e72:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e76:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	bf24      	itt	cs
 8000e7e:	1a5b      	subcs	r3, r3, r1
 8000e80:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e84:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e88:	bf24      	itt	cs
 8000e8a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e8e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e92:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e96:	bf24      	itt	cs
 8000e98:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ea4:	bf24      	itt	cs
 8000ea6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eaa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eae:	011b      	lsls	r3, r3, #4
 8000eb0:	bf18      	it	ne
 8000eb2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eb6:	d1e0      	bne.n	8000e7a <__aeabi_fdiv+0x46>
 8000eb8:	2afd      	cmp	r2, #253	; 0xfd
 8000eba:	f63f af50 	bhi.w	8000d5e <__aeabi_fmul+0x92>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed4:	327f      	adds	r2, #127	; 0x7f
 8000ed6:	bfc2      	ittt	gt
 8000ed8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000edc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee0:	4770      	bxgt	lr
 8000ee2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee6:	f04f 0300 	mov.w	r3, #0
 8000eea:	3a01      	subs	r2, #1
 8000eec:	e737      	b.n	8000d5e <__aeabi_fmul+0x92>
 8000eee:	f092 0f00 	teq	r2, #0
 8000ef2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ef6:	bf02      	ittt	eq
 8000ef8:	0040      	lsleq	r0, r0, #1
 8000efa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000efe:	3a01      	subeq	r2, #1
 8000f00:	d0f9      	beq.n	8000ef6 <__aeabi_fdiv+0xc2>
 8000f02:	ea40 000c 	orr.w	r0, r0, ip
 8000f06:	f093 0f00 	teq	r3, #0
 8000f0a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0049      	lsleq	r1, r1, #1
 8000f12:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f16:	3b01      	subeq	r3, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xda>
 8000f1a:	ea41 010c 	orr.w	r1, r1, ip
 8000f1e:	e795      	b.n	8000e4c <__aeabi_fdiv+0x18>
 8000f20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f24:	ea92 0f0c 	teq	r2, ip
 8000f28:	d108      	bne.n	8000f3c <__aeabi_fdiv+0x108>
 8000f2a:	0242      	lsls	r2, r0, #9
 8000f2c:	f47f af7d 	bne.w	8000e2a <__aeabi_fmul+0x15e>
 8000f30:	ea93 0f0c 	teq	r3, ip
 8000f34:	f47f af70 	bne.w	8000e18 <__aeabi_fmul+0x14c>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e776      	b.n	8000e2a <__aeabi_fmul+0x15e>
 8000f3c:	ea93 0f0c 	teq	r3, ip
 8000f40:	d104      	bne.n	8000f4c <__aeabi_fdiv+0x118>
 8000f42:	024b      	lsls	r3, r1, #9
 8000f44:	f43f af4c 	beq.w	8000de0 <__aeabi_fmul+0x114>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e76e      	b.n	8000e2a <__aeabi_fmul+0x15e>
 8000f4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f50:	bf18      	it	ne
 8000f52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f56:	d1ca      	bne.n	8000eee <__aeabi_fdiv+0xba>
 8000f58:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f5c:	f47f af5c 	bne.w	8000e18 <__aeabi_fmul+0x14c>
 8000f60:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f64:	f47f af3c 	bne.w	8000de0 <__aeabi_fmul+0x114>
 8000f68:	e75f      	b.n	8000e2a <__aeabi_fmul+0x15e>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_f2iz>:
 8000f6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f70:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f74:	d30f      	bcc.n	8000f96 <__aeabi_f2iz+0x2a>
 8000f76:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f7a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f7e:	d90d      	bls.n	8000f9c <__aeabi_f2iz+0x30>
 8000f80:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f88:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f8c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f90:	bf18      	it	ne
 8000f92:	4240      	negne	r0, r0
 8000f94:	4770      	bx	lr
 8000f96:	f04f 0000 	mov.w	r0, #0
 8000f9a:	4770      	bx	lr
 8000f9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fa0:	d101      	bne.n	8000fa6 <__aeabi_f2iz+0x3a>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	d105      	bne.n	8000fb2 <__aeabi_f2iz+0x46>
 8000fa6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000faa:	bf08      	it	eq
 8000fac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fb0:	4770      	bx	lr
 8000fb2:	f04f 0000 	mov.w	r0, #0
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <HAL_Init+0x28>)
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x28>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f93f 	bl	800124c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f004 fc10 	bl	80057f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f957 	bl	80012b6 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 f91f 	bl	8001262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000014 	.word	0x20000014
 800103c:	20000004 	.word	0x20000004
 8001040:	20000000 	.word	0x20000000

08001044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x1c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x20>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a03      	ldr	r2, [pc, #12]	; (8001064 <HAL_IncTick+0x20>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	20000004 	.word	0x20000004
 8001064:	200004a8 	.word	0x200004a8

08001068 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b02      	ldr	r3, [pc, #8]	; (8001078 <HAL_GetTick+0x10>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	200004a8 	.word	0x200004a8

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff fff0 	bl	8001068 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_Delay+0x40>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffe0 	bl	8001068 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad2      	subs	r2, r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d3f7      	bcc.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000004 	.word	0x20000004

080010c0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800112e:	4908      	ldr	r1, [pc, #32]	; (8001150 <NVIC_EnableIRQ+0x2c>)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	095b      	lsrs	r3, r3, #5
 8001136:	79fa      	ldrb	r2, [r7, #7]
 8001138:	f002 021f 	and.w	r2, r2, #31
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100

08001154 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	da0b      	bge.n	8001180 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	490d      	ldr	r1, [pc, #52]	; (80011a0 <NVIC_SetPriority+0x4c>)
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	3b04      	subs	r3, #4
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117e:	e009      	b.n	8001194 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	4908      	ldr	r1, [pc, #32]	; (80011a4 <NVIC_SetPriority+0x50>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	2201      	movs	r2, #1
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	1e5a      	subs	r2, r3, #1
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	401a      	ands	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ee:	2101      	movs	r1, #1
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	1e59      	subs	r1, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	; 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001218:	d301      	bcc.n	800121e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121a:	2301      	movs	r3, #1
 800121c:	e00f      	b.n	800123e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <SysTick_Config+0x40>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001226:	210f      	movs	r1, #15
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f7ff ff92 	bl	8001154 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <SysTick_Config+0x40>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <SysTick_Config+0x40>)
 8001238:	2207      	movs	r2, #7
 800123a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	e000e010 	.word	0xe000e010

0800124c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ff33 	bl	80010c0 <NVIC_SetPriorityGrouping>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001274:	f7ff ff48 	bl	8001108 <NVIC_GetPriorityGrouping>
 8001278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	6978      	ldr	r0, [r7, #20]
 8001280:	f7ff ff92 	bl	80011a8 <NVIC_EncodePriority>
 8001284:	4602      	mov	r2, r0
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff61 	bl	8001154 <NVIC_SetPriority>
}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff3b 	bl	8001124 <NVIC_EnableIRQ>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffa2 	bl	8001208 <SysTick_Config>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b08b      	sub	sp, #44	; 0x2c
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
 80012f2:	e127      	b.n	8001544 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80012f4:	2201      	movs	r2, #1
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	429a      	cmp	r2, r3
 800130e:	f040 8116 	bne.w	800153e <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b12      	cmp	r3, #18
 8001318:	d034      	beq.n	8001384 <HAL_GPIO_Init+0xb4>
 800131a:	2b12      	cmp	r3, #18
 800131c:	d80d      	bhi.n	800133a <HAL_GPIO_Init+0x6a>
 800131e:	2b02      	cmp	r3, #2
 8001320:	d02b      	beq.n	800137a <HAL_GPIO_Init+0xaa>
 8001322:	2b02      	cmp	r3, #2
 8001324:	d804      	bhi.n	8001330 <HAL_GPIO_Init+0x60>
 8001326:	2b00      	cmp	r3, #0
 8001328:	d031      	beq.n	800138e <HAL_GPIO_Init+0xbe>
 800132a:	2b01      	cmp	r3, #1
 800132c:	d01c      	beq.n	8001368 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800132e:	e048      	b.n	80013c2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001330:	2b03      	cmp	r3, #3
 8001332:	d043      	beq.n	80013bc <HAL_GPIO_Init+0xec>
 8001334:	2b11      	cmp	r3, #17
 8001336:	d01b      	beq.n	8001370 <HAL_GPIO_Init+0xa0>
          break;
 8001338:	e043      	b.n	80013c2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800133a:	4a87      	ldr	r2, [pc, #540]	; (8001558 <HAL_GPIO_Init+0x288>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d026      	beq.n	800138e <HAL_GPIO_Init+0xbe>
 8001340:	4a85      	ldr	r2, [pc, #532]	; (8001558 <HAL_GPIO_Init+0x288>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d806      	bhi.n	8001354 <HAL_GPIO_Init+0x84>
 8001346:	4a85      	ldr	r2, [pc, #532]	; (800155c <HAL_GPIO_Init+0x28c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d020      	beq.n	800138e <HAL_GPIO_Init+0xbe>
 800134c:	4a84      	ldr	r2, [pc, #528]	; (8001560 <HAL_GPIO_Init+0x290>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d01d      	beq.n	800138e <HAL_GPIO_Init+0xbe>
          break;
 8001352:	e036      	b.n	80013c2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001354:	4a83      	ldr	r2, [pc, #524]	; (8001564 <HAL_GPIO_Init+0x294>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d019      	beq.n	800138e <HAL_GPIO_Init+0xbe>
 800135a:	4a83      	ldr	r2, [pc, #524]	; (8001568 <HAL_GPIO_Init+0x298>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d016      	beq.n	800138e <HAL_GPIO_Init+0xbe>
 8001360:	4a82      	ldr	r2, [pc, #520]	; (800156c <HAL_GPIO_Init+0x29c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0xbe>
          break;
 8001366:	e02c      	b.n	80013c2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	623b      	str	r3, [r7, #32]
          break;
 800136e:	e028      	b.n	80013c2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	3304      	adds	r3, #4
 8001376:	623b      	str	r3, [r7, #32]
          break;
 8001378:	e023      	b.n	80013c2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	3308      	adds	r3, #8
 8001380:	623b      	str	r3, [r7, #32]
          break;
 8001382:	e01e      	b.n	80013c2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	330c      	adds	r3, #12
 800138a:	623b      	str	r3, [r7, #32]
          break;
 800138c:	e019      	b.n	80013c2 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d102      	bne.n	800139c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001396:	2304      	movs	r3, #4
 8001398:	623b      	str	r3, [r7, #32]
          break;
 800139a:	e012      	b.n	80013c2 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d105      	bne.n	80013b0 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a4:	2308      	movs	r3, #8
 80013a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	611a      	str	r2, [r3, #16]
          break;
 80013ae:	e008      	b.n	80013c2 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013b0:	2308      	movs	r3, #8
 80013b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	615a      	str	r2, [r3, #20]
          break;
 80013ba:	e002      	b.n	80013c2 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
          break;
 80013c0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	2bff      	cmp	r3, #255	; 0xff
 80013c6:	d801      	bhi.n	80013cc <HAL_GPIO_Init+0xfc>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	e001      	b.n	80013d0 <HAL_GPIO_Init+0x100>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3304      	adds	r3, #4
 80013d0:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2bff      	cmp	r3, #255	; 0xff
 80013d6:	d802      	bhi.n	80013de <HAL_GPIO_Init+0x10e>
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	e002      	b.n	80013e4 <HAL_GPIO_Init+0x114>
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	3b08      	subs	r3, #8
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	210f      	movs	r1, #15
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	401a      	ands	r2, r3
 80013f6:	6a39      	ldr	r1, [r7, #32]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	431a      	orrs	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 8096 	beq.w	800153e <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001412:	4a57      	ldr	r2, [pc, #348]	; (8001570 <HAL_GPIO_Init+0x2a0>)
 8001414:	4b56      	ldr	r3, [pc, #344]	; (8001570 <HAL_GPIO_Init+0x2a0>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6193      	str	r3, [r2, #24]
 800141e:	4b54      	ldr	r3, [pc, #336]	; (8001570 <HAL_GPIO_Init+0x2a0>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800142a:	4a52      	ldr	r2, [pc, #328]	; (8001574 <HAL_GPIO_Init+0x2a4>)
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001436:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	220f      	movs	r2, #15
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	4013      	ands	r3, r2
 800144c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a49      	ldr	r2, [pc, #292]	; (8001578 <HAL_GPIO_Init+0x2a8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d013      	beq.n	800147e <HAL_GPIO_Init+0x1ae>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a48      	ldr	r2, [pc, #288]	; (800157c <HAL_GPIO_Init+0x2ac>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00d      	beq.n	800147a <HAL_GPIO_Init+0x1aa>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a47      	ldr	r2, [pc, #284]	; (8001580 <HAL_GPIO_Init+0x2b0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d007      	beq.n	8001476 <HAL_GPIO_Init+0x1a6>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a46      	ldr	r2, [pc, #280]	; (8001584 <HAL_GPIO_Init+0x2b4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_GPIO_Init+0x1a2>
 800146e:	2303      	movs	r3, #3
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x1b0>
 8001472:	2304      	movs	r3, #4
 8001474:	e004      	b.n	8001480 <HAL_GPIO_Init+0x1b0>
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <HAL_GPIO_Init+0x1b0>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x1b0>
 800147e:	2300      	movs	r3, #0
 8001480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001482:	f002 0203 	and.w	r2, r2, #3
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4093      	lsls	r3, r2
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4313      	orrs	r3, r2
 800148e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001490:	4938      	ldr	r1, [pc, #224]	; (8001574 <HAL_GPIO_Init+0x2a4>)
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014aa:	4937      	ldr	r1, [pc, #220]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 80014ac:	4b36      	ldr	r3, [pc, #216]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]
 80014b6:	e006      	b.n	80014c6 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014b8:	4933      	ldr	r1, [pc, #204]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 80014ba:	4b33      	ldr	r3, [pc, #204]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	4013      	ands	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d006      	beq.n	80014e0 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014d2:	492d      	ldr	r1, [pc, #180]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 80014d4:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	604b      	str	r3, [r1, #4]
 80014de:	e006      	b.n	80014ee <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014e0:	4929      	ldr	r1, [pc, #164]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 80014e2:	4b29      	ldr	r3, [pc, #164]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	4013      	ands	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014fa:	4923      	ldr	r1, [pc, #140]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	608b      	str	r3, [r1, #8]
 8001506:	e006      	b.n	8001516 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001508:	491f      	ldr	r1, [pc, #124]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	43db      	mvns	r3, r3
 8001512:	4013      	ands	r3, r2
 8001514:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d006      	beq.n	8001530 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001522:	4919      	ldr	r1, [pc, #100]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	60cb      	str	r3, [r1, #12]
 800152e:	e006      	b.n	800153e <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001530:	4915      	ldr	r1, [pc, #84]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	43db      	mvns	r3, r3
 800153a:	4013      	ands	r3, r2
 800153c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	3301      	adds	r3, #1
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	2b0f      	cmp	r3, #15
 8001548:	f67f aed4 	bls.w	80012f4 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 800154c:	bf00      	nop
 800154e:	372c      	adds	r7, #44	; 0x2c
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	10210000 	.word	0x10210000
 800155c:	10110000 	.word	0x10110000
 8001560:	10120000 	.word	0x10120000
 8001564:	10310000 	.word	0x10310000
 8001568:	10320000 	.word	0x10320000
 800156c:	10220000 	.word	0x10220000
 8001570:	40021000 	.word	0x40021000
 8001574:	40010000 	.word	0x40010000
 8001578:	40010800 	.word	0x40010800
 800157c:	40010c00 	.word	0x40010c00
 8001580:	40011000 	.word	0x40011000
 8001584:	40011400 	.word	0x40011400
 8001588:	40010400 	.word	0x40010400

0800158c <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e0e7      	b.n	8001776 <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d106      	bne.n	80015c0 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f003 fd32 	bl	8005024 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2224      	movs	r2, #36	; 0x24
 80015c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015d8:	f001 fde2 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80015dc:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4a67      	ldr	r2, [pc, #412]	; (8001780 <HAL_I2C_Init+0x1f4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d807      	bhi.n	80015f8 <HAL_I2C_Init+0x6c>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4a66      	ldr	r2, [pc, #408]	; (8001784 <HAL_I2C_Init+0x1f8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	bf94      	ite	ls
 80015f0:	2301      	movls	r3, #1
 80015f2:	2300      	movhi	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	e006      	b.n	8001606 <HAL_I2C_Init+0x7a>
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4a63      	ldr	r2, [pc, #396]	; (8001788 <HAL_I2C_Init+0x1fc>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	bf94      	ite	ls
 8001600:	2301      	movls	r3, #1
 8001602:	2300      	movhi	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e0b3      	b.n	8001776 <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	4a5e      	ldr	r2, [pc, #376]	; (800178c <HAL_I2C_Init+0x200>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	0c9b      	lsrs	r3, r3, #18
 8001618:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4955      	ldr	r1, [pc, #340]	; (8001780 <HAL_I2C_Init+0x1f4>)
 800162c:	428b      	cmp	r3, r1
 800162e:	d802      	bhi.n	8001636 <HAL_I2C_Init+0xaa>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3301      	adds	r3, #1
 8001634:	e009      	b.n	800164a <HAL_I2C_Init+0xbe>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800163c:	fb01 f303 	mul.w	r3, r1, r3
 8001640:	4953      	ldr	r1, [pc, #332]	; (8001790 <HAL_I2C_Init+0x204>)
 8001642:	fba1 1303 	umull	r1, r3, r1, r3
 8001646:	099b      	lsrs	r3, r3, #6
 8001648:	3301      	adds	r3, #1
 800164a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6819      	ldr	r1, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4a4a      	ldr	r2, [pc, #296]	; (8001780 <HAL_I2C_Init+0x1f4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d80d      	bhi.n	8001676 <HAL_I2C_Init+0xea>
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1e5a      	subs	r2, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fbb2 f3f3 	udiv	r3, r2, r3
 8001668:	3301      	adds	r3, #1
 800166a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf38      	it	cc
 8001672:	2304      	movcc	r3, #4
 8001674:	e04f      	b.n	8001716 <HAL_I2C_Init+0x18a>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d111      	bne.n	80016a2 <HAL_I2C_Init+0x116>
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1e58      	subs	r0, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001690:	3301      	adds	r3, #1
 8001692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001696:	2b00      	cmp	r3, #0
 8001698:	bf0c      	ite	eq
 800169a:	2301      	moveq	r3, #1
 800169c:	2300      	movne	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	e012      	b.n	80016c8 <HAL_I2C_Init+0x13c>
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1e58      	subs	r0, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	009a      	lsls	r2, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b8:	3301      	adds	r3, #1
 80016ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bf0c      	ite	eq
 80016c2:	2301      	moveq	r3, #1
 80016c4:	2300      	movne	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_I2C_Init+0x144>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e022      	b.n	8001716 <HAL_I2C_Init+0x18a>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10e      	bne.n	80016f6 <HAL_I2C_Init+0x16a>
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1e58      	subs	r0, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ea:	3301      	adds	r3, #1
 80016ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f4:	e00f      	b.n	8001716 <HAL_I2C_Init+0x18a>
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1e58      	subs	r0, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	009a      	lsls	r2, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	fbb0 f3f3 	udiv	r3, r0, r3
 800170c:	3301      	adds	r3, #1
 800170e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001716:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	69d1      	ldr	r1, [r2, #28]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6a12      	ldr	r2, [r2, #32]
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6911      	ldr	r1, [r2, #16]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	68d2      	ldr	r2, [r2, #12]
 8001734:	430a      	orrs	r2, r1
 8001736:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6951      	ldr	r1, [r2, #20]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6992      	ldr	r2, [r2, #24]
 8001744:	430a      	orrs	r2, r1
 8001746:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	f042 0201 	orr.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2220      	movs	r2, #32
 8001762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	000186a0 	.word	0x000186a0
 8001784:	001e847f 	.word	0x001e847f
 8001788:	003d08ff 	.word	0x003d08ff
 800178c:	431bde83 	.word	0x431bde83
 8001790:	10624dd3 	.word	0x10624dd3

08001794 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af02      	add	r7, sp, #8
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	461a      	mov	r2, r3
 80017a0:	460b      	mov	r3, r1
 80017a2:	817b      	strh	r3, [r7, #10]
 80017a4:	4613      	mov	r3, r2
 80017a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80017ac:	f7ff fc5c 	bl	8001068 <HAL_GetTick>
 80017b0:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b20      	cmp	r3, #32
 80017bc:	f040 80ee 	bne.w	800199c <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2319      	movs	r3, #25
 80017c6:	2201      	movs	r2, #1
 80017c8:	4977      	ldr	r1, [pc, #476]	; (80019a8 <HAL_I2C_Master_Transmit+0x214>)
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 ff62 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80017d6:	2302      	movs	r3, #2
 80017d8:	e0e1      	b.n	800199e <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_I2C_Master_Transmit+0x54>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e0da      	b.n	800199e <HAL_I2C_Master_Transmit+0x20a>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d007      	beq.n	800180e <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	f042 0201 	orr.w	r2, r2, #1
 800180c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800181c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2221      	movs	r2, #33	; 0x21
 8001822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2210      	movs	r2, #16
 800182a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	893a      	ldrh	r2, [r7, #8]
 800183e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4a5a      	ldr	r2, [pc, #360]	; (80019ac <HAL_I2C_Master_Transmit+0x218>)
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184a:	b29a      	uxth	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001850:	8979      	ldrh	r1, [r7, #10]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	6a3a      	ldr	r2, [r7, #32]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 fd26 	bl	80022a8 <I2C_MasterRequestWrite>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00f      	beq.n	8001882 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	2b04      	cmp	r3, #4
 8001868:	d105      	bne.n	8001876 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e093      	b.n	800199e <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e08d      	b.n	800199e <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001898:	e066      	b.n	8001968 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	6a39      	ldr	r1, [r7, #32]
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f000 ffb7 	bl	8002812 <I2C_WaitOnTXEFlagUntilTimeout>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00f      	beq.n	80018ca <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d109      	bne.n	80018c6 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018c0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e06b      	b.n	800199e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e069      	b.n	800199e <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	1c58      	adds	r0, r3, #1
 80018d4:	68f9      	ldr	r1, [r7, #12]
 80018d6:	6248      	str	r0, [r1, #36]	; 0x24
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ee:	3b01      	subs	r3, #1
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b04      	cmp	r3, #4
 8001902:	d119      	bne.n	8001938 <HAL_I2C_Master_Transmit+0x1a4>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001908:	2b00      	cmp	r3, #0
 800190a:	d015      	beq.n	8001938 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	1c58      	adds	r0, r3, #1
 8001916:	68f9      	ldr	r1, [r7, #12]
 8001918:	6248      	str	r0, [r1, #36]	; 0x24
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001922:	b29b      	uxth	r3, r3
 8001924:	3b01      	subs	r3, #1
 8001926:	b29a      	uxth	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001930:	3b01      	subs	r3, #1
 8001932:	b29a      	uxth	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	6a39      	ldr	r1, [r7, #32]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 ffa5 	bl	800288c <I2C_WaitOnBTFFlagUntilTimeout>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00f      	beq.n	8001968 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	2b04      	cmp	r3, #4
 800194e:	d109      	bne.n	8001964 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800195e:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e01c      	b.n	800199e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e01a      	b.n	800199e <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196c:	2b00      	cmp	r3, #0
 800196e:	d194      	bne.n	800189a <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800197e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2220      	movs	r2, #32
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	e000      	b.n	800199e <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 800199c:	2302      	movs	r3, #2
  }
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	00100002 	.word	0x00100002
 80019ac:	ffff0000 	.word	0xffff0000

080019b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	4608      	mov	r0, r1
 80019ba:	4611      	mov	r1, r2
 80019bc:	461a      	mov	r2, r3
 80019be:	4603      	mov	r3, r0
 80019c0:	817b      	strh	r3, [r7, #10]
 80019c2:	460b      	mov	r3, r1
 80019c4:	813b      	strh	r3, [r7, #8]
 80019c6:	4613      	mov	r3, r2
 80019c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019ce:	f7ff fb4b 	bl	8001068 <HAL_GetTick>
 80019d2:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b20      	cmp	r3, #32
 80019de:	f040 80e7 	bne.w	8001bb0 <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2319      	movs	r3, #25
 80019e8:	2201      	movs	r2, #1
 80019ea:	4974      	ldr	r1, [pc, #464]	; (8001bbc <HAL_I2C_Mem_Write+0x20c>)
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 fe51 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 80019f8:	2302      	movs	r3, #2
 80019fa:	e0da      	b.n	8001bb2 <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_I2C_Mem_Write+0x5a>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e0d3      	b.n	8001bb2 <HAL_I2C_Mem_Write+0x202>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d007      	beq.n	8001a30 <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2221      	movs	r2, #33	; 0x21
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2240      	movs	r2, #64	; 0x40
 8001a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6a3a      	ldr	r2, [r7, #32]
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4a56      	ldr	r2, [pc, #344]	; (8001bc0 <HAL_I2C_Mem_Write+0x210>)
 8001a66:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a72:	88f8      	ldrh	r0, [r7, #6]
 8001a74:	893a      	ldrh	r2, [r7, #8]
 8001a76:	8979      	ldrh	r1, [r7, #10]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	4603      	mov	r3, r0
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fc92 	bl	80023ac <I2C_RequestMemoryWrite>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d05e      	beq.n	8001b4c <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d105      	bne.n	8001aa2 <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e087      	b.n	8001bb2 <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e081      	b.n	8001bb2 <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 fead 	bl	8002812 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00f      	beq.n	8001ade <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d109      	bne.n	8001ada <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e06b      	b.n	8001bb2 <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e069      	b.n	8001bb2 <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	1c58      	adds	r0, r3, #1
 8001ae8:	68f9      	ldr	r1, [r7, #12]
 8001aea:	6248      	str	r0, [r1, #36]	; 0x24
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	6113      	str	r3, [r2, #16]
      hi2c->XferSize--;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d119      	bne.n	8001b4c <HAL_I2C_Mem_Write+0x19c>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d015      	beq.n	8001b4c <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	1c58      	adds	r0, r3, #1
 8001b2a:	68f9      	ldr	r1, [r7, #12]
 8001b2c:	6248      	str	r0, [r1, #36]	; 0x24
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	6113      	str	r3, [r2, #16]
        hi2c->XferSize--;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1ac      	bne.n	8001aae <HAL_I2C_Mem_Write+0xfe>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 fe97 	bl	800288c <I2C_WaitOnBTFFlagUntilTimeout>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00f      	beq.n	8001b84 <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d109      	bne.n	8001b80 <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7a:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e018      	b.n	8001bb2 <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e016      	b.n	8001bb2 <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2220      	movs	r2, #32
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e000      	b.n	8001bb2 <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001bb0:	2302      	movs	r3, #2
  }
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	00100002 	.word	0x00100002
 8001bc0:	ffff0000 	.word	0xffff0000

08001bc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	4608      	mov	r0, r1
 8001bce:	4611      	mov	r1, r2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	817b      	strh	r3, [r7, #10]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	813b      	strh	r3, [r7, #8]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001be2:	f7ff fa41 	bl	8001068 <HAL_GetTick>
 8001be6:	6278      	str	r0, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b20      	cmp	r3, #32
 8001bf2:	f040 8222 	bne.w	800203a <HAL_I2C_Mem_Read+0x476>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2319      	movs	r3, #25
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	498a      	ldr	r1, [pc, #552]	; (8001e28 <HAL_I2C_Mem_Read+0x264>)
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 fd47 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e215      	b.n	800203c <HAL_I2C_Mem_Read+0x478>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_I2C_Mem_Read+0x5a>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e20e      	b.n	800203c <HAL_I2C_Mem_Read+0x478>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d007      	beq.n	8001c44 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2222      	movs	r2, #34	; 0x22
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2240      	movs	r2, #64	; 0x40
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4a6c      	ldr	r2, [pc, #432]	; (8001e2c <HAL_I2C_Mem_Read+0x268>)
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c86:	88f8      	ldrh	r0, [r7, #6]
 8001c88:	893a      	ldrh	r2, [r7, #8]
 8001c8a:	8979      	ldrh	r1, [r7, #10]
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	4603      	mov	r3, r0
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 fc1a 	bl	80024d0 <I2C_RequestMemoryRead>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00f      	beq.n	8001cc2 <HAL_I2C_Mem_Read+0xfe>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d105      	bne.n	8001cb6 <HAL_I2C_Mem_Read+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e1c2      	b.n	800203c <HAL_I2C_Mem_Read+0x478>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1bc      	b.n	800203c <HAL_I2C_Mem_Read+0x478>
      }
    }

    if(hi2c->XferSize == 0U)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d113      	bne.n	8001cf2 <HAL_I2C_Mem_Read+0x12e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	623b      	str	r3, [r7, #32]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	623b      	str	r3, [r7, #32]
 8001cde:	6a3b      	ldr	r3, [r7, #32]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	e190      	b.n	8002014 <HAL_I2C_Mem_Read+0x450>
    }
    else if(hi2c->XferSize == 1U)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d11d      	bne.n	8001d36 <HAL_I2C_Mem_Read+0x172>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d08:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d0a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d32:	b662      	cpsie	i
 8001d34:	e16e      	b.n	8002014 <HAL_I2C_Mem_Read+0x450>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if(hi2c->XferSize == 2U)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d11d      	bne.n	8001d7a <HAL_I2C_Mem_Read+0x1b6>
    {
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d50:	2300      	movs	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	69bb      	ldr	r3, [r7, #24]
      
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d76:	b662      	cpsie	i
 8001d78:	e14c      	b.n	8002014 <HAL_I2C_Mem_Read+0x450>
       __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001da0:	e138      	b.n	8002014 <HAL_I2C_Mem_Read+0x450>
    {
      if(hi2c->XferSize <= 3U)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	f200 80ef 	bhi.w	8001f8a <HAL_I2C_Mem_Read+0x3c6>
      {
        /* One byte */
        if(hi2c->XferSize== 1U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d127      	bne.n	8001e04 <HAL_I2C_Mem_Read+0x240>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 fda4 	bl	8002906 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_I2C_Mem_Read+0x210>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	2b20      	cmp	r3, #32
 8001dca:	d101      	bne.n	8001dd0 <HAL_I2C_Mem_Read+0x20c>
            {
              return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e135      	b.n	800203c <HAL_I2C_Mem_Read+0x478>
            }
            else
            {
              return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e133      	b.n	800203c <HAL_I2C_Mem_Read+0x478>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	1c59      	adds	r1, r3, #1
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	6251      	str	r1, [r2, #36]	; 0x24
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	6912      	ldr	r2, [r2, #16]
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e02:	e107      	b.n	8002014 <HAL_I2C_Mem_Read+0x450>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d14c      	bne.n	8001ea6 <HAL_I2C_Mem_Read+0x2e2>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e12:	2200      	movs	r2, #0
 8001e14:	4906      	ldr	r1, [pc, #24]	; (8001e30 <HAL_I2C_Mem_Read+0x26c>)
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 fc3c 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <HAL_I2C_Mem_Read+0x270>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e10a      	b.n	800203c <HAL_I2C_Mem_Read+0x478>
 8001e26:	bf00      	nop
 8001e28:	00100002 	.word	0x00100002
 8001e2c:	ffff0000 	.word	0xffff0000
 8001e30:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e34:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e44:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	1c59      	adds	r1, r3, #1
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	6251      	str	r1, [r2, #36]	; 0x24
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	6912      	ldr	r2, [r2, #16]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e74:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	1c59      	adds	r1, r3, #1
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	6251      	str	r1, [r2, #36]	; 0x24
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	6912      	ldr	r2, [r2, #16]
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ea4:	e0b6      	b.n	8002014 <HAL_I2C_Mem_Read+0x450>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eac:	2200      	movs	r2, #0
 8001eae:	4965      	ldr	r1, [pc, #404]	; (8002044 <HAL_I2C_Mem_Read+0x480>)
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 fbef 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <HAL_I2C_Mem_Read+0x2fc>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e0bd      	b.n	800203c <HAL_I2C_Mem_Read+0x478>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ece:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	1c59      	adds	r1, r3, #1
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	6251      	str	r1, [r2, #36]	; 0x24
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	6912      	ldr	r2, [r2, #16]
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f06:	2200      	movs	r2, #0
 8001f08:	494e      	ldr	r1, [pc, #312]	; (8002044 <HAL_I2C_Mem_Read+0x480>)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 fbc2 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_I2C_Mem_Read+0x356>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e090      	b.n	800203c <HAL_I2C_Mem_Read+0x478>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f28:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	1c59      	adds	r1, r3, #1
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	6251      	str	r1, [r2, #36]	; 0x24
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	6912      	ldr	r2, [r2, #16]
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f58:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	1c59      	adds	r1, r3, #1
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	6251      	str	r1, [r2, #36]	; 0x24
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	6912      	ldr	r2, [r2, #16]
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f88:	e044      	b.n	8002014 <HAL_I2C_Mem_Read+0x450>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fcb9 	bl	8002906 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d007      	beq.n	8001faa <HAL_I2C_Mem_Read+0x3e6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d101      	bne.n	8001fa6 <HAL_I2C_Mem_Read+0x3e2>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e04a      	b.n	800203c <HAL_I2C_Mem_Read+0x478>
          }
          else
          {
            return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e048      	b.n	800203c <HAL_I2C_Mem_Read+0x478>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	1c59      	adds	r1, r3, #1
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	6251      	str	r1, [r2, #36]	; 0x24
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	6912      	ldr	r2, [r2, #16]
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d116      	bne.n	8002014 <HAL_I2C_Mem_Read+0x450>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	1c59      	adds	r1, r3, #1
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	6251      	str	r1, [r2, #36]	; 0x24
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	6912      	ldr	r2, [r2, #16]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002018:	2b00      	cmp	r3, #0
 800201a:	f47f aec2 	bne.w	8001da2 <HAL_I2C_Mem_Read+0x1de>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2220      	movs	r2, #32
 8002022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <HAL_I2C_Mem_Read+0x478>
  }
  else
  {
    return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
  }
}
 800203c:	4618      	mov	r0, r3
 800203e:	3728      	adds	r7, #40	; 0x28
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	00010004 	.word	0x00010004

08002048 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08c      	sub	sp, #48	; 0x30
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	460b      	mov	r3, r1
 8002056:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
 8002064:	2300      	movs	r3, #0
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	2301      	movs	r3, #1
 800206a:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 800206c:	f7fe fffc 	bl	8001068 <HAL_GetTick>
 8002070:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b20      	cmp	r3, #32
 800207c:	f040 810a 	bne.w	8002294 <HAL_I2C_IsDeviceReady+0x24c>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2319      	movs	r3, #25
 8002086:	2201      	movs	r2, #1
 8002088:	4985      	ldr	r1, [pc, #532]	; (80022a0 <HAL_I2C_IsDeviceReady+0x258>)
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 fb02 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_I2C_IsDeviceReady+0x52>
    {
      return HAL_BUSY;
 8002096:	2302      	movs	r3, #2
 8002098:	e0fd      	b.n	8002296 <HAL_I2C_IsDeviceReady+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_I2C_IsDeviceReady+0x60>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e0f6      	b.n	8002296 <HAL_I2C_IsDeviceReady+0x24e>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d007      	beq.n	80020ce <HAL_I2C_IsDeviceReady+0x86>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	f042 0201 	orr.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2224      	movs	r2, #36	; 0x24
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a6d      	ldr	r2, [pc, #436]	; (80022a4 <HAL_I2C_IsDeviceReady+0x25c>)
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    do
    {
      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002100:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2200      	movs	r2, #0
 800210a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fac0 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_I2C_IsDeviceReady+0xd6>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e0bb      	b.n	8002296 <HAL_I2C_IsDeviceReady+0x24e>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	897a      	ldrh	r2, [r7, #10]
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800212a:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800212c:	f7fe ff9c 	bl	8001068 <HAL_GetTick>
 8002130:	6278      	str	r0, [r7, #36]	; 0x24

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b02      	cmp	r3, #2
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	623b      	str	r3, [r7, #32]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	61fb      	str	r3, [r7, #28]
      tmp3 = hi2c->State;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002166:	b2db      	uxtb	r3, r3
 8002168:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 800216a:	e02a      	b.n	80021c2 <HAL_I2C_IsDeviceReady+0x17a>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d007      	beq.n	8002182 <HAL_I2C_IsDeviceReady+0x13a>
 8002172:	f7fe ff79 	bl	8001068 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	1ad2      	subs	r2, r2, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d903      	bls.n	800218a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	22a0      	movs	r2, #160	; 0xa0
 8002186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b02      	cmp	r3, #2
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	623b      	str	r3, [r7, #32]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	61fb      	str	r3, [r7, #28]
        tmp3 = hi2c->State;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <HAL_I2C_IsDeviceReady+0x18c>
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <HAL_I2C_IsDeviceReady+0x18c>
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2ba0      	cmp	r3, #160	; 0xa0
 80021d2:	d1cb      	bne.n	800216c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d129      	bne.n	800223e <HAL_I2C_IsDeviceReady+0x1f6>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2319      	movs	r3, #25
 8002216:	2201      	movs	r2, #1
 8002218:	4921      	ldr	r1, [pc, #132]	; (80022a0 <HAL_I2C_IsDeviceReady+0x258>)
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fa3a 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_I2C_IsDeviceReady+0x1e2>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e035      	b.n	8002296 <HAL_I2C_IsDeviceReady+0x24e>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	e02b      	b.n	8002296 <HAL_I2C_IsDeviceReady+0x24e>
      }
      else
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800224c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002256:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	2319      	movs	r3, #25
 800225e:	2201      	movs	r2, #1
 8002260:	490f      	ldr	r1, [pc, #60]	; (80022a0 <HAL_I2C_IsDeviceReady+0x258>)
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fa16 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_I2C_IsDeviceReady+0x22a>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e011      	b.n	8002296 <HAL_I2C_IsDeviceReady+0x24e>
        }
      }
    }while(I2C_Trials++ < Trials);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	617a      	str	r2, [r7, #20]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4293      	cmp	r3, r2
 800227c:	f4ff af39 	bcc.w	80020f2 <HAL_I2C_IsDeviceReady+0xaa>

    hi2c->State = HAL_I2C_STATE_READY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_I2C_IsDeviceReady+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002294:	2302      	movs	r3, #2
  }
}
 8002296:	4618      	mov	r0, r3
 8002298:	3728      	adds	r7, #40	; 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	00100002 	.word	0x00100002
 80022a4:	ffff0000 	.word	0xffff0000

080022a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	460b      	mov	r3, r1
 80022b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d006      	beq.n	80022d2 <I2C_MasterRequestWrite+0x2a>
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d003      	beq.n	80022d2 <I2C_MasterRequestWrite+0x2a>
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022d0:	d108      	bne.n	80022e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	e00b      	b.n	80022fc <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	2b12      	cmp	r3, #18
 80022ea:	d107      	bne.n	80022fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022fa:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 f9c3 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e040      	b.n	800239a <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002320:	d107      	bne.n	8002332 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	897a      	ldrh	r2, [r7, #10]
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800232e:	611a      	str	r2, [r3, #16]
 8002330:	e021      	b.n	8002376 <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	897a      	ldrh	r2, [r7, #10]
 8002338:	11d2      	asrs	r2, r2, #7
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	f002 0206 	and.w	r2, r2, #6
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f062 020f 	orn	r2, r2, #15
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4915      	ldr	r1, [pc, #84]	; (80023a4 <I2C_MasterRequestWrite+0xfc>)
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f9f0 	bl	8002736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d007      	beq.n	800236c <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	2b04      	cmp	r3, #4
 8002362:	d101      	bne.n	8002368 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e018      	b.n	800239a <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e016      	b.n	800239a <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	897a      	ldrh	r2, [r7, #10]
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	490b      	ldr	r1, [pc, #44]	; (80023a8 <I2C_MasterRequestWrite+0x100>)
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f9da 	bl	8002736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	2b04      	cmp	r3, #4
 800238e:	d101      	bne.n	8002394 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e002      	b.n	800239a <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e000      	b.n	800239a <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	00010008 	.word	0x00010008
 80023a8:	00010002 	.word	0x00010002

080023ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	4608      	mov	r0, r1
 80023b6:	4611      	mov	r1, r2
 80023b8:	461a      	mov	r2, r3
 80023ba:	4603      	mov	r3, r0
 80023bc:	817b      	strh	r3, [r7, #10]
 80023be:	460b      	mov	r3, r1
 80023c0:	813b      	strh	r3, [r7, #8]
 80023c2:	4613      	mov	r3, r2
 80023c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	2200      	movs	r2, #0
 80023de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f956 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e068      	b.n	80024c4 <I2C_RequestMemoryWrite+0x118>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	897a      	ldrh	r2, [r7, #10]
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	6a3a      	ldr	r2, [r7, #32]
 8002404:	4931      	ldr	r1, [pc, #196]	; (80024cc <I2C_RequestMemoryWrite+0x120>)
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f995 	bl	8002736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d007      	beq.n	8002422 <I2C_RequestMemoryWrite+0x76>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	2b04      	cmp	r3, #4
 8002418:	d101      	bne.n	800241e <I2C_RequestMemoryWrite+0x72>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e052      	b.n	80024c4 <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e050      	b.n	80024c4 <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243a:	6a39      	ldr	r1, [r7, #32]
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f9e8 	bl	8002812 <I2C_WaitOnTXEFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00f      	beq.n	8002468 <I2C_RequestMemoryWrite+0xbc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	2b04      	cmp	r3, #4
 800244e:	d109      	bne.n	8002464 <I2C_RequestMemoryWrite+0xb8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e02f      	b.n	80024c4 <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e02d      	b.n	80024c4 <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d105      	bne.n	800247a <I2C_RequestMemoryWrite+0xce>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	893a      	ldrh	r2, [r7, #8]
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	611a      	str	r2, [r3, #16]
 8002478:	e023      	b.n	80024c2 <I2C_RequestMemoryWrite+0x116>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	893a      	ldrh	r2, [r7, #8]
 8002480:	0a12      	lsrs	r2, r2, #8
 8002482:	b292      	uxth	r2, r2
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248a:	6a39      	ldr	r1, [r7, #32]
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f9c0 	bl	8002812 <I2C_WaitOnTXEFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00f      	beq.n	80024b8 <I2C_RequestMemoryWrite+0x10c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	2b04      	cmp	r3, #4
 800249e:	d109      	bne.n	80024b4 <I2C_RequestMemoryWrite+0x108>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ae:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e007      	b.n	80024c4 <I2C_RequestMemoryWrite+0x118>
      }
      else
      {
        return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e005      	b.n	80024c4 <I2C_RequestMemoryWrite+0x118>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	893a      	ldrh	r2, [r7, #8]
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	00010002 	.word	0x00010002

080024d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	4608      	mov	r0, r1
 80024da:	4611      	mov	r1, r2
 80024dc:	461a      	mov	r2, r3
 80024de:	4603      	mov	r3, r0
 80024e0:	817b      	strh	r3, [r7, #10]
 80024e2:	460b      	mov	r3, r1
 80024e4:	813b      	strh	r3, [r7, #8]
 80024e6:	4613      	mov	r3, r2
 80024e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002508:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	2200      	movs	r2, #0
 8002512:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f8bc 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e0af      	b.n	8002686 <I2C_RequestMemoryRead+0x1b6>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	897a      	ldrh	r2, [r7, #10]
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002532:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	6a3a      	ldr	r2, [r7, #32]
 8002538:	4955      	ldr	r1, [pc, #340]	; (8002690 <I2C_RequestMemoryRead+0x1c0>)
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f8fb 	bl	8002736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <I2C_RequestMemoryRead+0x86>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2b04      	cmp	r3, #4
 800254c:	d101      	bne.n	8002552 <I2C_RequestMemoryRead+0x82>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e099      	b.n	8002686 <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e097      	b.n	8002686 <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800256c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256e:	6a39      	ldr	r1, [r7, #32]
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f94e 	bl	8002812 <I2C_WaitOnTXEFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00f      	beq.n	800259c <I2C_RequestMemoryRead+0xcc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	2b04      	cmp	r3, #4
 8002582:	d109      	bne.n	8002598 <I2C_RequestMemoryRead+0xc8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002592:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e076      	b.n	8002686 <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e074      	b.n	8002686 <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d105      	bne.n	80025ae <I2C_RequestMemoryRead+0xde>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	893a      	ldrh	r2, [r7, #8]
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	611a      	str	r2, [r3, #16]
 80025ac:	e023      	b.n	80025f6 <I2C_RequestMemoryRead+0x126>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	893a      	ldrh	r2, [r7, #8]
 80025b4:	0a12      	lsrs	r2, r2, #8
 80025b6:	b292      	uxth	r2, r2
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025be:	6a39      	ldr	r1, [r7, #32]
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 f926 	bl	8002812 <I2C_WaitOnTXEFlagUntilTimeout>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00f      	beq.n	80025ec <I2C_RequestMemoryRead+0x11c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d109      	bne.n	80025e8 <I2C_RequestMemoryRead+0x118>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e2:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e04e      	b.n	8002686 <I2C_RequestMemoryRead+0x1b6>
      }
      else
      {
        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e04c      	b.n	8002686 <I2C_RequestMemoryRead+0x1b6>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	893a      	ldrh	r2, [r7, #8]
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f8:	6a39      	ldr	r1, [r7, #32]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f909 	bl	8002812 <I2C_WaitOnTXEFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00f      	beq.n	8002626 <I2C_RequestMemoryRead+0x156>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	2b04      	cmp	r3, #4
 800260c:	d109      	bne.n	8002622 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800261c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e031      	b.n	8002686 <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e02f      	b.n	8002686 <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* Generate Restart */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002634:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	2200      	movs	r2, #0
 800263e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f826 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <I2C_RequestMemoryRead+0x182>
  {
    return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e019      	b.n	8002686 <I2C_RequestMemoryRead+0x1b6>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	897a      	ldrh	r2, [r7, #10]
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	6a3a      	ldr	r2, [r7, #32]
 8002666:	490a      	ldr	r1, [pc, #40]	; (8002690 <I2C_RequestMemoryRead+0x1c0>)
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f864 	bl	8002736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d007      	beq.n	8002684 <I2C_RequestMemoryRead+0x1b4>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	2b04      	cmp	r3, #4
 800267a:	d101      	bne.n	8002680 <I2C_RequestMemoryRead+0x1b0>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e002      	b.n	8002686 <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e000      	b.n	8002686 <I2C_RequestMemoryRead+0x1b6>
    }
  }

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	00010002 	.word	0x00010002

08002694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	4613      	mov	r3, r2
 80026a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80026a4:	e01f      	b.n	80026e6 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d01b      	beq.n	80026e6 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d007      	beq.n	80026c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026b4:	f7fe fcd8 	bl	8001068 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	1ad2      	subs	r2, r2, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d910      	bls.n	80026e6 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e023      	b.n	800272e <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d10d      	bne.n	800270c <I2C_WaitOnFlagUntilTimeout+0x78>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	43da      	mvns	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4013      	ands	r3, r2
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	bf0c      	ite	eq
 8002702:	2301      	moveq	r3, #1
 8002704:	2300      	movne	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	e00c      	b.n	8002726 <I2C_WaitOnFlagUntilTimeout+0x92>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4013      	ands	r3, r2
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	429a      	cmp	r2, r3
 800272a:	d0bc      	beq.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002744:	e040      	b.n	80027c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002754:	d11c      	bne.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002764:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800276e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2204      	movs	r2, #4
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e03c      	b.n	800280a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002796:	d017      	beq.n	80027c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d007      	beq.n	80027ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 800279e:	f7fe fc63 	bl	8001068 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	1ad2      	subs	r2, r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d90c      	bls.n	80027c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e020      	b.n	800280a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	0c1b      	lsrs	r3, r3, #16
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10c      	bne.n	80027ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	43da      	mvns	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4013      	ands	r3, r2
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf14      	ite	ne
 80027e4:	2301      	movne	r3, #1
 80027e6:	2300      	moveq	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	e00b      	b.n	8002804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	43da      	mvns	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4013      	ands	r3, r2
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	bf14      	ite	ne
 80027fe:	2301      	movne	r3, #1
 8002800:	2300      	moveq	r3, #0
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d19e      	bne.n	8002746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800281e:	e029      	b.n	8002874 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f8ba 	bl	800299a <I2C_IsAcknowledgeFailed>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e029      	b.n	8002884 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d01d      	beq.n	8002874 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800283e:	f7fe fc13 	bl	8001068 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	1ad2      	subs	r2, r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	429a      	cmp	r2, r3
 800284c:	d912      	bls.n	8002874 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f043 0220 	orr.w	r2, r3, #32
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e007      	b.n	8002884 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287e:	2b80      	cmp	r3, #128	; 0x80
 8002880:	d1ce      	bne.n	8002820 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002898:	e029      	b.n	80028ee <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f87d 	bl	800299a <I2C_IsAcknowledgeFailed>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e029      	b.n	80028fe <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d01d      	beq.n	80028ee <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028b8:	f7fe fbd6 	bl	8001068 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	1ad2      	subs	r2, r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d912      	bls.n	80028ee <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	f043 0220 	orr.w	r2, r3, #32
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e007      	b.n	80028fe <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d1ce      	bne.n	800289a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002912:	e036      	b.n	8002982 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b10      	cmp	r3, #16
 8002920:	d114      	bne.n	800294c <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f06f 0210 	mvn.w	r2, #16
 800292a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e022      	b.n	8002992 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8002952:	f7fe fb89 	bl	8001068 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	1ad2      	subs	r2, r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	429a      	cmp	r2, r3
 8002960:	d90f      	bls.n	8002982 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f043 0220 	orr.w	r2, r3, #32
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e007      	b.n	8002992 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d1c1      	bne.n	8002914 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b0:	d114      	bne.n	80029dc <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029ba:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2204      	movs	r2, #4
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8087 	beq.w	8002b10 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a02:	4b92      	ldr	r3, [pc, #584]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d00c      	beq.n	8002a28 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a0e:	4b8f      	ldr	r3, [pc, #572]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d112      	bne.n	8002a40 <HAL_RCC_OscConfig+0x58>
 8002a1a:	4b8c      	ldr	r3, [pc, #560]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a26:	d10b      	bne.n	8002a40 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a28:	4b88      	ldr	r3, [pc, #544]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d06c      	beq.n	8002b0e <HAL_RCC_OscConfig+0x126>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d168      	bne.n	8002b0e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e22d      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a48:	d106      	bne.n	8002a58 <HAL_RCC_OscConfig+0x70>
 8002a4a:	4a80      	ldr	r2, [pc, #512]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002a4c:	4b7f      	ldr	r3, [pc, #508]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e02e      	b.n	8002ab6 <HAL_RCC_OscConfig+0xce>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10c      	bne.n	8002a7a <HAL_RCC_OscConfig+0x92>
 8002a60:	4a7a      	ldr	r2, [pc, #488]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002a62:	4b7a      	ldr	r3, [pc, #488]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4a77      	ldr	r2, [pc, #476]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002a6e:	4b77      	ldr	r3, [pc, #476]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	e01d      	b.n	8002ab6 <HAL_RCC_OscConfig+0xce>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a82:	d10c      	bne.n	8002a9e <HAL_RCC_OscConfig+0xb6>
 8002a84:	4a71      	ldr	r2, [pc, #452]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002a86:	4b71      	ldr	r3, [pc, #452]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4a6e      	ldr	r2, [pc, #440]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002a92:	4b6e      	ldr	r3, [pc, #440]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	e00b      	b.n	8002ab6 <HAL_RCC_OscConfig+0xce>
 8002a9e:	4a6b      	ldr	r2, [pc, #428]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002aa0:	4b6a      	ldr	r3, [pc, #424]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4a68      	ldr	r2, [pc, #416]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002aac:	4b67      	ldr	r3, [pc, #412]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d013      	beq.n	8002ae6 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7fe fad3 	bl	8001068 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac6:	f7fe facf 	bl	8001068 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b64      	cmp	r3, #100	; 0x64
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e1e1      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad8:	4b5c      	ldr	r3, [pc, #368]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0xde>
 8002ae4:	e014      	b.n	8002b10 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fabf 	bl	8001068 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aee:	f7fe fabb 	bl	8001068 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b64      	cmp	r3, #100	; 0x64
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e1cd      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b00:	4b52      	ldr	r3, [pc, #328]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f0      	bne.n	8002aee <HAL_RCC_OscConfig+0x106>
 8002b0c:	e000      	b.n	8002b10 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d063      	beq.n	8002be4 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b1c:	4b4b      	ldr	r3, [pc, #300]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00b      	beq.n	8002b40 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b28:	4b48      	ldr	r3, [pc, #288]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d11c      	bne.n	8002b6e <HAL_RCC_OscConfig+0x186>
 8002b34:	4b45      	ldr	r3, [pc, #276]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d116      	bne.n	8002b6e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b40:	4b42      	ldr	r3, [pc, #264]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_OscConfig+0x170>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e1a1      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b58:	493c      	ldr	r1, [pc, #240]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002b5a:	4b3c      	ldr	r3, [pc, #240]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6c:	e03a      	b.n	8002be4 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d020      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b76:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <HAL_RCC_OscConfig+0x268>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fa74 	bl	8001068 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b84:	f7fe fa70 	bl	8001068 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e182      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b96:	4b2d      	ldr	r3, [pc, #180]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	492a      	ldr	r1, [pc, #168]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002ba4:	4b29      	ldr	r3, [pc, #164]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
 8002bb6:	e015      	b.n	8002be4 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb8:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <HAL_RCC_OscConfig+0x268>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7fe fa53 	bl	8001068 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc6:	f7fe fa4f 	bl	8001068 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e161      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd8:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f0      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d039      	beq.n	8002c64 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d019      	beq.n	8002c2c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf8:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfe:	f7fe fa33 	bl	8001068 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c06:	f7fe fa2f 	bl	8001068 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e141      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <HAL_RCC_OscConfig+0x264>)
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002c24:	2001      	movs	r0, #1
 8002c26:	f000 facf 	bl	80031c8 <RCC_Delay>
 8002c2a:	e01b      	b.n	8002c64 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c32:	f7fe fa19 	bl	8001068 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c38:	e00e      	b.n	8002c58 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c3a:	f7fe fa15 	bl	8001068 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d907      	bls.n	8002c58 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e127      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b4>
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	42420000 	.word	0x42420000
 8002c54:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c58:	4b92      	ldr	r3, [pc, #584]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ea      	bne.n	8002c3a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80a6 	beq.w	8002dbe <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c72:	2300      	movs	r3, #0
 8002c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c76:	4b8b      	ldr	r3, [pc, #556]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10d      	bne.n	8002c9e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	4a88      	ldr	r2, [pc, #544]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002c84:	4b87      	ldr	r3, [pc, #540]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	61d3      	str	r3, [r2, #28]
 8002c8e:	4b85      	ldr	r3, [pc, #532]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9e:	4b82      	ldr	r3, [pc, #520]	; (8002ea8 <HAL_RCC_OscConfig+0x4c0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d118      	bne.n	8002cdc <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002caa:	4a7f      	ldr	r2, [pc, #508]	; (8002ea8 <HAL_RCC_OscConfig+0x4c0>)
 8002cac:	4b7e      	ldr	r3, [pc, #504]	; (8002ea8 <HAL_RCC_OscConfig+0x4c0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb6:	f7fe f9d7 	bl	8001068 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbe:	f7fe f9d3 	bl	8001068 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b64      	cmp	r3, #100	; 0x64
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e0e5      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd0:	4b75      	ldr	r3, [pc, #468]	; (8002ea8 <HAL_RCC_OscConfig+0x4c0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x30a>
 8002ce4:	4a6f      	ldr	r2, [pc, #444]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002ce6:	4b6f      	ldr	r3, [pc, #444]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6213      	str	r3, [r2, #32]
 8002cf0:	e02d      	b.n	8002d4e <HAL_RCC_OscConfig+0x366>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x32c>
 8002cfa:	4a6a      	ldr	r2, [pc, #424]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002cfc:	4b69      	ldr	r3, [pc, #420]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	6213      	str	r3, [r2, #32]
 8002d06:	4a67      	ldr	r2, [pc, #412]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002d08:	4b66      	ldr	r3, [pc, #408]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f023 0304 	bic.w	r3, r3, #4
 8002d10:	6213      	str	r3, [r2, #32]
 8002d12:	e01c      	b.n	8002d4e <HAL_RCC_OscConfig+0x366>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d10c      	bne.n	8002d36 <HAL_RCC_OscConfig+0x34e>
 8002d1c:	4a61      	ldr	r2, [pc, #388]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002d1e:	4b61      	ldr	r3, [pc, #388]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	f043 0304 	orr.w	r3, r3, #4
 8002d26:	6213      	str	r3, [r2, #32]
 8002d28:	4a5e      	ldr	r2, [pc, #376]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002d2a:	4b5e      	ldr	r3, [pc, #376]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6213      	str	r3, [r2, #32]
 8002d34:	e00b      	b.n	8002d4e <HAL_RCC_OscConfig+0x366>
 8002d36:	4a5b      	ldr	r2, [pc, #364]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002d38:	4b5a      	ldr	r3, [pc, #360]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	6213      	str	r3, [r2, #32]
 8002d42:	4a58      	ldr	r2, [pc, #352]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002d44:	4b57      	ldr	r3, [pc, #348]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f023 0304 	bic.w	r3, r3, #4
 8002d4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d015      	beq.n	8002d82 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d56:	f7fe f987 	bl	8001068 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7fe f983 	bl	8001068 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e093      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d74:	4b4b      	ldr	r3, [pc, #300]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ee      	beq.n	8002d5e <HAL_RCC_OscConfig+0x376>
 8002d80:	e014      	b.n	8002dac <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d82:	f7fe f971 	bl	8001068 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7fe f96d 	bl	8001068 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e07d      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da0:	4b40      	ldr	r3, [pc, #256]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1ee      	bne.n	8002d8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d105      	bne.n	8002dbe <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db2:	4a3c      	ldr	r2, [pc, #240]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002db4:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d069      	beq.n	8002e9a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc6:	4b37      	ldr	r3, [pc, #220]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d061      	beq.n	8002e96 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d146      	bne.n	8002e68 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dda:	4b34      	ldr	r3, [pc, #208]	; (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe f942 	bl	8001068 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe f93e 	bl	8001068 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e050      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e0e:	d108      	bne.n	8002e22 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e10:	4924      	ldr	r1, [pc, #144]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e22:	4820      	ldr	r0, [pc, #128]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002e24:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a19      	ldr	r1, [r3, #32]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	430b      	orrs	r3, r1
 8002e36:	4313      	orrs	r3, r2
 8002e38:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e3a:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fe f912 	bl	8001068 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe f90e 	bl	8001068 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e020      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x460>
 8002e66:	e018      	b.n	8002e9a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b10      	ldr	r3, [pc, #64]	; (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe f8fb 	bl	8001068 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe f8f7 	bl	8001068 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e009      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_RCC_OscConfig+0x4bc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x48e>
 8002e94:	e001      	b.n	8002e9a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40007000 	.word	0x40007000
 8002eac:	42420060 	.word	0x42420060

08002eb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ebe:	4b7e      	ldr	r3, [pc, #504]	; (80030b8 <HAL_RCC_ClockConfig+0x208>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0207 	and.w	r2, r3, #7
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d210      	bcs.n	8002eee <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ecc:	497a      	ldr	r1, [pc, #488]	; (80030b8 <HAL_RCC_ClockConfig+0x208>)
 8002ece:	4b7a      	ldr	r3, [pc, #488]	; (80030b8 <HAL_RCC_ClockConfig+0x208>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 0207 	bic.w	r2, r3, #7
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002edc:	4b76      	ldr	r3, [pc, #472]	; (80030b8 <HAL_RCC_ClockConfig+0x208>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0207 	and.w	r2, r3, #7
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d001      	beq.n	8002eee <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0e0      	b.n	80030b0 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d020      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d005      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f06:	4a6d      	ldr	r2, [pc, #436]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 8002f08:	4b6c      	ldr	r3, [pc, #432]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f10:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d005      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f1e:	4a67      	ldr	r2, [pc, #412]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 8002f20:	4b66      	ldr	r3, [pc, #408]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f28:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2a:	4964      	ldr	r1, [pc, #400]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 8002f2c:	4b63      	ldr	r3, [pc, #396]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d06a      	beq.n	800301e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d107      	bne.n	8002f60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f50:	4b5a      	ldr	r3, [pc, #360]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d115      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0a7      	b.n	80030b0 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d107      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f68:	4b54      	ldr	r3, [pc, #336]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d109      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e09b      	b.n	80030b0 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f78:	4b50      	ldr	r3, [pc, #320]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e093      	b.n	80030b0 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f88:	494c      	ldr	r1, [pc, #304]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 8002f8a:	4b4c      	ldr	r3, [pc, #304]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f023 0203 	bic.w	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f9a:	f7fe f865 	bl	8001068 <HAL_GetTick>
 8002f9e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d112      	bne.n	8002fce <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002faa:	f7fe f85d 	bl	8001068 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e077      	b.n	80030b0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fc0:	4b3e      	ldr	r3, [pc, #248]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d1ee      	bne.n	8002faa <HAL_RCC_ClockConfig+0xfa>
 8002fcc:	e027      	b.n	800301e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d11d      	bne.n	8003012 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd8:	f7fe f846 	bl	8001068 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e060      	b.n	80030b0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fee:	4b33      	ldr	r3, [pc, #204]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d1ee      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x128>
 8002ffa:	e010      	b.n	800301e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffc:	f7fe f834 	bl	8001068 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	; 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e04e      	b.n	80030b0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003012:	4b2a      	ldr	r3, [pc, #168]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1ee      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800301e:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <HAL_RCC_ClockConfig+0x208>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0207 	and.w	r2, r3, #7
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d910      	bls.n	800304e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302c:	4922      	ldr	r1, [pc, #136]	; (80030b8 <HAL_RCC_ClockConfig+0x208>)
 800302e:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_RCC_ClockConfig+0x208>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 0207 	bic.w	r2, r3, #7
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	4313      	orrs	r3, r2
 800303a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <HAL_RCC_ClockConfig+0x208>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0207 	and.w	r2, r3, #7
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d001      	beq.n	800304e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e030      	b.n	80030b0 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800305a:	4918      	ldr	r1, [pc, #96]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 800305c:	4b17      	ldr	r3, [pc, #92]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d009      	beq.n	800308c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003078:	4910      	ldr	r1, [pc, #64]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800308c:	f000 f81c 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8003090:	4601      	mov	r1, r0
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <HAL_RCC_ClockConfig+0x20c>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	4a08      	ldr	r2, [pc, #32]	; (80030c0 <HAL_RCC_ClockConfig+0x210>)
 800309e:	5cd3      	ldrb	r3, [r2, r3]
 80030a0:	fa21 f303 	lsr.w	r3, r1, r3
 80030a4:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <HAL_RCC_ClockConfig+0x214>)
 80030a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80030a8:	2000      	movs	r0, #0
 80030aa:	f7fd ff9b 	bl	8000fe4 <HAL_InitTick>
  
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40022000 	.word	0x40022000
 80030bc:	40021000 	.word	0x40021000
 80030c0:	0800800c 	.word	0x0800800c
 80030c4:	20000014 	.word	0x20000014

080030c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c8:	b490      	push	{r4, r7}
 80030ca:	b08a      	sub	sp, #40	; 0x28
 80030cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030ce:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030d0:	1d3c      	adds	r4, r7, #4
 80030d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030d8:	4b28      	ldr	r3, [pc, #160]	; (800317c <HAL_RCC_GetSysClockFreq+0xb4>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	2300      	movs	r3, #0
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030f2:	4b23      	ldr	r3, [pc, #140]	; (8003180 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d002      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x40>
 8003102:	2b08      	cmp	r3, #8
 8003104:	d003      	beq.n	800310e <HAL_RCC_GetSysClockFreq+0x46>
 8003106:	e02d      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003108:	4b1e      	ldr	r3, [pc, #120]	; (8003184 <HAL_RCC_GetSysClockFreq+0xbc>)
 800310a:	623b      	str	r3, [r7, #32]
      break;
 800310c:	e02d      	b.n	800316a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	0c9b      	lsrs	r3, r3, #18
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800311a:	4413      	add	r3, r2
 800311c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003120:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d013      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800312c:	4b14      	ldr	r3, [pc, #80]	; (8003180 <HAL_RCC_GetSysClockFreq+0xb8>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0c5b      	lsrs	r3, r3, #17
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800313a:	4413      	add	r3, r2
 800313c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003140:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003146:	fb02 f203 	mul.w	r2, r2, r3
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
 8003152:	e004      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	4a0c      	ldr	r2, [pc, #48]	; (8003188 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003158:	fb02 f303 	mul.w	r3, r2, r3
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	623b      	str	r3, [r7, #32]
      break;
 8003162:	e002      	b.n	800316a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003164:	4b07      	ldr	r3, [pc, #28]	; (8003184 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003166:	623b      	str	r3, [r7, #32]
      break;
 8003168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316a:	6a3b      	ldr	r3, [r7, #32]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3728      	adds	r7, #40	; 0x28
 8003170:	46bd      	mov	sp, r7
 8003172:	bc90      	pop	{r4, r7}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	080075f8 	.word	0x080075f8
 800317c:	08007608 	.word	0x08007608
 8003180:	40021000 	.word	0x40021000
 8003184:	007a1200 	.word	0x007a1200
 8003188:	003d0900 	.word	0x003d0900

0800318c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003190:	4b02      	ldr	r3, [pc, #8]	; (800319c <HAL_RCC_GetHCLKFreq+0x10>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	20000014 	.word	0x20000014

080031a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031a4:	f7ff fff2 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031a8:	4601      	mov	r1, r0
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4a03      	ldr	r2, [pc, #12]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	0800801c 	.word	0x0800801c

080031c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <RCC_Delay+0x34>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <RCC_Delay+0x38>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	0a5b      	lsrs	r3, r3, #9
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80031e4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1e5a      	subs	r2, r3, #1
 80031ea:	60fa      	str	r2, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f9      	bne.n	80031e4 <RCC_Delay+0x1c>
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000014 	.word	0x20000014
 8003200:	10624dd3 	.word	0x10624dd3

08003204 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e01d      	b.n	8003252 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f002 fe22 	bl	8005e74 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3304      	adds	r3, #4
 8003240:	4619      	mov	r1, r3
 8003242:	4610      	mov	r0, r2
 8003244:	f000 fb56 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	68d2      	ldr	r2, [r2, #12]
 800326c:	f042 0201 	orr.w	r2, r2, #1
 8003270:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	f042 0201 	orr.w	r2, r2, #1
 8003280:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr

0800328e <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e01d      	b.n	80032dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f815 	bl	80032e4 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2202      	movs	r2, #2
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3304      	adds	r3, #4
 80032ca:	4619      	mov	r1, r3
 80032cc:	4610      	mov	r0, r2
 80032ce:	f000 fb11 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2201      	movs	r2, #1
 8003308:	6839      	ldr	r1, [r7, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fd9d 	bl	8003e4a <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a0b      	ldr	r2, [pc, #44]	; (8003344 <HAL_TIM_PWM_Start+0x4c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d107      	bne.n	800332a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003324:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003328:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40012c00 	.word	0x40012c00

08003348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b02      	cmp	r3, #2
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b02      	cmp	r3, #2
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0202 	mvn.w	r2, #2
 8003374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fa97 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fa8a 	bl	80038ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fa99 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d122      	bne.n	80033f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d11b      	bne.n	80033f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0204 	mvn.w	r2, #4
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa6d 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa60 	bl	80038ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fa6f 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b08      	cmp	r3, #8
 8003404:	d122      	bne.n	800344c <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b08      	cmp	r3, #8
 8003412:	d11b      	bne.n	800344c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0208 	mvn.w	r2, #8
 800341c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2204      	movs	r2, #4
 8003422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fa43 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fa36 	bl	80038ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fa45 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b10      	cmp	r3, #16
 8003458:	d122      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b10      	cmp	r3, #16
 8003466:	d11b      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0210 	mvn.w	r2, #16
 8003470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2208      	movs	r2, #8
 8003476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fa19 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 800348c:	e005      	b.n	800349a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fa0c 	bl	80038ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fa1b 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d10e      	bne.n	80034cc <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d107      	bne.n	80034cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0201 	mvn.w	r2, #1
 80034c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f9e7 	bl	800389a <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b80      	cmp	r3, #128	; 0x80
 80034d8:	d10e      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e4:	2b80      	cmp	r3, #128	; 0x80
 80034e6:	d107      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fd18 	bl	8003f28 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003502:	2b40      	cmp	r3, #64	; 0x40
 8003504:	d10e      	bne.n	8003524 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003510:	2b40      	cmp	r3, #64	; 0x40
 8003512:	d107      	bne.n	8003524 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800351c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f9df 	bl	80038e2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b20      	cmp	r3, #32
 8003530:	d10e      	bne.n	8003550 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b20      	cmp	r3, #32
 800353e:	d107      	bne.n	8003550 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0220 	mvn.w	r2, #32
 8003548:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fce3 	bl	8003f16 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800356e:	2302      	movs	r3, #2
 8003570:	e0b4      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x184>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b0c      	cmp	r3, #12
 8003586:	f200 809f 	bhi.w	80036c8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800358a:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035c5 	.word	0x080035c5
 8003594:	080036c9 	.word	0x080036c9
 8003598:	080036c9 	.word	0x080036c9
 800359c:	080036c9 	.word	0x080036c9
 80035a0:	08003605 	.word	0x08003605
 80035a4:	080036c9 	.word	0x080036c9
 80035a8:	080036c9 	.word	0x080036c9
 80035ac:	080036c9 	.word	0x080036c9
 80035b0:	08003647 	.word	0x08003647
 80035b4:	080036c9 	.word	0x080036c9
 80035b8:	080036c9 	.word	0x080036c9
 80035bc:	080036c9 	.word	0x080036c9
 80035c0:	08003687 	.word	0x08003687
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 f9f8 	bl	80039c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	6992      	ldr	r2, [r2, #24]
 80035da:	f042 0208 	orr.w	r2, r2, #8
 80035de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	6992      	ldr	r2, [r2, #24]
 80035ea:	f022 0204 	bic.w	r2, r2, #4
 80035ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	6991      	ldr	r1, [r2, #24]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	6912      	ldr	r2, [r2, #16]
 80035fe:	430a      	orrs	r2, r1
 8003600:	619a      	str	r2, [r3, #24]
    }
    break;
 8003602:	e062      	b.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fa44 	bl	8003a98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	6992      	ldr	r2, [r2, #24]
 800361a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800361e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	6992      	ldr	r2, [r2, #24]
 800362a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	6991      	ldr	r1, [r2, #24]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	6912      	ldr	r2, [r2, #16]
 800363e:	0212      	lsls	r2, r2, #8
 8003640:	430a      	orrs	r2, r1
 8003642:	619a      	str	r2, [r3, #24]
    }
    break;
 8003644:	e041      	b.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fa93 	bl	8003b78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	69d2      	ldr	r2, [r2, #28]
 800365c:	f042 0208 	orr.w	r2, r2, #8
 8003660:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	69d2      	ldr	r2, [r2, #28]
 800366c:	f022 0204 	bic.w	r2, r2, #4
 8003670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	69d1      	ldr	r1, [r2, #28]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	6912      	ldr	r2, [r2, #16]
 8003680:	430a      	orrs	r2, r1
 8003682:	61da      	str	r2, [r3, #28]
    }
    break;
 8003684:	e021      	b.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fae3 	bl	8003c58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	6812      	ldr	r2, [r2, #0]
 800369a:	69d2      	ldr	r2, [r2, #28]
 800369c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a0:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	69d2      	ldr	r2, [r2, #28]
 80036ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	69d1      	ldr	r1, [r2, #28]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	6912      	ldr	r2, [r2, #16]
 80036c0:	0212      	lsls	r2, r2, #8
 80036c2:	430a      	orrs	r2, r1
 80036c4:	61da      	str	r2, [r3, #28]
    }
    break;
 80036c6:	e000      	b.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 80036c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_TIM_ConfigClockSource+0x1c>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e0c8      	b.n	8003892 <HAL_TIM_ConfigClockSource+0x1ae>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800371e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003726:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b40      	cmp	r3, #64	; 0x40
 8003736:	d077      	beq.n	8003828 <HAL_TIM_ConfigClockSource+0x144>
 8003738:	2b40      	cmp	r3, #64	; 0x40
 800373a:	d80e      	bhi.n	800375a <HAL_TIM_ConfigClockSource+0x76>
 800373c:	2b10      	cmp	r3, #16
 800373e:	f000 808a 	beq.w	8003856 <HAL_TIM_ConfigClockSource+0x172>
 8003742:	2b10      	cmp	r3, #16
 8003744:	d802      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x68>
 8003746:	2b00      	cmp	r3, #0
 8003748:	d07e      	beq.n	8003848 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800374a:	e099      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800374c:	2b20      	cmp	r3, #32
 800374e:	f000 8089 	beq.w	8003864 <HAL_TIM_ConfigClockSource+0x180>
 8003752:	2b30      	cmp	r3, #48	; 0x30
 8003754:	f000 808d 	beq.w	8003872 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8003758:	e092      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800375a:	2b70      	cmp	r3, #112	; 0x70
 800375c:	d016      	beq.n	800378c <HAL_TIM_ConfigClockSource+0xa8>
 800375e:	2b70      	cmp	r3, #112	; 0x70
 8003760:	d804      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x88>
 8003762:	2b50      	cmp	r3, #80	; 0x50
 8003764:	d040      	beq.n	80037e8 <HAL_TIM_ConfigClockSource+0x104>
 8003766:	2b60      	cmp	r3, #96	; 0x60
 8003768:	d04e      	beq.n	8003808 <HAL_TIM_ConfigClockSource+0x124>
    break;
 800376a:	e089      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800376c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003770:	d003      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x96>
 8003772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003776:	d024      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0xde>
    break;
 8003778:	e082      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	6892      	ldr	r2, [r2, #8]
 8003784:	f022 0207 	bic.w	r2, r2, #7
 8003788:	609a      	str	r2, [r3, #8]
    break;
 800378a:	e079      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6818      	ldr	r0, [r3, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	6899      	ldr	r1, [r3, #8]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f000 fb34 	bl	8003e08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	609a      	str	r2, [r3, #8]
    break;
 80037c0:	e05e      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6899      	ldr	r1, [r3, #8]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f000 fb19 	bl	8003e08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	6892      	ldr	r2, [r2, #8]
 80037e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037e4:	609a      	str	r2, [r3, #8]
    break;
 80037e6:	e04b      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	461a      	mov	r2, r3
 80037f6:	f000 fa83 	bl	8003d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2150      	movs	r1, #80	; 0x50
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fae2 	bl	8003dca <TIM_ITRx_SetConfig>
    break;
 8003806:	e03b      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	461a      	mov	r2, r3
 8003816:	f000 faa5 	bl	8003d64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2160      	movs	r1, #96	; 0x60
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fad2 	bl	8003dca <TIM_ITRx_SetConfig>
    break;
 8003826:	e02b      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	461a      	mov	r2, r3
 8003836:	f000 fa63 	bl	8003d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2140      	movs	r1, #64	; 0x40
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fac2 	bl	8003dca <TIM_ITRx_SetConfig>
    break;
 8003846:	e01b      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2100      	movs	r1, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fabb 	bl	8003dca <TIM_ITRx_SetConfig>
    break;
 8003854:	e014      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2110      	movs	r1, #16
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fab4 	bl	8003dca <TIM_ITRx_SetConfig>
    break;
 8003862:	e00d      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2120      	movs	r1, #32
 800386a:	4618      	mov	r0, r3
 800386c:	f000 faad 	bl	8003dca <TIM_ITRx_SetConfig>
    break;
 8003870:	e006      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2130      	movs	r1, #48	; 0x30
 8003878:	4618      	mov	r0, r3
 800387a:	f000 faa6 	bl	8003dca <TIM_ITRx_SetConfig>
    break;
 800387e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr

080038be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a2a      	ldr	r2, [pc, #168]	; (80039b4 <TIM_Base_SetConfig+0xc0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00b      	beq.n	8003928 <TIM_Base_SetConfig+0x34>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003916:	d007      	beq.n	8003928 <TIM_Base_SetConfig+0x34>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a27      	ldr	r2, [pc, #156]	; (80039b8 <TIM_Base_SetConfig+0xc4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_Base_SetConfig+0x34>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a26      	ldr	r2, [pc, #152]	; (80039bc <TIM_Base_SetConfig+0xc8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d108      	bne.n	800393a <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <TIM_Base_SetConfig+0xc0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00b      	beq.n	800395a <TIM_Base_SetConfig+0x66>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d007      	beq.n	800395a <TIM_Base_SetConfig+0x66>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a1a      	ldr	r2, [pc, #104]	; (80039b8 <TIM_Base_SetConfig+0xc4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d003      	beq.n	800395a <TIM_Base_SetConfig+0x66>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a19      	ldr	r2, [pc, #100]	; (80039bc <TIM_Base_SetConfig+0xc8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d108      	bne.n	800396c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003972:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a07      	ldr	r2, [pc, #28]	; (80039b4 <TIM_Base_SetConfig+0xc0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d103      	bne.n	80039a4 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	615a      	str	r2, [r3, #20]
}
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr
 80039b4:	40012c00 	.word	0x40012c00
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000800 	.word	0x40000800

080039c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f023 0201 	bic.w	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0303 	bic.w	r3, r3, #3
 8003a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f023 0302 	bic.w	r3, r3, #2
 8003a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a1c      	ldr	r2, [pc, #112]	; (8003a94 <TIM_OC1_SetConfig+0xd4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d10c      	bne.n	8003a42 <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f023 0308 	bic.w	r3, r3, #8
 8003a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f023 0304 	bic.w	r3, r3, #4
 8003a40:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a13      	ldr	r2, [pc, #76]	; (8003a94 <TIM_OC1_SetConfig+0xd4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d111      	bne.n	8003a6e <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	621a      	str	r2, [r3, #32]
}
 8003a88:	bf00      	nop
 8003a8a:	371c      	adds	r7, #28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40012c00 	.word	0x40012c00

08003a98 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	f023 0210 	bic.w	r2, r3, #16
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f023 0320 	bic.w	r3, r3, #32
 8003aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <TIM_OC2_SetConfig+0xdc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d10d      	bne.n	8003b20 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1e:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <TIM_OC2_SetConfig+0xdc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d113      	bne.n	8003b50 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	621a      	str	r2, [r3, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	40012c00 	.word	0x40012c00

08003b78 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0303 	bic.w	r3, r3, #3
 8003bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a1d      	ldr	r2, [pc, #116]	; (8003c54 <TIM_OC3_SetConfig+0xdc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d10d      	bne.n	8003bfe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bfc:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a14      	ldr	r2, [pc, #80]	; (8003c54 <TIM_OC3_SetConfig+0xdc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d113      	bne.n	8003c2e <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	621a      	str	r2, [r3, #32]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40012c00 	.word	0x40012c00

08003c58 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c92:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9a:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cae:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	031b      	lsls	r3, r3, #12
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a0f      	ldr	r2, [pc, #60]	; (8003cfc <TIM_OC4_SetConfig+0xa4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d109      	bne.n	8003cd8 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	019b      	lsls	r3, r3, #6
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	621a      	str	r2, [r3, #32]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr
 8003cfc:	40012c00 	.word	0x40012c00

08003d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	f023 0201 	bic.w	r2, r3, #1
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f023 030a 	bic.w	r3, r3, #10
 8003d44:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	621a      	str	r2, [r3, #32]
}
 8003d5a:	bf00      	nop
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f023 0210 	bic.w	r2, r3, #16
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	031b      	lsls	r3, r3, #12
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003da8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	621a      	str	r2, [r3, #32]
}
 8003dc0:	bf00      	nop
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr

08003dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003de8:	887b      	ldrh	r3, [r7, #2]
 8003dea:	f043 0307 	orr.w	r3, r3, #7
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	609a      	str	r2, [r3, #8]
}
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	021a      	lsls	r2, r3, #8
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	609a      	str	r2, [r3, #8]
}
 8003e40:	bf00      	nop
 8003e42:	371c      	adds	r7, #28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr

08003e4a <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b087      	sub	sp, #28
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a1a      	ldr	r2, [r3, #32]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	401a      	ands	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1a      	ldr	r2, [r3, #32]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	621a      	str	r2, [r3, #32]
}
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e032      	b.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	6852      	ldr	r2, [r2, #4]
 8003ec0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ec4:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6812      	ldr	r2, [r2, #0]
 8003ece:	6851      	ldr	r1, [r2, #4]
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	6892      	ldr	r2, [r2, #8]
 8003ee2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ee6:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	6891      	ldr	r1, [r2, #8]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	6852      	ldr	r2, [r2, #4]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr

08003f16 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr
	...

08003f3c <Accel_ini>:
extern int16_t xdata, ydata, zdata;
extern int16_t xGyro, yGyro, zGyro;
extern int16_t YG, XG, ZG;
 extern int16_t YGf, XGf, ZGf;
void Accel_ini()
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af04      	add	r7, sp, #16
	uint8_t data[1] =  {0};
 8003f42:	2300      	movs	r3, #0
 8003f44:	713b      	strb	r3, [r7, #4]

	//reset the whole module first
	data[0] =  1<<7;
 8003f46:	2380      	movs	r3, #128	; 0x80
 8003f48:	713b      	strb	r3, [r7, #4]
	status = HAL_I2C_Mem_Write(&hi2c1, (uint16_t)adress, (uint16_t)0x6B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 8003f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f4e:	9302      	str	r3, [sp, #8]
 8003f50:	2301      	movs	r3, #1
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	1d3b      	adds	r3, r7, #4
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	2301      	movs	r3, #1
 8003f5a:	226b      	movs	r2, #107	; 0x6b
 8003f5c:	21d0      	movs	r1, #208	; 0xd0
 8003f5e:	4823      	ldr	r0, [pc, #140]	; (8003fec <Accel_ini+0xb0>)
 8003f60:	f7fd fd26 	bl	80019b0 <HAL_I2C_Mem_Write>
 8003f64:	4603      	mov	r3, r0
 8003f66:	461a      	mov	r2, r3
 8003f68:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <Accel_ini+0xb4>)
 8003f6a:	701a      	strb	r2, [r3, #0]


	HAL_Delay(50);    //wait for 50ms for the gyro to stable
 8003f6c:	2032      	movs	r0, #50	; 0x32
 8003f6e:	f7fd f885 	bl	800107c <HAL_Delay>
	data[0] = 0x00;
 8003f72:	2300      	movs	r3, #0
 8003f74:	713b      	strb	r3, [r7, #4]
	status = HAL_I2C_Mem_Write(&hi2c1, adress, 0x6B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 8003f76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f7a:	9302      	str	r3, [sp, #8]
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	9301      	str	r3, [sp, #4]
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	2301      	movs	r3, #1
 8003f86:	226b      	movs	r2, #107	; 0x6b
 8003f88:	21d0      	movs	r1, #208	; 0xd0
 8003f8a:	4818      	ldr	r0, [pc, #96]	; (8003fec <Accel_ini+0xb0>)
 8003f8c:	f7fd fd10 	bl	80019b0 <HAL_I2C_Mem_Write>
 8003f90:	4603      	mov	r3, r0
 8003f92:	461a      	mov	r2, r3
 8003f94:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <Accel_ini+0xb4>)
 8003f96:	701a      	strb	r2, [r3, #0]
	//GYRO_CONFIG: FSR 500
	data[0] = 0x08;
 8003f98:	2308      	movs	r3, #8
 8003f9a:	713b      	strb	r3, [r7, #4]
		status = HAL_I2C_Mem_Write(&hi2c1, adress, 0x1B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 8003f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fa0:	9302      	str	r3, [sp, #8]
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	2301      	movs	r3, #1
 8003fac:	221b      	movs	r2, #27
 8003fae:	21d0      	movs	r1, #208	; 0xd0
 8003fb0:	480e      	ldr	r0, [pc, #56]	; (8003fec <Accel_ini+0xb0>)
 8003fb2:	f7fd fcfd 	bl	80019b0 <HAL_I2C_Mem_Write>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <Accel_ini+0xb4>)
 8003fbc:	701a      	strb	r2, [r3, #0]
	//ACCEL_CONFIG: 2g
		data[0] = 0x0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	713b      	strb	r3, [r7, #4]
		status =  HAL_I2C_Mem_Write(&hi2c1, adress, 0x1C, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 8003fc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fc6:	9302      	str	r3, [sp, #8]
 8003fc8:	2301      	movs	r3, #1
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	1d3b      	adds	r3, r7, #4
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	221c      	movs	r2, #28
 8003fd4:	21d0      	movs	r1, #208	; 0xd0
 8003fd6:	4805      	ldr	r0, [pc, #20]	; (8003fec <Accel_ini+0xb0>)
 8003fd8:	f7fd fcea 	bl	80019b0 <HAL_I2C_Mem_Write>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <Accel_ini+0xb4>)
 8003fe2:	701a      	strb	r2, [r3, #0]
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	2000050c 	.word	0x2000050c
 8003ff0:	2000061a 	.word	0x2000061a

08003ff4 <Accel_GetXYZ>:

void Accel_GetXYZ(int16_t* pData1)

{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af04      	add	r7, sp, #16
 8003ffa:	6078      	str	r0, [r7, #4]
 uint8_t buffer1[6] = {0};
 8003ffc:	f107 0308 	add.w	r3, r7, #8
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	809a      	strh	r2, [r3, #4]
  /* Read output register X, Y & Z acceleration */
status = HAL_I2C_Mem_Read(&hi2c1, adress, 0x3B, I2C_MEMADD_SIZE_8BIT, buffer1, (uint16_t)0x06, 0x10000);
 8004006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800400a:	9302      	str	r3, [sp, #8]
 800400c:	2306      	movs	r3, #6
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	f107 0308 	add.w	r3, r7, #8
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	2301      	movs	r3, #1
 8004018:	223b      	movs	r2, #59	; 0x3b
 800401a:	21d0      	movs	r1, #208	; 0xd0
 800401c:	4817      	ldr	r0, [pc, #92]	; (800407c <Accel_GetXYZ+0x88>)
 800401e:	f7fd fdd1 	bl	8001bc4 <HAL_I2C_Mem_Read>
 8004022:	4603      	mov	r3, r0
 8004024:	461a      	mov	r2, r3
 8004026:	4b16      	ldr	r3, [pc, #88]	; (8004080 <Accel_GetXYZ+0x8c>)
 8004028:	701a      	strb	r2, [r3, #0]

for(uint8_t i=0; i<3; i++)
 800402a:	2300      	movs	r3, #0
 800402c:	73fb      	strb	r3, [r7, #15]
 800402e:	e01d      	b.n	800406c <Accel_GetXYZ+0x78>
    {
      pData1[i]=(int16_t)(((uint16_t)buffer1[2*i] << 8) + buffer1[2*i+1]);
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4413      	add	r3, r2
 8004038:	7bfa      	ldrb	r2, [r7, #15]
 800403a:	0052      	lsls	r2, r2, #1
 800403c:	f107 0110 	add.w	r1, r7, #16
 8004040:	440a      	add	r2, r1
 8004042:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8004046:	b292      	uxth	r2, r2
 8004048:	0212      	lsls	r2, r2, #8
 800404a:	b291      	uxth	r1, r2
 800404c:	7bfa      	ldrb	r2, [r7, #15]
 800404e:	0052      	lsls	r2, r2, #1
 8004050:	3201      	adds	r2, #1
 8004052:	f107 0010 	add.w	r0, r7, #16
 8004056:	4402      	add	r2, r0
 8004058:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800405c:	b292      	uxth	r2, r2
 800405e:	440a      	add	r2, r1
 8004060:	b292      	uxth	r2, r2
 8004062:	b212      	sxth	r2, r2
 8004064:	801a      	strh	r2, [r3, #0]
for(uint8_t i=0; i<3; i++)
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	3301      	adds	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d9de      	bls.n	8004030 <Accel_GetXYZ+0x3c>
    }
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	2000050c 	.word	0x2000050c
 8004080:	2000061a 	.word	0x2000061a

08004084 <Gyro_GetXYZ>:

void Gyro_GetXYZ(int16_t* pData2)

{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af04      	add	r7, sp, #16
 800408a:	6078      	str	r0, [r7, #4]
 uint8_t buffer2[6] = {0};
 800408c:	f107 0308 	add.w	r3, r7, #8
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	809a      	strh	r2, [r3, #4]
  /* Read output register X, Y & Z gyroscope */
status = HAL_I2C_Mem_Read(&hi2c1, adress, 0x43, I2C_MEMADD_SIZE_8BIT, buffer2, (uint16_t)0x06, 0x10000);
 8004096:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800409a:	9302      	str	r3, [sp, #8]
 800409c:	2306      	movs	r3, #6
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	f107 0308 	add.w	r3, r7, #8
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	2301      	movs	r3, #1
 80040a8:	2243      	movs	r2, #67	; 0x43
 80040aa:	21d0      	movs	r1, #208	; 0xd0
 80040ac:	4817      	ldr	r0, [pc, #92]	; (800410c <Gyro_GetXYZ+0x88>)
 80040ae:	f7fd fd89 	bl	8001bc4 <HAL_I2C_Mem_Read>
 80040b2:	4603      	mov	r3, r0
 80040b4:	461a      	mov	r2, r3
 80040b6:	4b16      	ldr	r3, [pc, #88]	; (8004110 <Gyro_GetXYZ+0x8c>)
 80040b8:	701a      	strb	r2, [r3, #0]

for(uint8_t i=0; i<3; i++)
 80040ba:	2300      	movs	r3, #0
 80040bc:	73fb      	strb	r3, [r7, #15]
 80040be:	e01d      	b.n	80040fc <Gyro_GetXYZ+0x78>
    {
      pData2[i]=(int16_t)(((uint16_t)buffer2[2*i] << 8) + buffer2[2*i+1]);
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	4413      	add	r3, r2
 80040c8:	7bfa      	ldrb	r2, [r7, #15]
 80040ca:	0052      	lsls	r2, r2, #1
 80040cc:	f107 0110 	add.w	r1, r7, #16
 80040d0:	440a      	add	r2, r1
 80040d2:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80040d6:	b292      	uxth	r2, r2
 80040d8:	0212      	lsls	r2, r2, #8
 80040da:	b291      	uxth	r1, r2
 80040dc:	7bfa      	ldrb	r2, [r7, #15]
 80040de:	0052      	lsls	r2, r2, #1
 80040e0:	3201      	adds	r2, #1
 80040e2:	f107 0010 	add.w	r0, r7, #16
 80040e6:	4402      	add	r2, r0
 80040e8:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80040ec:	b292      	uxth	r2, r2
 80040ee:	440a      	add	r2, r1
 80040f0:	b292      	uxth	r2, r2
 80040f2:	b212      	sxth	r2, r2
 80040f4:	801a      	strh	r2, [r3, #0]
for(uint8_t i=0; i<3; i++)
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	3301      	adds	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d9de      	bls.n	80040c0 <Gyro_GetXYZ+0x3c>
    }

}
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	2000050c 	.word	0x2000050c
 8004110:	2000061a 	.word	0x2000061a
 8004114:	00000000 	.word	0x00000000

08004118 <Accel_ReadAcc>:
void Accel_ReadAcc(void)
{
 8004118:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	af00      	add	r7, sp, #0
int16_t buffer[3] = {0};
 8004120:	463b      	mov	r3, r7
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	809a      	strh	r2, [r3, #4]
 xval = yval = zval = 0x00;
 8004128:	4b93      	ldr	r3, [pc, #588]	; (8004378 <Accel_ReadAcc+0x260>)
 800412a:	2200      	movs	r2, #0
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	4b92      	ldr	r3, [pc, #584]	; (8004378 <Accel_ReadAcc+0x260>)
 8004130:	f993 2000 	ldrsb.w	r2, [r3]
 8004134:	4b91      	ldr	r3, [pc, #580]	; (800437c <Accel_ReadAcc+0x264>)
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	4b90      	ldr	r3, [pc, #576]	; (800437c <Accel_ReadAcc+0x264>)
 800413a:	f993 2000 	ldrsb.w	r2, [r3]
 800413e:	4b90      	ldr	r3, [pc, #576]	; (8004380 <Accel_ReadAcc+0x268>)
 8004140:	701a      	strb	r2, [r3, #0]

 Accel_GetXYZ(buffer);
 8004142:	463b      	mov	r3, r7
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff ff55 	bl	8003ff4 <Accel_GetXYZ>

 /*xval = buffer[0];
 yval = buffer[1];
 zval = buffer[2];*/
 ydata = atan2(buffer[1], sqrt(pow(buffer[0], 2) + pow(buffer[2], 2))) * R2DEG;
 800414a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800414e:	4618      	mov	r0, r3
 8004150:	f7fc f950 	bl	80003f4 <__aeabi_i2d>
 8004154:	4604      	mov	r4, r0
 8004156:	460d      	mov	r5, r1
 8004158:	f9b7 3000 	ldrsh.w	r3, [r7]
 800415c:	4618      	mov	r0, r3
 800415e:	f7fc f949 	bl	80003f4 <__aeabi_i2d>
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800416a:	f001 ff5b 	bl	8006024 <pow>
 800416e:	4680      	mov	r8, r0
 8004170:	4689      	mov	r9, r1
 8004172:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fc f93c 	bl	80003f4 <__aeabi_i2d>
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004184:	f001 ff4e 	bl	8006024 <pow>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4640      	mov	r0, r8
 800418e:	4649      	mov	r1, r9
 8004190:	f7fb ffe4 	bl	800015c <__adddf3>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	f002 f8a6 	bl	80062ec <sqrt>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4620      	mov	r0, r4
 80041a6:	4629      	mov	r1, r5
 80041a8:	f001 ff3a 	bl	8006020 <atan2>
 80041ac:	a36c      	add	r3, pc, #432	; (adr r3, 8004360 <Accel_ReadAcc+0x248>)
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	f7fc f985 	bl	80004c0 <__aeabi_dmul>
 80041b6:	4603      	mov	r3, r0
 80041b8:	460c      	mov	r4, r1
 80041ba:	4618      	mov	r0, r3
 80041bc:	4621      	mov	r1, r4
 80041be:	f7fc fc2f 	bl	8000a20 <__aeabi_d2iz>
 80041c2:	4603      	mov	r3, r0
 80041c4:	b21a      	sxth	r2, r3
 80041c6:	4b6f      	ldr	r3, [pc, #444]	; (8004384 <Accel_ReadAcc+0x26c>)
 80041c8:	801a      	strh	r2, [r3, #0]
 xdata = atan2(buffer[0], sqrt(pow(buffer[1], 2) + pow(buffer[2], 2))) * R2DEG;
 80041ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fc f910 	bl	80003f4 <__aeabi_i2d>
 80041d4:	4604      	mov	r4, r0
 80041d6:	460d      	mov	r5, r1
 80041d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fc f909 	bl	80003f4 <__aeabi_i2d>
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041ea:	f001 ff1b 	bl	8006024 <pow>
 80041ee:	4680      	mov	r8, r0
 80041f0:	4689      	mov	r9, r1
 80041f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fc f8fc 	bl	80003f4 <__aeabi_i2d>
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004204:	f001 ff0e 	bl	8006024 <pow>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4640      	mov	r0, r8
 800420e:	4649      	mov	r1, r9
 8004210:	f7fb ffa4 	bl	800015c <__adddf3>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4610      	mov	r0, r2
 800421a:	4619      	mov	r1, r3
 800421c:	f002 f866 	bl	80062ec <sqrt>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4620      	mov	r0, r4
 8004226:	4629      	mov	r1, r5
 8004228:	f001 fefa 	bl	8006020 <atan2>
 800422c:	a34c      	add	r3, pc, #304	; (adr r3, 8004360 <Accel_ReadAcc+0x248>)
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	f7fc f945 	bl	80004c0 <__aeabi_dmul>
 8004236:	4603      	mov	r3, r0
 8004238:	460c      	mov	r4, r1
 800423a:	4618      	mov	r0, r3
 800423c:	4621      	mov	r1, r4
 800423e:	f7fc fbef 	bl	8000a20 <__aeabi_d2iz>
 8004242:	4603      	mov	r3, r0
 8004244:	b21a      	sxth	r2, r3
 8004246:	4b50      	ldr	r3, [pc, #320]	; (8004388 <Accel_ReadAcc+0x270>)
 8004248:	801a      	strh	r2, [r3, #0]
 //zdata = ((int16_t)(buffer[2]/ R2DEG)) % 180;
 xtemp = XGf + xdata;
 800424a:	4b50      	ldr	r3, [pc, #320]	; (800438c <Accel_ReadAcc+0x274>)
 800424c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004250:	b29a      	uxth	r2, r3
 8004252:	4b4d      	ldr	r3, [pc, #308]	; (8004388 <Accel_ReadAcc+0x270>)
 8004254:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004258:	b29b      	uxth	r3, r3
 800425a:	4413      	add	r3, r2
 800425c:	b29b      	uxth	r3, r3
 800425e:	b21a      	sxth	r2, r3
 8004260:	4b4b      	ldr	r3, [pc, #300]	; (8004390 <Accel_ReadAcc+0x278>)
 8004262:	801a      	strh	r2, [r3, #0]
 ytemp = YGf + ydata;
 8004264:	4b4b      	ldr	r3, [pc, #300]	; (8004394 <Accel_ReadAcc+0x27c>)
 8004266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800426a:	b29a      	uxth	r2, r3
 800426c:	4b45      	ldr	r3, [pc, #276]	; (8004384 <Accel_ReadAcc+0x26c>)
 800426e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004272:	b29b      	uxth	r3, r3
 8004274:	4413      	add	r3, r2
 8004276:	b29b      	uxth	r3, r3
 8004278:	b21a      	sxth	r2, r3
 800427a:	4b47      	ldr	r3, [pc, #284]	; (8004398 <Accel_ReadAcc+0x280>)
 800427c:	801a      	strh	r2, [r3, #0]
 xval= XGf * (1 - KOEF_COMPL) + xdata*KOEF_COMPL;
 800427e:	4b43      	ldr	r3, [pc, #268]	; (800438c <Accel_ReadAcc+0x274>)
 8004280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004284:	4618      	mov	r0, r3
 8004286:	f7fc f8b5 	bl	80003f4 <__aeabi_i2d>
 800428a:	a337      	add	r3, pc, #220	; (adr r3, 8004368 <Accel_ReadAcc+0x250>)
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f7fc f916 	bl	80004c0 <__aeabi_dmul>
 8004294:	4603      	mov	r3, r0
 8004296:	460c      	mov	r4, r1
 8004298:	4625      	mov	r5, r4
 800429a:	461c      	mov	r4, r3
 800429c:	4b3a      	ldr	r3, [pc, #232]	; (8004388 <Accel_ReadAcc+0x270>)
 800429e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fc f8a6 	bl	80003f4 <__aeabi_i2d>
 80042a8:	a331      	add	r3, pc, #196	; (adr r3, 8004370 <Accel_ReadAcc+0x258>)
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	f7fc f907 	bl	80004c0 <__aeabi_dmul>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4620      	mov	r0, r4
 80042b8:	4629      	mov	r1, r5
 80042ba:	f7fb ff4f 	bl	800015c <__adddf3>
 80042be:	4603      	mov	r3, r0
 80042c0:	460c      	mov	r4, r1
 80042c2:	4618      	mov	r0, r3
 80042c4:	4621      	mov	r1, r4
 80042c6:	f7fc fbab 	bl	8000a20 <__aeabi_d2iz>
 80042ca:	4603      	mov	r3, r0
 80042cc:	b25a      	sxtb	r2, r3
 80042ce:	4b2c      	ldr	r3, [pc, #176]	; (8004380 <Accel_ReadAcc+0x268>)
 80042d0:	701a      	strb	r2, [r3, #0]
yval = YGf * (1-KOEF_COMPL) + ydata*KOEF_COMPL;
 80042d2:	4b30      	ldr	r3, [pc, #192]	; (8004394 <Accel_ReadAcc+0x27c>)
 80042d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fc f88b 	bl	80003f4 <__aeabi_i2d>
 80042de:	a322      	add	r3, pc, #136	; (adr r3, 8004368 <Accel_ReadAcc+0x250>)
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	f7fc f8ec 	bl	80004c0 <__aeabi_dmul>
 80042e8:	4603      	mov	r3, r0
 80042ea:	460c      	mov	r4, r1
 80042ec:	4625      	mov	r5, r4
 80042ee:	461c      	mov	r4, r3
 80042f0:	4b24      	ldr	r3, [pc, #144]	; (8004384 <Accel_ReadAcc+0x26c>)
 80042f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fc f87c 	bl	80003f4 <__aeabi_i2d>
 80042fc:	a31c      	add	r3, pc, #112	; (adr r3, 8004370 <Accel_ReadAcc+0x258>)
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	f7fc f8dd 	bl	80004c0 <__aeabi_dmul>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4620      	mov	r0, r4
 800430c:	4629      	mov	r1, r5
 800430e:	f7fb ff25 	bl	800015c <__adddf3>
 8004312:	4603      	mov	r3, r0
 8004314:	460c      	mov	r4, r1
 8004316:	4618      	mov	r0, r3
 8004318:	4621      	mov	r1, r4
 800431a:	f7fc fb81 	bl	8000a20 <__aeabi_d2iz>
 800431e:	4603      	mov	r3, r0
 8004320:	b25a      	sxtb	r2, r3
 8004322:	4b16      	ldr	r3, [pc, #88]	; (800437c <Accel_ReadAcc+0x264>)
 8004324:	701a      	strb	r2, [r3, #0]
zval = ZGf * (1-KOEF_COMPL);
 8004326:	4b1d      	ldr	r3, [pc, #116]	; (800439c <Accel_ReadAcc+0x284>)
 8004328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800432c:	4618      	mov	r0, r3
 800432e:	f7fc f861 	bl	80003f4 <__aeabi_i2d>
 8004332:	a30d      	add	r3, pc, #52	; (adr r3, 8004368 <Accel_ReadAcc+0x250>)
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f7fc f8c2 	bl	80004c0 <__aeabi_dmul>
 800433c:	4603      	mov	r3, r0
 800433e:	460c      	mov	r4, r1
 8004340:	4618      	mov	r0, r3
 8004342:	4621      	mov	r1, r4
 8004344:	f7fc fb6c 	bl	8000a20 <__aeabi_d2iz>
 8004348:	4603      	mov	r3, r0
 800434a:	b25a      	sxtb	r2, r3
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <Accel_ReadAcc+0x260>)
 800434e:	701a      	strb	r2, [r3, #0]
}
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800435a:	bf00      	nop
 800435c:	f3af 8000 	nop.w
 8004360:	20000000 	.word	0x20000000
 8004364:	404ca5dc 	.word	0x404ca5dc
 8004368:	9999999a 	.word	0x9999999a
 800436c:	3fe99999 	.word	0x3fe99999
 8004370:	9999999a 	.word	0x9999999a
 8004374:	3fc99999 	.word	0x3fc99999
 8004378:	200005ea 	.word	0x200005ea
 800437c:	200005bc 	.word	0x200005bc
 8004380:	200005e3 	.word	0x200005e3
 8004384:	200005e8 	.word	0x200005e8
 8004388:	200005e6 	.word	0x200005e6
 800438c:	200005ec 	.word	0x200005ec
 8004390:	200005e4 	.word	0x200005e4
 8004394:	200005c0 	.word	0x200005c0
 8004398:	200005b4 	.word	0x200005b4
 800439c:	200005d8 	.word	0x200005d8

080043a0 <ReadGyro>:

void ReadGyro(void)
{
 80043a0:	b5b0      	push	{r4, r5, r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
int16_t buffer[3] = {0};
 80043a6:	463b      	mov	r3, r7
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	809a      	strh	r2, [r3, #4]
 xGyro = yGyro = zGyro = 0x00;
 80043ae:	4b66      	ldr	r3, [pc, #408]	; (8004548 <ReadGyro+0x1a8>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	801a      	strh	r2, [r3, #0]
 80043b4:	4b64      	ldr	r3, [pc, #400]	; (8004548 <ReadGyro+0x1a8>)
 80043b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80043ba:	4b64      	ldr	r3, [pc, #400]	; (800454c <ReadGyro+0x1ac>)
 80043bc:	801a      	strh	r2, [r3, #0]
 80043be:	4b63      	ldr	r3, [pc, #396]	; (800454c <ReadGyro+0x1ac>)
 80043c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80043c4:	4b62      	ldr	r3, [pc, #392]	; (8004550 <ReadGyro+0x1b0>)
 80043c6:	801a      	strh	r2, [r3, #0]

 Gyro_GetXYZ(buffer);
 80043c8:	463b      	mov	r3, r7
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fe5a 	bl	8004084 <Gyro_GetXYZ>

 xGyro = buffer[0];
 80043d0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80043d4:	4b5e      	ldr	r3, [pc, #376]	; (8004550 <ReadGyro+0x1b0>)
 80043d6:	801a      	strh	r2, [r3, #0]
 yGyro = buffer[1];
 80043d8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80043dc:	4b5b      	ldr	r3, [pc, #364]	; (800454c <ReadGyro+0x1ac>)
 80043de:	801a      	strh	r2, [r3, #0]
 zGyro = buffer[2];
 80043e0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80043e4:	4b58      	ldr	r3, [pc, #352]	; (8004548 <ReadGyro+0x1a8>)
 80043e6:	801a      	strh	r2, [r3, #0]

 XG = (xGyro - fGX_Cal);
 80043e8:	4b59      	ldr	r3, [pc, #356]	; (8004550 <ReadGyro+0x1b0>)
 80043ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	4b58      	ldr	r3, [pc, #352]	; (8004554 <ReadGyro+0x1b4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	b21a      	sxth	r2, r3
 80043fc:	4b56      	ldr	r3, [pc, #344]	; (8004558 <ReadGyro+0x1b8>)
 80043fe:	801a      	strh	r2, [r3, #0]
 YG = (yGyro - fGY_Cal);
 8004400:	4b52      	ldr	r3, [pc, #328]	; (800454c <ReadGyro+0x1ac>)
 8004402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004406:	b29a      	uxth	r2, r3
 8004408:	4b54      	ldr	r3, [pc, #336]	; (800455c <ReadGyro+0x1bc>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	b29b      	uxth	r3, r3
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	b29b      	uxth	r3, r3
 8004412:	b21a      	sxth	r2, r3
 8004414:	4b52      	ldr	r3, [pc, #328]	; (8004560 <ReadGyro+0x1c0>)
 8004416:	801a      	strh	r2, [r3, #0]
 ZG = (zGyro - fGZ_Cal);
 8004418:	4b4b      	ldr	r3, [pc, #300]	; (8004548 <ReadGyro+0x1a8>)
 800441a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800441e:	b29a      	uxth	r2, r3
 8004420:	4b50      	ldr	r3, [pc, #320]	; (8004564 <ReadGyro+0x1c4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	b29b      	uxth	r3, r3
 800442a:	b21a      	sxth	r2, r3
 800442c:	4b4e      	ldr	r3, [pc, #312]	; (8004568 <ReadGyro+0x1c8>)
 800442e:	801a      	strh	r2, [r3, #0]

 //if FS_SEL  = 1 (+-500), LSB Sensivity = 65.5, reading - 10 times per second
	 XGf += XG/65.5/10;
 8004430:	4b4e      	ldr	r3, [pc, #312]	; (800456c <ReadGyro+0x1cc>)
 8004432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fb ffdc 	bl	80003f4 <__aeabi_i2d>
 800443c:	4604      	mov	r4, r0
 800443e:	460d      	mov	r5, r1
 8004440:	4b45      	ldr	r3, [pc, #276]	; (8004558 <ReadGyro+0x1b8>)
 8004442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fb ffd4 	bl	80003f4 <__aeabi_i2d>
 800444c:	a33c      	add	r3, pc, #240	; (adr r3, 8004540 <ReadGyro+0x1a0>)
 800444e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004452:	f7fc f95f 	bl	8000714 <__aeabi_ddiv>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	4b43      	ldr	r3, [pc, #268]	; (8004570 <ReadGyro+0x1d0>)
 8004464:	f7fc f956 	bl	8000714 <__aeabi_ddiv>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4620      	mov	r0, r4
 800446e:	4629      	mov	r1, r5
 8004470:	f7fb fe74 	bl	800015c <__adddf3>
 8004474:	4603      	mov	r3, r0
 8004476:	460c      	mov	r4, r1
 8004478:	4618      	mov	r0, r3
 800447a:	4621      	mov	r1, r4
 800447c:	f7fc fad0 	bl	8000a20 <__aeabi_d2iz>
 8004480:	4603      	mov	r3, r0
 8004482:	b21a      	sxth	r2, r3
 8004484:	4b39      	ldr	r3, [pc, #228]	; (800456c <ReadGyro+0x1cc>)
 8004486:	801a      	strh	r2, [r3, #0]

	 YGf += YG/65.5/10;
 8004488:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <ReadGyro+0x1d4>)
 800448a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fb ffb0 	bl	80003f4 <__aeabi_i2d>
 8004494:	4604      	mov	r4, r0
 8004496:	460d      	mov	r5, r1
 8004498:	4b31      	ldr	r3, [pc, #196]	; (8004560 <ReadGyro+0x1c0>)
 800449a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fb ffa8 	bl	80003f4 <__aeabi_i2d>
 80044a4:	a326      	add	r3, pc, #152	; (adr r3, 8004540 <ReadGyro+0x1a0>)
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	f7fc f933 	bl	8000714 <__aeabi_ddiv>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <ReadGyro+0x1d0>)
 80044bc:	f7fc f92a 	bl	8000714 <__aeabi_ddiv>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4620      	mov	r0, r4
 80044c6:	4629      	mov	r1, r5
 80044c8:	f7fb fe48 	bl	800015c <__adddf3>
 80044cc:	4603      	mov	r3, r0
 80044ce:	460c      	mov	r4, r1
 80044d0:	4618      	mov	r0, r3
 80044d2:	4621      	mov	r1, r4
 80044d4:	f7fc faa4 	bl	8000a20 <__aeabi_d2iz>
 80044d8:	4603      	mov	r3, r0
 80044da:	b21a      	sxth	r2, r3
 80044dc:	4b25      	ldr	r3, [pc, #148]	; (8004574 <ReadGyro+0x1d4>)
 80044de:	801a      	strh	r2, [r3, #0]

	 ZGf += ZG/65.5/10;
 80044e0:	4b25      	ldr	r3, [pc, #148]	; (8004578 <ReadGyro+0x1d8>)
 80044e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fb ff84 	bl	80003f4 <__aeabi_i2d>
 80044ec:	4604      	mov	r4, r0
 80044ee:	460d      	mov	r5, r1
 80044f0:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <ReadGyro+0x1c8>)
 80044f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fb ff7c 	bl	80003f4 <__aeabi_i2d>
 80044fc:	a310      	add	r3, pc, #64	; (adr r3, 8004540 <ReadGyro+0x1a0>)
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	f7fc f907 	bl	8000714 <__aeabi_ddiv>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	4b17      	ldr	r3, [pc, #92]	; (8004570 <ReadGyro+0x1d0>)
 8004514:	f7fc f8fe 	bl	8000714 <__aeabi_ddiv>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4620      	mov	r0, r4
 800451e:	4629      	mov	r1, r5
 8004520:	f7fb fe1c 	bl	800015c <__adddf3>
 8004524:	4603      	mov	r3, r0
 8004526:	460c      	mov	r4, r1
 8004528:	4618      	mov	r0, r3
 800452a:	4621      	mov	r1, r4
 800452c:	f7fc fa78 	bl	8000a20 <__aeabi_d2iz>
 8004530:	4603      	mov	r3, r0
 8004532:	b21a      	sxth	r2, r3
 8004534:	4b10      	ldr	r3, [pc, #64]	; (8004578 <ReadGyro+0x1d8>)
 8004536:	801a      	strh	r2, [r3, #0]
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bdb0      	pop	{r4, r5, r7, pc}
 8004540:	00000000 	.word	0x00000000
 8004544:	40506000 	.word	0x40506000
 8004548:	20000618 	.word	0x20000618
 800454c:	200005da 	.word	0x200005da
 8004550:	200005b6 	.word	0x200005b6
 8004554:	200005c8 	.word	0x200005c8
 8004558:	200005d4 	.word	0x200005d4
 800455c:	200005cc 	.word	0x200005cc
 8004560:	200005f0 	.word	0x200005f0
 8004564:	200005c4 	.word	0x200005c4
 8004568:	200005ee 	.word	0x200005ee
 800456c:	200005ec 	.word	0x200005ec
 8004570:	40240000 	.word	0x40240000
 8004574:	200005c0 	.word	0x200005c0
 8004578:	200005d8 	.word	0x200005d8

0800457c <GyroCalibrate>:

void GyroCalibrate()
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
	  uint16_t iNumCM = 10000;
 8004582:	f242 7310 	movw	r3, #10000	; 0x2710
 8004586:	807b      	strh	r3, [r7, #2]
	  for (int i = 0; i < iNumCM ; i++)
 8004588:	2300      	movs	r3, #0
 800458a:	607b      	str	r3, [r7, #4]
 800458c:	e01f      	b.n	80045ce <GyroCalibrate+0x52>
	  {
		  ReadGyro();
 800458e:	f7ff ff07 	bl	80043a0 <ReadGyro>
	    fGX_Cal += xGyro;
 8004592:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <GyroCalibrate+0x64>)
 8004594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004598:	461a      	mov	r2, r3
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <GyroCalibrate+0x68>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4413      	add	r3, r2
 80045a0:	4a10      	ldr	r2, [pc, #64]	; (80045e4 <GyroCalibrate+0x68>)
 80045a2:	6013      	str	r3, [r2, #0]
	    fGY_Cal += yGyro;
 80045a4:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <GyroCalibrate+0x6c>)
 80045a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045aa:	461a      	mov	r2, r3
 80045ac:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <GyroCalibrate+0x70>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4413      	add	r3, r2
 80045b2:	4a0e      	ldr	r2, [pc, #56]	; (80045ec <GyroCalibrate+0x70>)
 80045b4:	6013      	str	r3, [r2, #0]
	    fGZ_Cal += zGyro;
 80045b6:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <GyroCalibrate+0x74>)
 80045b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045bc:	461a      	mov	r2, r3
 80045be:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <GyroCalibrate+0x78>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4413      	add	r3, r2
 80045c4:	4a0b      	ldr	r2, [pc, #44]	; (80045f4 <GyroCalibrate+0x78>)
 80045c6:	6013      	str	r3, [r2, #0]
	  for (int i = 0; i < iNumCM ; i++)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3301      	adds	r3, #1
 80045cc:	607b      	str	r3, [r7, #4]
 80045ce:	887a      	ldrh	r2, [r7, #2]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	dcdb      	bgt.n	800458e <GyroCalibrate+0x12>
	  }
}
 80045d6:	bf00      	nop
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	200005b6 	.word	0x200005b6
 80045e4:	200005c8 	.word	0x200005c8
 80045e8:	200005da 	.word	0x200005da
 80045ec:	200005cc 	.word	0x200005cc
 80045f0:	20000618 	.word	0x20000618
 80045f4:	200005c4 	.word	0x200005c4

080045f8 <deriveGyro>:

void deriveGyro()
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
	  uint16_t iNumCM = 10000;
 80045fe:	f242 7310 	movw	r3, #10000	; 0x2710
 8004602:	80fb      	strh	r3, [r7, #6]
	fGX_Cal /= iNumCM;
 8004604:	4b0c      	ldr	r3, [pc, #48]	; (8004638 <deriveGyro+0x40>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	88fb      	ldrh	r3, [r7, #6]
 800460a:	fb92 f3f3 	sdiv	r3, r2, r3
 800460e:	4a0a      	ldr	r2, [pc, #40]	; (8004638 <deriveGyro+0x40>)
 8004610:	6013      	str	r3, [r2, #0]
		  fGY_Cal /= iNumCM;
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <deriveGyro+0x44>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	88fb      	ldrh	r3, [r7, #6]
 8004618:	fb92 f3f3 	sdiv	r3, r2, r3
 800461c:	4a07      	ldr	r2, [pc, #28]	; (800463c <deriveGyro+0x44>)
 800461e:	6013      	str	r3, [r2, #0]
		  fGZ_Cal /= iNumCM;
 8004620:	4b07      	ldr	r3, [pc, #28]	; (8004640 <deriveGyro+0x48>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	fb92 f3f3 	sdiv	r3, r2, r3
 800462a:	4a05      	ldr	r2, [pc, #20]	; (8004640 <deriveGyro+0x48>)
 800462c:	6013      	str	r3, [r2, #0]
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	200005c8 	.word	0x200005c8
 800463c:	200005cc 	.word	0x200005cc
 8004640:	200005c4 	.word	0x200005c4

08004644 <getPID>:
#include"PID.h"

extern int8_t buffer_str[22];

int16_t getPID(int8_t error, int32_t sumErr, int8_t deltaErr)
{
 8004644:	b590      	push	{r4, r7, lr}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	6039      	str	r1, [r7, #0]
 800464e:	71fb      	strb	r3, [r7, #7]
 8004650:	4613      	mov	r3, r2
 8004652:	71bb      	strb	r3, [r7, #6]
	P_koef = 0.8;
 8004654:	4b36      	ldr	r3, [pc, #216]	; (8004730 <getPID+0xec>)
 8004656:	4a37      	ldr	r2, [pc, #220]	; (8004734 <getPID+0xf0>)
 8004658:	601a      	str	r2, [r3, #0]
	I_koef = 0.1;
 800465a:	4b37      	ldr	r3, [pc, #220]	; (8004738 <getPID+0xf4>)
 800465c:	4a37      	ldr	r2, [pc, #220]	; (800473c <getPID+0xf8>)
 800465e:	601a      	str	r2, [r3, #0]
	D_koef = 0.2;
 8004660:	4b37      	ldr	r3, [pc, #220]	; (8004740 <getPID+0xfc>)
 8004662:	4a38      	ldr	r2, [pc, #224]	; (8004744 <getPID+0x100>)
 8004664:	601a      	str	r2, [r3, #0]

	 buffer_str[16] = P_koef*10;
 8004666:	4b32      	ldr	r3, [pc, #200]	; (8004730 <getPID+0xec>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4937      	ldr	r1, [pc, #220]	; (8004748 <getPID+0x104>)
 800466c:	4618      	mov	r0, r3
 800466e:	f7fc fb2d 	bl	8000ccc <__aeabi_fmul>
 8004672:	4603      	mov	r3, r0
 8004674:	4618      	mov	r0, r3
 8004676:	f7fc fc79 	bl	8000f6c <__aeabi_f2iz>
 800467a:	4603      	mov	r3, r0
 800467c:	b25a      	sxtb	r2, r3
 800467e:	4b33      	ldr	r3, [pc, #204]	; (800474c <getPID+0x108>)
 8004680:	741a      	strb	r2, [r3, #16]
	 buffer_str[17] = I_koef*10;
 8004682:	4b2d      	ldr	r3, [pc, #180]	; (8004738 <getPID+0xf4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4930      	ldr	r1, [pc, #192]	; (8004748 <getPID+0x104>)
 8004688:	4618      	mov	r0, r3
 800468a:	f7fc fb1f 	bl	8000ccc <__aeabi_fmul>
 800468e:	4603      	mov	r3, r0
 8004690:	4618      	mov	r0, r3
 8004692:	f7fc fc6b 	bl	8000f6c <__aeabi_f2iz>
 8004696:	4603      	mov	r3, r0
 8004698:	b25a      	sxtb	r2, r3
 800469a:	4b2c      	ldr	r3, [pc, #176]	; (800474c <getPID+0x108>)
 800469c:	745a      	strb	r2, [r3, #17]
	 buffer_str[18] = D_koef*10;
 800469e:	4b28      	ldr	r3, [pc, #160]	; (8004740 <getPID+0xfc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4929      	ldr	r1, [pc, #164]	; (8004748 <getPID+0x104>)
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fc fb11 	bl	8000ccc <__aeabi_fmul>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fc fc5d 	bl	8000f6c <__aeabi_f2iz>
 80046b2:	4603      	mov	r3, r0
 80046b4:	b25a      	sxtb	r2, r3
 80046b6:	4b25      	ldr	r3, [pc, #148]	; (800474c <getPID+0x108>)
 80046b8:	749a      	strb	r2, [r3, #18]
	return P_koef*error + I_koef*sumErr + D_koef*deltaErr;
 80046ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fc fab0 	bl	8000c24 <__aeabi_i2f>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <getPID+0xec>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f7fc fafd 	bl	8000ccc <__aeabi_fmul>
 80046d2:	4603      	mov	r3, r0
 80046d4:	461c      	mov	r4, r3
 80046d6:	6838      	ldr	r0, [r7, #0]
 80046d8:	f7fc faa4 	bl	8000c24 <__aeabi_i2f>
 80046dc:	4602      	mov	r2, r0
 80046de:	4b16      	ldr	r3, [pc, #88]	; (8004738 <getPID+0xf4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4619      	mov	r1, r3
 80046e4:	4610      	mov	r0, r2
 80046e6:	f7fc faf1 	bl	8000ccc <__aeabi_fmul>
 80046ea:	4603      	mov	r3, r0
 80046ec:	4619      	mov	r1, r3
 80046ee:	4620      	mov	r0, r4
 80046f0:	f7fc f9e4 	bl	8000abc <__addsf3>
 80046f4:	4603      	mov	r3, r0
 80046f6:	461c      	mov	r4, r3
 80046f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fc fa91 	bl	8000c24 <__aeabi_i2f>
 8004702:	4602      	mov	r2, r0
 8004704:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <getPID+0xfc>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f7fc fade 	bl	8000ccc <__aeabi_fmul>
 8004710:	4603      	mov	r3, r0
 8004712:	4619      	mov	r1, r3
 8004714:	4620      	mov	r0, r4
 8004716:	f7fc f9d1 	bl	8000abc <__addsf3>
 800471a:	4603      	mov	r3, r0
 800471c:	4618      	mov	r0, r3
 800471e:	f7fc fc25 	bl	8000f6c <__aeabi_f2iz>
 8004722:	4603      	mov	r3, r0
 8004724:	b21b      	sxth	r3, r3
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	bd90      	pop	{r4, r7, pc}
 800472e:	bf00      	nop
 8004730:	200004b0 	.word	0x200004b0
 8004734:	3f4ccccd 	.word	0x3f4ccccd
 8004738:	200004ac 	.word	0x200004ac
 800473c:	3dcccccd 	.word	0x3dcccccd
 8004740:	200004b4 	.word	0x200004b4
 8004744:	3e4ccccd 	.word	0x3e4ccccd
 8004748:	41200000 	.word	0x41200000
 800474c:	20000600 	.word	0x20000600

08004750 <NVIC_EnableIRQ>:
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800475a:	4908      	ldr	r1, [pc, #32]	; (800477c <NVIC_EnableIRQ+0x2c>)
 800475c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	79fa      	ldrb	r2, [r7, #7]
 8004764:	f002 021f 	and.w	r2, r2, #31
 8004768:	2001      	movs	r0, #1
 800476a:	fa00 f202 	lsl.w	r2, r0, r2
 800476e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	e000e100 	.word	0xe000e100

08004780 <NVIC_SetPriority>:
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	6039      	str	r1, [r7, #0]
 800478a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800478c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004790:	2b00      	cmp	r3, #0
 8004792:	da0b      	bge.n	80047ac <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004794:	490d      	ldr	r1, [pc, #52]	; (80047cc <NVIC_SetPriority+0x4c>)
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	3b04      	subs	r3, #4
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	0112      	lsls	r2, r2, #4
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	440b      	add	r3, r1
 80047a8:	761a      	strb	r2, [r3, #24]
}
 80047aa:	e009      	b.n	80047c0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ac:	4908      	ldr	r1, [pc, #32]	; (80047d0 <NVIC_SetPriority+0x50>)
 80047ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	b2d2      	uxtb	r2, r2
 80047b6:	0112      	lsls	r2, r2, #4
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	440b      	add	r3, r1
 80047bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bc80      	pop	{r7}
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	e000ed00 	.word	0xe000ed00
 80047d0:	e000e100 	.word	0xe000e100

080047d4 <uart_init>:
extern char data;



void uart_init()
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80047d8:	4a1c      	ldr	r2, [pc, #112]	; (800484c <uart_init+0x78>)
 80047da:	4b1c      	ldr	r3, [pc, #112]	; (800484c <uart_init+0x78>)
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e2:	6193      	str	r3, [r2, #24]

	/*
	 * PA9 --- USART TX
	 * PA10 --- USART RX
	 */
	GPIOA->CRH |= 0xB0;    //GPIOA_CRH: MODE9 = output mode, max speed 50 MHz, CNF9 = alternate function output push-pull
 80047e4:	4a1a      	ldr	r2, [pc, #104]	; (8004850 <uart_init+0x7c>)
 80047e6:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <uart_init+0x7c>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80047ee:	6053      	str	r3, [r2, #4]
						  //	MODE10 = input mode, CNF10 = analog mode
	GPIOA->CRH &= ~0x4F;
 80047f0:	4a17      	ldr	r2, [pc, #92]	; (8004850 <uart_init+0x7c>)
 80047f2:	4b17      	ldr	r3, [pc, #92]	; (8004850 <uart_init+0x7c>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 80047fa:	6053      	str	r3, [r2, #4]

	USART1->BRR= 0x271;		//Baud rate = 115200
 80047fc:	4b15      	ldr	r3, [pc, #84]	; (8004854 <uart_init+0x80>)
 80047fe:	f240 2271 	movw	r2, #625	; 0x271
 8004802:	609a      	str	r2, [r3, #8]
	USART1->CR1 |= USART_CR1_UE;
 8004804:	4a13      	ldr	r2, [pc, #76]	; (8004854 <uart_init+0x80>)
 8004806:	4b13      	ldr	r3, [pc, #76]	; (8004854 <uart_init+0x80>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800480e:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_TE;
 8004810:	4a10      	ldr	r2, [pc, #64]	; (8004854 <uart_init+0x80>)
 8004812:	4b10      	ldr	r3, [pc, #64]	; (8004854 <uart_init+0x80>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f043 0308 	orr.w	r3, r3, #8
 800481a:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_TXEIE;	//TXE interrupt enable
 800481c:	4a0d      	ldr	r2, [pc, #52]	; (8004854 <uart_init+0x80>)
 800481e:	4b0d      	ldr	r3, [pc, #52]	; (8004854 <uart_init+0x80>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004826:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_TCIE;  //TC interrupt enable
 8004828:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <uart_init+0x80>)
 800482a:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <uart_init+0x80>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004832:	60d3      	str	r3, [r2, #12]

	/* USART1 interrupt Init */
	NVIC_SetPriority(USART1_IRQn, 0);
 8004834:	2100      	movs	r1, #0
 8004836:	2025      	movs	r0, #37	; 0x25
 8004838:	f7ff ffa2 	bl	8004780 <NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 800483c:	2025      	movs	r0, #37	; 0x25
 800483e:	f7ff ff87 	bl	8004750 <NVIC_EnableIRQ>
	current = 1;
 8004842:	4b05      	ldr	r3, [pc, #20]	; (8004858 <uart_init+0x84>)
 8004844:	2201      	movs	r2, #1
 8004846:	701a      	strb	r2, [r3, #0]
}
 8004848:	bf00      	nop
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40021000 	.word	0x40021000
 8004850:	40010800 	.word	0x40010800
 8004854:	40013800 	.word	0x40013800
 8004858:	200004b8 	.word	0x200004b8

0800485c <send_to_uart>:

void send_to_uart(uint8_t data)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	71fb      	strb	r3, [r7, #7]
//while(!(USART1->SR & USART_SR_TC));
USART1->DR=data;
 8004866:	4a04      	ldr	r2, [pc, #16]	; (8004878 <send_to_uart+0x1c>)
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	6053      	str	r3, [r2, #4]
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40013800 	.word	0x40013800

0800487c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
	if(USART1->SR & USART_SR_TXE && USART1->CR1 & USART_CR1_TXEIE)
 8004880:	4b1b      	ldr	r3, [pc, #108]	; (80048f0 <USART1_IRQHandler+0x74>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01d      	beq.n	80048c8 <USART1_IRQHandler+0x4c>
 800488c:	4b18      	ldr	r3, [pc, #96]	; (80048f0 <USART1_IRQHandler+0x74>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b00      	cmp	r3, #0
 8004896:	d017      	beq.n	80048c8 <USART1_IRQHandler+0x4c>
	{
		if(current >= 22)
 8004898:	4b16      	ldr	r3, [pc, #88]	; (80048f4 <USART1_IRQHandler+0x78>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b15      	cmp	r3, #21
 800489e:	d902      	bls.n	80048a6 <USART1_IRQHandler+0x2a>
			current = 0;
 80048a0:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <USART1_IRQHandler+0x78>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	701a      	strb	r2, [r3, #0]
		data = buffer_str[current++];
 80048a6:	4b13      	ldr	r3, [pc, #76]	; (80048f4 <USART1_IRQHandler+0x78>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	b2d1      	uxtb	r1, r2
 80048ae:	4a11      	ldr	r2, [pc, #68]	; (80048f4 <USART1_IRQHandler+0x78>)
 80048b0:	7011      	strb	r1, [r2, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <USART1_IRQHandler+0x7c>)
 80048b6:	569b      	ldrsb	r3, [r3, r2]
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	4b10      	ldr	r3, [pc, #64]	; (80048fc <USART1_IRQHandler+0x80>)
 80048bc:	701a      	strb	r2, [r3, #0]
	send_to_uart(data);
 80048be:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <USART1_IRQHandler+0x80>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff ffca 	bl	800485c <send_to_uart>
	}
	if(USART1->SR & USART_SR_TC && USART1->CR1 & USART_CR1_TCIE)
 80048c8:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <USART1_IRQHandler+0x74>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00b      	beq.n	80048ec <USART1_IRQHandler+0x70>
 80048d4:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <USART1_IRQHandler+0x74>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <USART1_IRQHandler+0x70>
		USART1->SR &= ~USART_SR_TC;
 80048e0:	4a03      	ldr	r2, [pc, #12]	; (80048f0 <USART1_IRQHandler+0x74>)
 80048e2:	4b03      	ldr	r3, [pc, #12]	; (80048f0 <USART1_IRQHandler+0x74>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ea:	6013      	str	r3, [r2, #0]
}
 80048ec:	bf00      	nop
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40013800 	.word	0x40013800
 80048f4:	200004b8 	.word	0x200004b8
 80048f8:	20000600 	.word	0x20000600
 80048fc:	200005e2 	.word	0x200005e2

08004900 <write_CRC>:

void write_CRC()
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
	int16_t sum = 0;
 8004906:	2300      	movs	r3, #0
 8004908:	80fb      	strh	r3, [r7, #6]
	int8_t hi = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	713b      	strb	r3, [r7, #4]
	int8_t lo = 0;
 800490e:	2300      	movs	r3, #0
 8004910:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 1; i < 19; i++)
 8004912:	2301      	movs	r3, #1
 8004914:	717b      	strb	r3, [r7, #5]
 8004916:	e00a      	b.n	800492e <write_CRC+0x2e>
		sum += buffer_str[i];
 8004918:	797b      	ldrb	r3, [r7, #5]
 800491a:	4a11      	ldr	r2, [pc, #68]	; (8004960 <write_CRC+0x60>)
 800491c:	56d3      	ldrsb	r3, [r2, r3]
 800491e:	b29a      	uxth	r2, r3
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	4413      	add	r3, r2
 8004924:	b29b      	uxth	r3, r3
 8004926:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i = 1; i < 19; i++)
 8004928:	797b      	ldrb	r3, [r7, #5]
 800492a:	3301      	adds	r3, #1
 800492c:	717b      	strb	r3, [r7, #5]
 800492e:	797b      	ldrb	r3, [r7, #5]
 8004930:	2b12      	cmp	r3, #18
 8004932:	d9f1      	bls.n	8004918 <write_CRC+0x18>
lo = sum;
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	70fb      	strb	r3, [r7, #3]
hi = (sum>>8);
 8004938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800493c:	121b      	asrs	r3, r3, #8
 800493e:	b21b      	sxth	r3, r3
 8004940:	713b      	strb	r3, [r7, #4]
buffer_str[19] = hi;
 8004942:	4a07      	ldr	r2, [pc, #28]	; (8004960 <write_CRC+0x60>)
 8004944:	793b      	ldrb	r3, [r7, #4]
 8004946:	74d3      	strb	r3, [r2, #19]
buffer_str[20] = lo;
 8004948:	4a05      	ldr	r2, [pc, #20]	; (8004960 <write_CRC+0x60>)
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	7513      	strb	r3, [r2, #20]
buffer_str[21] = 11;
 800494e:	4b04      	ldr	r3, [pc, #16]	; (8004960 <write_CRC+0x60>)
 8004950:	220b      	movs	r2, #11
 8004952:	755a      	strb	r2, [r3, #21]
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	20000600 	.word	0x20000600

08004964 <selfStabilizing>:
#include"PID.h"

extern int16_t dMThX, dMThY, dMThZ;
extern int16_t xval, yval, zval;
extern int8_t buffer_str[22];
void selfStabilizing() {
 8004964:	b590      	push	{r4, r7, lr}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0

	 int16_t _iRollError = (int16_t)((acRoll - xval) * 8);  // 125/8 = 15.6 degree = max
 800496a:	4bbc      	ldr	r3, [pc, #752]	; (8004c5c <selfStabilizing+0x2f8>)
 800496c:	681c      	ldr	r4, [r3, #0]
 800496e:	4bbc      	ldr	r3, [pc, #752]	; (8004c60 <selfStabilizing+0x2fc>)
 8004970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004974:	4618      	mov	r0, r3
 8004976:	f7fc f955 	bl	8000c24 <__aeabi_i2f>
 800497a:	4603      	mov	r3, r0
 800497c:	4619      	mov	r1, r3
 800497e:	4620      	mov	r0, r4
 8004980:	f7fc f89a 	bl	8000ab8 <__aeabi_fsub>
 8004984:	4603      	mov	r3, r0
 8004986:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800498a:	4618      	mov	r0, r3
 800498c:	f7fc f99e 	bl	8000ccc <__aeabi_fmul>
 8004990:	4603      	mov	r3, r0
 8004992:	4618      	mov	r0, r3
 8004994:	f7fc faea 	bl	8000f6c <__aeabi_f2iz>
 8004998:	4603      	mov	r3, r0
 800499a:	81fb      	strh	r3, [r7, #14]
	    int16_t _iPitchError = (int16_t)((acPitch - yval) * 8);  // 125/8 = 15.6 degree = max
 800499c:	4bb1      	ldr	r3, [pc, #708]	; (8004c64 <selfStabilizing+0x300>)
 800499e:	681c      	ldr	r4, [r3, #0]
 80049a0:	4bb1      	ldr	r3, [pc, #708]	; (8004c68 <selfStabilizing+0x304>)
 80049a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fc f93c 	bl	8000c24 <__aeabi_i2f>
 80049ac:	4603      	mov	r3, r0
 80049ae:	4619      	mov	r1, r3
 80049b0:	4620      	mov	r0, r4
 80049b2:	f7fc f881 	bl	8000ab8 <__aeabi_fsub>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fc f985 	bl	8000ccc <__aeabi_fmul>
 80049c2:	4603      	mov	r3, r0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fc fad1 	bl	8000f6c <__aeabi_f2iz>
 80049ca:	4603      	mov	r3, r0
 80049cc:	81bb      	strh	r3, [r7, #12]
	    int16_t _iYawError = (int16_t)((acYaw - zval) * 8);
 80049ce:	4ba7      	ldr	r3, [pc, #668]	; (8004c6c <selfStabilizing+0x308>)
 80049d0:	681c      	ldr	r4, [r3, #0]
 80049d2:	4ba7      	ldr	r3, [pc, #668]	; (8004c70 <selfStabilizing+0x30c>)
 80049d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fc f923 	bl	8000c24 <__aeabi_i2f>
 80049de:	4603      	mov	r3, r0
 80049e0:	4619      	mov	r1, r3
 80049e2:	4620      	mov	r0, r4
 80049e4:	f7fc f868 	bl	8000ab8 <__aeabi_fsub>
 80049e8:	4603      	mov	r3, r0
 80049ea:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fc f96c 	bl	8000ccc <__aeabi_fmul>
 80049f4:	4603      	mov	r3, r0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fc fab8 	bl	8000f6c <__aeabi_f2iz>
 80049fc:	4603      	mov	r3, r0
 80049fe:	817b      	strh	r3, [r7, #10]
	    //
	    int8_t iRollError = constrain(_iRollError, -125, 125);
 8004a00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a04:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 8004a08:	db07      	blt.n	8004a1a <selfStabilizing+0xb6>
 8004a0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a0e:	2b7d      	cmp	r3, #125	; 0x7d
 8004a10:	bfa8      	it	ge
 8004a12:	237d      	movge	r3, #125	; 0x7d
 8004a14:	b21b      	sxth	r3, r3
 8004a16:	b25b      	sxtb	r3, r3
 8004a18:	e001      	b.n	8004a1e <selfStabilizing+0xba>
 8004a1a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004a1e:	727b      	strb	r3, [r7, #9]
	    int8_t iDeltaRError = constrain(iRollError - iprevRollError, -125, 125);
 8004a20:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004a24:	4a93      	ldr	r2, [pc, #588]	; (8004c74 <selfStabilizing+0x310>)
 8004a26:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 8004a30:	db0a      	blt.n	8004a48 <selfStabilizing+0xe4>
 8004a32:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004a36:	4a8f      	ldr	r2, [pc, #572]	; (8004c74 <selfStabilizing+0x310>)
 8004a38:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	2b7d      	cmp	r3, #125	; 0x7d
 8004a40:	bfa8      	it	ge
 8004a42:	237d      	movge	r3, #125	; 0x7d
 8004a44:	b25b      	sxtb	r3, r3
 8004a46:	e001      	b.n	8004a4c <selfStabilizing+0xe8>
 8004a48:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004a4c:	723b      	strb	r3, [r7, #8]
	    int8_t iPitchError = constrain(_iPitchError, -125, 125);
 8004a4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a52:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 8004a56:	db07      	blt.n	8004a68 <selfStabilizing+0x104>
 8004a58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a5c:	2b7d      	cmp	r3, #125	; 0x7d
 8004a5e:	bfa8      	it	ge
 8004a60:	237d      	movge	r3, #125	; 0x7d
 8004a62:	b21b      	sxth	r3, r3
 8004a64:	b25b      	sxtb	r3, r3
 8004a66:	e001      	b.n	8004a6c <selfStabilizing+0x108>
 8004a68:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004a6c:	71fb      	strb	r3, [r7, #7]
	    int8_t iDeltaPError = constrain(iPitchError - iprevPitchError, -125, 125);
 8004a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a72:	4a81      	ldr	r2, [pc, #516]	; (8004c78 <selfStabilizing+0x314>)
 8004a74:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004a78:	1a9b      	subs	r3, r3, r2
 8004a7a:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 8004a7e:	db0a      	blt.n	8004a96 <selfStabilizing+0x132>
 8004a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a84:	4a7c      	ldr	r2, [pc, #496]	; (8004c78 <selfStabilizing+0x314>)
 8004a86:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	2b7d      	cmp	r3, #125	; 0x7d
 8004a8e:	bfa8      	it	ge
 8004a90:	237d      	movge	r3, #125	; 0x7d
 8004a92:	b25b      	sxtb	r3, r3
 8004a94:	e001      	b.n	8004a9a <selfStabilizing+0x136>
 8004a96:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004a9a:	71bb      	strb	r3, [r7, #6]
	    int8_t iYawError = constrain(_iYawError, -125, 125);
 8004a9c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004aa0:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 8004aa4:	db07      	blt.n	8004ab6 <selfStabilizing+0x152>
 8004aa6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004aaa:	2b7d      	cmp	r3, #125	; 0x7d
 8004aac:	bfa8      	it	ge
 8004aae:	237d      	movge	r3, #125	; 0x7d
 8004ab0:	b21b      	sxth	r3, r3
 8004ab2:	b25b      	sxtb	r3, r3
 8004ab4:	e001      	b.n	8004aba <selfStabilizing+0x156>
 8004ab6:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004aba:	717b      	strb	r3, [r7, #5]
	    int8_t iDeltaYError = constrain(iYawError - iprevYawError, -125, 125);
 8004abc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004ac0:	4a6e      	ldr	r2, [pc, #440]	; (8004c7c <selfStabilizing+0x318>)
 8004ac2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 8004acc:	db0a      	blt.n	8004ae4 <selfStabilizing+0x180>
 8004ace:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004ad2:	4a6a      	ldr	r2, [pc, #424]	; (8004c7c <selfStabilizing+0x318>)
 8004ad4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004ad8:	1a9b      	subs	r3, r3, r2
 8004ada:	2b7d      	cmp	r3, #125	; 0x7d
 8004adc:	bfa8      	it	ge
 8004ade:	237d      	movge	r3, #125	; 0x7d
 8004ae0:	b25b      	sxtb	r3, r3
 8004ae2:	e001      	b.n	8004ae8 <selfStabilizing+0x184>
 8004ae4:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004ae8:	713b      	strb	r3, [r7, #4]
	    //
	    iprevRollError = iRollError;
 8004aea:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004aee:	b21a      	sxth	r2, r3
 8004af0:	4b60      	ldr	r3, [pc, #384]	; (8004c74 <selfStabilizing+0x310>)
 8004af2:	801a      	strh	r2, [r3, #0]
	    iprevPitchError = iPitchError;
 8004af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af8:	b21a      	sxth	r2, r3
 8004afa:	4b5f      	ldr	r3, [pc, #380]	; (8004c78 <selfStabilizing+0x314>)
 8004afc:	801a      	strh	r2, [r3, #0]
	    iprevYawError = iYawError;
 8004afe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004b02:	b21a      	sxth	r2, r3
 8004b04:	4b5d      	ldr	r3, [pc, #372]	; (8004c7c <selfStabilizing+0x318>)
 8004b06:	801a      	strh	r2, [r3, #0]

	    integrRError += iRollError*90/125;
 8004b08:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004b0c:	225a      	movs	r2, #90	; 0x5a
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	4a5b      	ldr	r2, [pc, #364]	; (8004c80 <selfStabilizing+0x31c>)
 8004b14:	fb82 1203 	smull	r1, r2, r2, r3
 8004b18:	10d2      	asrs	r2, r2, #3
 8004b1a:	17db      	asrs	r3, r3, #31
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	4b58      	ldr	r3, [pc, #352]	; (8004c84 <selfStabilizing+0x320>)
 8004b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	4413      	add	r3, r2
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	b21a      	sxth	r2, r3
 8004b2e:	4b55      	ldr	r3, [pc, #340]	; (8004c84 <selfStabilizing+0x320>)
 8004b30:	801a      	strh	r2, [r3, #0]
	    integrPError += iPitchError*90/125;
 8004b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b36:	225a      	movs	r2, #90	; 0x5a
 8004b38:	fb02 f303 	mul.w	r3, r2, r3
 8004b3c:	4a50      	ldr	r2, [pc, #320]	; (8004c80 <selfStabilizing+0x31c>)
 8004b3e:	fb82 1203 	smull	r1, r2, r2, r3
 8004b42:	10d2      	asrs	r2, r2, #3
 8004b44:	17db      	asrs	r3, r3, #31
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	4b4f      	ldr	r3, [pc, #316]	; (8004c88 <selfStabilizing+0x324>)
 8004b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	4413      	add	r3, r2
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	b21a      	sxth	r2, r3
 8004b58:	4b4b      	ldr	r3, [pc, #300]	; (8004c88 <selfStabilizing+0x324>)
 8004b5a:	801a      	strh	r2, [r3, #0]
	    integrYError += iYawError*90/125;
 8004b5c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004b60:	225a      	movs	r2, #90	; 0x5a
 8004b62:	fb02 f303 	mul.w	r3, r2, r3
 8004b66:	4a46      	ldr	r2, [pc, #280]	; (8004c80 <selfStabilizing+0x31c>)
 8004b68:	fb82 1203 	smull	r1, r2, r2, r3
 8004b6c:	10d2      	asrs	r2, r2, #3
 8004b6e:	17db      	asrs	r3, r3, #31
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	4b45      	ldr	r3, [pc, #276]	; (8004c8c <selfStabilizing+0x328>)
 8004b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	b21a      	sxth	r2, r3
 8004b82:	4b42      	ldr	r3, [pc, #264]	; (8004c8c <selfStabilizing+0x328>)
 8004b84:	801a      	strh	r2, [r3, #0]
	    integrRError /= 10;
 8004b86:	4b3f      	ldr	r3, [pc, #252]	; (8004c84 <selfStabilizing+0x320>)
 8004b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b8c:	4a40      	ldr	r2, [pc, #256]	; (8004c90 <selfStabilizing+0x32c>)
 8004b8e:	fb82 1203 	smull	r1, r2, r2, r3
 8004b92:	1092      	asrs	r2, r2, #2
 8004b94:	17db      	asrs	r3, r3, #31
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	b21a      	sxth	r2, r3
 8004b9a:	4b3a      	ldr	r3, [pc, #232]	; (8004c84 <selfStabilizing+0x320>)
 8004b9c:	801a      	strh	r2, [r3, #0]
	   	integrPError /= 10;
 8004b9e:	4b3a      	ldr	r3, [pc, #232]	; (8004c88 <selfStabilizing+0x324>)
 8004ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ba4:	4a3a      	ldr	r2, [pc, #232]	; (8004c90 <selfStabilizing+0x32c>)
 8004ba6:	fb82 1203 	smull	r1, r2, r2, r3
 8004baa:	1092      	asrs	r2, r2, #2
 8004bac:	17db      	asrs	r3, r3, #31
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	b21a      	sxth	r2, r3
 8004bb2:	4b35      	ldr	r3, [pc, #212]	; (8004c88 <selfStabilizing+0x324>)
 8004bb4:	801a      	strh	r2, [r3, #0]
	   	integrYError /= 10;
 8004bb6:	4b35      	ldr	r3, [pc, #212]	; (8004c8c <selfStabilizing+0x328>)
 8004bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bbc:	4a34      	ldr	r2, [pc, #208]	; (8004c90 <selfStabilizing+0x32c>)
 8004bbe:	fb82 1203 	smull	r1, r2, r2, r3
 8004bc2:	1092      	asrs	r2, r2, #2
 8004bc4:	17db      	asrs	r3, r3, #31
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	b21a      	sxth	r2, r3
 8004bca:	4b30      	ldr	r3, [pc, #192]	; (8004c8c <selfStabilizing+0x328>)
 8004bcc:	801a      	strh	r2, [r3, #0]

	    dMThX = getPID(iRollError, integrRError, iDeltaRError);
 8004bce:	4b2d      	ldr	r3, [pc, #180]	; (8004c84 <selfStabilizing+0x320>)
 8004bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8004bda:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fd30 	bl	8004644 <getPID>
 8004be4:	4603      	mov	r3, r0
 8004be6:	461a      	mov	r2, r3
 8004be8:	4b2a      	ldr	r3, [pc, #168]	; (8004c94 <selfStabilizing+0x330>)
 8004bea:	801a      	strh	r2, [r3, #0]
	    dMThY = getPID(iPitchError, integrPError, iDeltaPError);
 8004bec:	4b26      	ldr	r3, [pc, #152]	; (8004c88 <selfStabilizing+0x324>)
 8004bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8004bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fd21 	bl	8004644 <getPID>
 8004c02:	4603      	mov	r3, r0
 8004c04:	461a      	mov	r2, r3
 8004c06:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <selfStabilizing+0x334>)
 8004c08:	801a      	strh	r2, [r3, #0]
	    dMThZ = getPID(iYawError, integrYError, iDeltaYError);
 8004c0a:	4b20      	ldr	r3, [pc, #128]	; (8004c8c <selfStabilizing+0x328>)
 8004c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c10:	4619      	mov	r1, r3
 8004c12:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8004c16:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff fd12 	bl	8004644 <getPID>
 8004c20:	4603      	mov	r3, r0
 8004c22:	461a      	mov	r2, r3
 8004c24:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <selfStabilizing+0x338>)
 8004c26:	801a      	strh	r2, [r3, #0]
	    dMThX = constrain(dMThX, -125, 125) *90/125;
 8004c28:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <selfStabilizing+0x330>)
 8004c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c2e:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 8004c32:	db35      	blt.n	8004ca0 <selfStabilizing+0x33c>
 8004c34:	4b17      	ldr	r3, [pc, #92]	; (8004c94 <selfStabilizing+0x330>)
 8004c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c3a:	2b7d      	cmp	r3, #125	; 0x7d
 8004c3c:	bfa8      	it	ge
 8004c3e:	237d      	movge	r3, #125	; 0x7d
 8004c40:	b21b      	sxth	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	235a      	movs	r3, #90	; 0x5a
 8004c46:	fb03 f302 	mul.w	r3, r3, r2
 8004c4a:	4a0d      	ldr	r2, [pc, #52]	; (8004c80 <selfStabilizing+0x31c>)
 8004c4c:	fb82 1203 	smull	r1, r2, r2, r3
 8004c50:	10d2      	asrs	r2, r2, #3
 8004c52:	17db      	asrs	r3, r3, #31
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	b21b      	sxth	r3, r3
 8004c58:	e024      	b.n	8004ca4 <selfStabilizing+0x340>
 8004c5a:	bf00      	nop
 8004c5c:	200004f8 	.word	0x200004f8
 8004c60:	200005e3 	.word	0x200005e3
 8004c64:	20000504 	.word	0x20000504
 8004c68:	200005bc 	.word	0x200005bc
 8004c6c:	200004c0 	.word	0x200004c0
 8004c70:	200005ea 	.word	0x200005ea
 8004c74:	200004fe 	.word	0x200004fe
 8004c78:	20000500 	.word	0x20000500
 8004c7c:	200004bc 	.word	0x200004bc
 8004c80:	10624dd3 	.word	0x10624dd3
 8004c84:	200004f6 	.word	0x200004f6
 8004c88:	200004fc 	.word	0x200004fc
 8004c8c:	200004f4 	.word	0x200004f4
 8004c90:	66666667 	.word	0x66666667
 8004c94:	200005d0 	.word	0x200005d0
 8004c98:	200005de 	.word	0x200005de
 8004c9c:	20000616 	.word	0x20000616
 8004ca0:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8004ca4:	4a45      	ldr	r2, [pc, #276]	; (8004dbc <selfStabilizing+0x458>)
 8004ca6:	8013      	strh	r3, [r2, #0]
	    dMThY = constrain(dMThY, -125, 125)*90/125;
 8004ca8:	4b45      	ldr	r3, [pc, #276]	; (8004dc0 <selfStabilizing+0x45c>)
 8004caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cae:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 8004cb2:	db12      	blt.n	8004cda <selfStabilizing+0x376>
 8004cb4:	4b42      	ldr	r3, [pc, #264]	; (8004dc0 <selfStabilizing+0x45c>)
 8004cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cba:	2b7d      	cmp	r3, #125	; 0x7d
 8004cbc:	bfa8      	it	ge
 8004cbe:	237d      	movge	r3, #125	; 0x7d
 8004cc0:	b21b      	sxth	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	235a      	movs	r3, #90	; 0x5a
 8004cc6:	fb03 f302 	mul.w	r3, r3, r2
 8004cca:	4a3e      	ldr	r2, [pc, #248]	; (8004dc4 <selfStabilizing+0x460>)
 8004ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8004cd0:	10d2      	asrs	r2, r2, #3
 8004cd2:	17db      	asrs	r3, r3, #31
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	b21b      	sxth	r3, r3
 8004cd8:	e001      	b.n	8004cde <selfStabilizing+0x37a>
 8004cda:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8004cde:	4a38      	ldr	r2, [pc, #224]	; (8004dc0 <selfStabilizing+0x45c>)
 8004ce0:	8013      	strh	r3, [r2, #0]
	    dMThZ = constrain(dMThZ, -125, 125)*90/125;
 8004ce2:	4b39      	ldr	r3, [pc, #228]	; (8004dc8 <selfStabilizing+0x464>)
 8004ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ce8:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 8004cec:	db12      	blt.n	8004d14 <selfStabilizing+0x3b0>
 8004cee:	4b36      	ldr	r3, [pc, #216]	; (8004dc8 <selfStabilizing+0x464>)
 8004cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cf4:	2b7d      	cmp	r3, #125	; 0x7d
 8004cf6:	bfa8      	it	ge
 8004cf8:	237d      	movge	r3, #125	; 0x7d
 8004cfa:	b21b      	sxth	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	235a      	movs	r3, #90	; 0x5a
 8004d00:	fb03 f302 	mul.w	r3, r3, r2
 8004d04:	4a2f      	ldr	r2, [pc, #188]	; (8004dc4 <selfStabilizing+0x460>)
 8004d06:	fb82 1203 	smull	r1, r2, r2, r3
 8004d0a:	10d2      	asrs	r2, r2, #3
 8004d0c:	17db      	asrs	r3, r3, #31
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	b21b      	sxth	r3, r3
 8004d12:	e001      	b.n	8004d18 <selfStabilizing+0x3b4>
 8004d14:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8004d18:	4a2b      	ldr	r2, [pc, #172]	; (8004dc8 <selfStabilizing+0x464>)
 8004d1a:	8013      	strh	r3, [r2, #0]
	        dMThX = getFuzzyConclusion(iRollError, iDeltaRError) * 90 / 125; //
	        dMThY = getFuzzyConclusion(iPitchError, iDeltaPError) * 90 / 125;
	        dMThZ = getFuzzyConclusion(iYawError, iDeltaYError) * 90 / 125;*/


	    buffer_str[0] = 10;
 8004d1c:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <selfStabilizing+0x468>)
 8004d1e:	220a      	movs	r2, #10
 8004d20:	701a      	strb	r2, [r3, #0]
	    buffer_str[1] = xval;
 8004d22:	4b2b      	ldr	r3, [pc, #172]	; (8004dd0 <selfStabilizing+0x46c>)
 8004d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d28:	b25a      	sxtb	r2, r3
 8004d2a:	4b28      	ldr	r3, [pc, #160]	; (8004dcc <selfStabilizing+0x468>)
 8004d2c:	705a      	strb	r2, [r3, #1]
	    buffer_str[2] =	iRollError;
 8004d2e:	4a27      	ldr	r2, [pc, #156]	; (8004dcc <selfStabilizing+0x468>)
 8004d30:	7a7b      	ldrb	r3, [r7, #9]
 8004d32:	7093      	strb	r3, [r2, #2]
	    buffer_str[3] = iDeltaRError;
 8004d34:	4a25      	ldr	r2, [pc, #148]	; (8004dcc <selfStabilizing+0x468>)
 8004d36:	7a3b      	ldrb	r3, [r7, #8]
 8004d38:	70d3      	strb	r3, [r2, #3]
	    buffer_str[4] = integrRError;
 8004d3a:	4b26      	ldr	r3, [pc, #152]	; (8004dd4 <selfStabilizing+0x470>)
 8004d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d40:	b25a      	sxtb	r2, r3
 8004d42:	4b22      	ldr	r3, [pc, #136]	; (8004dcc <selfStabilizing+0x468>)
 8004d44:	711a      	strb	r2, [r3, #4]
	    buffer_str[5] = dMThX;
 8004d46:	4b1d      	ldr	r3, [pc, #116]	; (8004dbc <selfStabilizing+0x458>)
 8004d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d4c:	b25a      	sxtb	r2, r3
 8004d4e:	4b1f      	ldr	r3, [pc, #124]	; (8004dcc <selfStabilizing+0x468>)
 8004d50:	715a      	strb	r2, [r3, #5]
	    buffer_str[6] =	yval;
 8004d52:	4b21      	ldr	r3, [pc, #132]	; (8004dd8 <selfStabilizing+0x474>)
 8004d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d58:	b25a      	sxtb	r2, r3
 8004d5a:	4b1c      	ldr	r3, [pc, #112]	; (8004dcc <selfStabilizing+0x468>)
 8004d5c:	719a      	strb	r2, [r3, #6]
	    buffer_str[7] = iPitchError;
 8004d5e:	4a1b      	ldr	r2, [pc, #108]	; (8004dcc <selfStabilizing+0x468>)
 8004d60:	79fb      	ldrb	r3, [r7, #7]
 8004d62:	71d3      	strb	r3, [r2, #7]
	    buffer_str[8] = iDeltaPError;
 8004d64:	4a19      	ldr	r2, [pc, #100]	; (8004dcc <selfStabilizing+0x468>)
 8004d66:	79bb      	ldrb	r3, [r7, #6]
 8004d68:	7213      	strb	r3, [r2, #8]
	    buffer_str[9] = integrPError;
 8004d6a:	4b1c      	ldr	r3, [pc, #112]	; (8004ddc <selfStabilizing+0x478>)
 8004d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d70:	b25a      	sxtb	r2, r3
 8004d72:	4b16      	ldr	r3, [pc, #88]	; (8004dcc <selfStabilizing+0x468>)
 8004d74:	725a      	strb	r2, [r3, #9]
	    buffer_str[10] = dMThY;
 8004d76:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <selfStabilizing+0x45c>)
 8004d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d7c:	b25a      	sxtb	r2, r3
 8004d7e:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <selfStabilizing+0x468>)
 8004d80:	729a      	strb	r2, [r3, #10]
	    buffer_str[11] = zval;
 8004d82:	4b17      	ldr	r3, [pc, #92]	; (8004de0 <selfStabilizing+0x47c>)
 8004d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d88:	b25a      	sxtb	r2, r3
 8004d8a:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <selfStabilizing+0x468>)
 8004d8c:	72da      	strb	r2, [r3, #11]
	    buffer_str[12] = iYawError;
 8004d8e:	4a0f      	ldr	r2, [pc, #60]	; (8004dcc <selfStabilizing+0x468>)
 8004d90:	797b      	ldrb	r3, [r7, #5]
 8004d92:	7313      	strb	r3, [r2, #12]
	    buffer_str[13] = iDeltaYError;
 8004d94:	4a0d      	ldr	r2, [pc, #52]	; (8004dcc <selfStabilizing+0x468>)
 8004d96:	793b      	ldrb	r3, [r7, #4]
 8004d98:	7353      	strb	r3, [r2, #13]
	    buffer_str[14] = integrYError;
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <selfStabilizing+0x480>)
 8004d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004da0:	b25a      	sxtb	r2, r3
 8004da2:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <selfStabilizing+0x468>)
 8004da4:	739a      	strb	r2, [r3, #14]
	    buffer_str[15] = dMThZ;
 8004da6:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <selfStabilizing+0x464>)
 8004da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dac:	b25a      	sxtb	r2, r3
 8004dae:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <selfStabilizing+0x468>)
 8004db0:	73da      	strb	r2, [r3, #15]

 }
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd90      	pop	{r4, r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	200005d0 	.word	0x200005d0
 8004dc0:	200005de 	.word	0x200005de
 8004dc4:	10624dd3 	.word	0x10624dd3
 8004dc8:	20000616 	.word	0x20000616
 8004dcc:	20000600 	.word	0x20000600
 8004dd0:	200005e3 	.word	0x200005e3
 8004dd4:	200004f6 	.word	0x200004f6
 8004dd8:	200005bc 	.word	0x200005bc
 8004ddc:	200004fc 	.word	0x200004fc
 8004de0:	200005ea 	.word	0x200005ea
 8004de4:	200004f4 	.word	0x200004f4

08004de8 <addrule>:

double mu(int8_t x, int8_t A) {
    return exp(-(pow(x - A, 2) / (2 * pow(30, 2))));
}

void addrule(int8_t fe, op_type op, int8_t fde, int8_t z) {
 8004de8:	b490      	push	{r4, r7}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4604      	mov	r4, r0
 8004df0:	4608      	mov	r0, r1
 8004df2:	4611      	mov	r1, r2
 8004df4:	461a      	mov	r2, r3
 8004df6:	4623      	mov	r3, r4
 8004df8:	71fb      	strb	r3, [r7, #7]
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	71bb      	strb	r3, [r7, #6]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	717b      	strb	r3, [r7, #5]
 8004e02:	4613      	mov	r3, r2
 8004e04:	713b      	strb	r3, [r7, #4]
    rules[numofrules].fe = fe;
 8004e06:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <addrule+0x6c>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4a12      	ldr	r2, [pc, #72]	; (8004e58 <addrule+0x70>)
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
    rules[numofrules].op = op;
 8004e14:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <addrule+0x6c>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	4a0f      	ldr	r2, [pc, #60]	; (8004e58 <addrule+0x70>)
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	79ba      	ldrb	r2, [r7, #6]
 8004e20:	705a      	strb	r2, [r3, #1]
    rules[numofrules].fde = fde;
 8004e22:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <addrule+0x6c>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	4a0c      	ldr	r2, [pc, #48]	; (8004e58 <addrule+0x70>)
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	797a      	ldrb	r2, [r7, #5]
 8004e2e:	709a      	strb	r2, [r3, #2]
    rules[numofrules].z = z;
 8004e30:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <addrule+0x6c>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	4a08      	ldr	r2, [pc, #32]	; (8004e58 <addrule+0x70>)
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	793a      	ldrb	r2, [r7, #4]
 8004e3c:	70da      	strb	r2, [r3, #3]
    numofrules++;
 8004e3e:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <addrule+0x6c>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	3301      	adds	r3, #1
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	4b03      	ldr	r3, [pc, #12]	; (8004e54 <addrule+0x6c>)
 8004e48:	701a      	strb	r2, [r3, #0]
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc90      	pop	{r4, r7}
 8004e52:	4770      	bx	lr
 8004e54:	20000508 	.word	0x20000508
 8004e58:	200004c4 	.word	0x200004c4

08004e5c <Fuzzy_Init>:

    //
    return summ_alpha_c / summ_alpha;
}

void Fuzzy_Init() {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
    numofrules = 0;
 8004e60:	4b2a      	ldr	r3, [pc, #168]	; (8004f0c <Fuzzy_Init+0xb0>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	701a      	strb	r2, [r3, #0]

    addrule(fNO, AND, fNO, fNO);
 8004e66:	2300      	movs	r3, #0
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	f7ff ffbb 	bl	8004de8 <addrule>
    addrule(fVLN, OR, fVLN, fVLP);
 8004e72:	237d      	movs	r3, #125	; 0x7d
 8004e74:	f06f 027c 	mvn.w	r2, #124	; 0x7c
 8004e78:	2101      	movs	r1, #1
 8004e7a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8004e7e:	f7ff ffb3 	bl	8004de8 <addrule>
    addrule(fVLP, OR, fVLP, fVLN);
 8004e82:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004e86:	227d      	movs	r2, #125	; 0x7d
 8004e88:	2101      	movs	r1, #1
 8004e8a:	207d      	movs	r0, #125	; 0x7d
 8004e8c:	f7ff ffac 	bl	8004de8 <addrule>
    addrule(fLN, AND, fSN, fVLP);
 8004e90:	237d      	movs	r3, #125	; 0x7d
 8004e92:	f06f 0213 	mvn.w	r2, #19
 8004e96:	2100      	movs	r1, #0
 8004e98:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8004e9c:	f7ff ffa4 	bl	8004de8 <addrule>
    addrule(fLP, AND, fSP, fVLN);
 8004ea0:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004ea4:	2214      	movs	r2, #20
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	205a      	movs	r0, #90	; 0x5a
 8004eaa:	f7ff ff9d 	bl	8004de8 <addrule>
    addrule(fSN, AND, fSN, fSP);
 8004eae:	2314      	movs	r3, #20
 8004eb0:	f06f 0213 	mvn.w	r2, #19
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	f06f 0013 	mvn.w	r0, #19
 8004eba:	f7ff ff95 	bl	8004de8 <addrule>
    addrule(fSP, AND, fSP, fSN);
 8004ebe:	f06f 0313 	mvn.w	r3, #19
 8004ec2:	2214      	movs	r2, #20
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	2014      	movs	r0, #20
 8004ec8:	f7ff ff8e 	bl	8004de8 <addrule>

    addrule(fMN, AND, fMP, fSP);
 8004ecc:	2314      	movs	r3, #20
 8004ece:	2237      	movs	r2, #55	; 0x37
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	f06f 0036 	mvn.w	r0, #54	; 0x36
 8004ed6:	f7ff ff87 	bl	8004de8 <addrule>
    addrule(fMN, AND, fMN, fLP);
 8004eda:	235a      	movs	r3, #90	; 0x5a
 8004edc:	f06f 0236 	mvn.w	r2, #54	; 0x36
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	f06f 0036 	mvn.w	r0, #54	; 0x36
 8004ee6:	f7ff ff7f 	bl	8004de8 <addrule>
    addrule(fMP, AND, fMN, fSN);
 8004eea:	f06f 0313 	mvn.w	r3, #19
 8004eee:	f06f 0236 	mvn.w	r2, #54	; 0x36
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	2037      	movs	r0, #55	; 0x37
 8004ef6:	f7ff ff77 	bl	8004de8 <addrule>
    addrule(fMP, AND, fMP, fLN);
 8004efa:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8004efe:	2237      	movs	r2, #55	; 0x37
 8004f00:	2100      	movs	r1, #0
 8004f02:	2037      	movs	r0, #55	; 0x37
 8004f04:	f7ff ff70 	bl	8004de8 <addrule>
}
 8004f08:	bf00      	nop
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20000508 	.word	0x20000508

08004f10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f16:	4a14      	ldr	r2, [pc, #80]	; (8004f68 <MX_GPIO_Init+0x58>)
 8004f18:	4b13      	ldr	r3, [pc, #76]	; (8004f68 <MX_GPIO_Init+0x58>)
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f043 0320 	orr.w	r3, r3, #32
 8004f20:	6193      	str	r3, [r2, #24]
 8004f22:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <MX_GPIO_Init+0x58>)
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f2e:	4a0e      	ldr	r2, [pc, #56]	; (8004f68 <MX_GPIO_Init+0x58>)
 8004f30:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <MX_GPIO_Init+0x58>)
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f043 0304 	orr.w	r3, r3, #4
 8004f38:	6193      	str	r3, [r2, #24]
 8004f3a:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <MX_GPIO_Init+0x58>)
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	60bb      	str	r3, [r7, #8]
 8004f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f46:	4a08      	ldr	r2, [pc, #32]	; (8004f68 <MX_GPIO_Init+0x58>)
 8004f48:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <MX_GPIO_Init+0x58>)
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	f043 0308 	orr.w	r3, r3, #8
 8004f50:	6193      	str	r3, [r2, #24]
 8004f52:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <MX_GPIO_Init+0x58>)
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	607b      	str	r3, [r7, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]

}
 8004f5e:	bf00      	nop
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr
 8004f68:	40021000 	.word	0x40021000

08004f6c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004f70:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <MX_I2C1_Init+0x50>)
 8004f72:	4a13      	ldr	r2, [pc, #76]	; (8004fc0 <MX_I2C1_Init+0x54>)
 8004f74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004f76:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <MX_I2C1_Init+0x50>)
 8004f78:	4a12      	ldr	r2, [pc, #72]	; (8004fc4 <MX_I2C1_Init+0x58>)
 8004f7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <MX_I2C1_Init+0x50>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004f82:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <MX_I2C1_Init+0x50>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f88:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <MX_I2C1_Init+0x50>)
 8004f8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004f90:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <MX_I2C1_Init+0x50>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004f96:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <MX_I2C1_Init+0x50>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f9c:	4b07      	ldr	r3, [pc, #28]	; (8004fbc <MX_I2C1_Init+0x50>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <MX_I2C1_Init+0x50>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004fa8:	4804      	ldr	r0, [pc, #16]	; (8004fbc <MX_I2C1_Init+0x50>)
 8004faa:	f7fc faef 	bl	800158c <HAL_I2C_Init>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004fb4:	f000 f9e6 	bl	8005384 <Error_Handler>
  }

}
 8004fb8:	bf00      	nop
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	2000050c 	.word	0x2000050c
 8004fc0:	40005400 	.word	0x40005400
 8004fc4:	00061a80 	.word	0x00061a80

08004fc8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8004fcc:	4b12      	ldr	r3, [pc, #72]	; (8005018 <MX_I2C2_Init+0x50>)
 8004fce:	4a13      	ldr	r2, [pc, #76]	; (800501c <MX_I2C2_Init+0x54>)
 8004fd0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004fd2:	4b11      	ldr	r3, [pc, #68]	; (8005018 <MX_I2C2_Init+0x50>)
 8004fd4:	4a12      	ldr	r2, [pc, #72]	; (8005020 <MX_I2C2_Init+0x58>)
 8004fd6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004fd8:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <MX_I2C2_Init+0x50>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004fde:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <MX_I2C2_Init+0x50>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <MX_I2C2_Init+0x50>)
 8004fe6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <MX_I2C2_Init+0x50>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004ff2:	4b09      	ldr	r3, [pc, #36]	; (8005018 <MX_I2C2_Init+0x50>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ff8:	4b07      	ldr	r3, [pc, #28]	; (8005018 <MX_I2C2_Init+0x50>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ffe:	4b06      	ldr	r3, [pc, #24]	; (8005018 <MX_I2C2_Init+0x50>)
 8005000:	2200      	movs	r2, #0
 8005002:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005004:	4804      	ldr	r0, [pc, #16]	; (8005018 <MX_I2C2_Init+0x50>)
 8005006:	f7fc fac1 	bl	800158c <HAL_I2C_Init>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005010:	f000 f9b8 	bl	8005384 <Error_Handler>
  }

}
 8005014:	bf00      	nop
 8005016:	bd80      	pop	{r7, pc}
 8005018:	20000560 	.word	0x20000560
 800501c:	40005800 	.word	0x40005800
 8005020:	000186a0 	.word	0x000186a0

08005024 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08a      	sub	sp, #40	; 0x28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800502c:	f107 0318 	add.w	r3, r7, #24
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	609a      	str	r2, [r3, #8]
 8005038:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a2b      	ldr	r2, [pc, #172]	; (80050ec <HAL_I2C_MspInit+0xc8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d124      	bne.n	800508e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005044:	4a2a      	ldr	r2, [pc, #168]	; (80050f0 <HAL_I2C_MspInit+0xcc>)
 8005046:	4b2a      	ldr	r3, [pc, #168]	; (80050f0 <HAL_I2C_MspInit+0xcc>)
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	f043 0308 	orr.w	r3, r3, #8
 800504e:	6193      	str	r3, [r2, #24]
 8005050:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <HAL_I2C_MspInit+0xcc>)
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800505c:	23c0      	movs	r3, #192	; 0xc0
 800505e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005060:	2312      	movs	r3, #18
 8005062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005064:	2303      	movs	r3, #3
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005068:	f107 0318 	add.w	r3, r7, #24
 800506c:	4619      	mov	r1, r3
 800506e:	4821      	ldr	r0, [pc, #132]	; (80050f4 <HAL_I2C_MspInit+0xd0>)
 8005070:	f7fc f92e 	bl	80012d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005074:	4a1e      	ldr	r2, [pc, #120]	; (80050f0 <HAL_I2C_MspInit+0xcc>)
 8005076:	4b1e      	ldr	r3, [pc, #120]	; (80050f0 <HAL_I2C_MspInit+0xcc>)
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800507e:	61d3      	str	r3, [r2, #28]
 8005080:	4b1b      	ldr	r3, [pc, #108]	; (80050f0 <HAL_I2C_MspInit+0xcc>)
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800508c:	e029      	b.n	80050e2 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a19      	ldr	r2, [pc, #100]	; (80050f8 <HAL_I2C_MspInit+0xd4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d124      	bne.n	80050e2 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005098:	4a15      	ldr	r2, [pc, #84]	; (80050f0 <HAL_I2C_MspInit+0xcc>)
 800509a:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <HAL_I2C_MspInit+0xcc>)
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f043 0308 	orr.w	r3, r3, #8
 80050a2:	6193      	str	r3, [r2, #24]
 80050a4:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <HAL_I2C_MspInit+0xcc>)
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	f003 0308 	and.w	r3, r3, #8
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80050b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80050b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050b6:	2312      	movs	r3, #18
 80050b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050ba:	2303      	movs	r3, #3
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050be:	f107 0318 	add.w	r3, r7, #24
 80050c2:	4619      	mov	r1, r3
 80050c4:	480b      	ldr	r0, [pc, #44]	; (80050f4 <HAL_I2C_MspInit+0xd0>)
 80050c6:	f7fc f903 	bl	80012d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80050ca:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <HAL_I2C_MspInit+0xcc>)
 80050cc:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <HAL_I2C_MspInit+0xcc>)
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050d4:	61d3      	str	r3, [r2, #28]
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <HAL_I2C_MspInit+0xcc>)
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050de:	60bb      	str	r3, [r7, #8]
 80050e0:	68bb      	ldr	r3, [r7, #8]
}
 80050e2:	bf00      	nop
 80050e4:	3728      	adds	r7, #40	; 0x28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40005400 	.word	0x40005400
 80050f0:	40021000 	.word	0x40021000
 80050f4:	40010c00 	.word	0x40010c00
 80050f8:	40005800 	.word	0x40005800

080050fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005100:	f7fb ff5a 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005104:	f000 f8a2 	bl	800524c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005108:	f7ff ff02 	bl	8004f10 <MX_GPIO_Init>
  MX_TIM2_Init();
 800510c:	f000 fd8a 	bl	8005c24 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005110:	f000 fe14 	bl	8005d3c <MX_TIM3_Init>
  MX_I2C1_Init();
 8005114:	f7ff ff2a 	bl	8004f6c <MX_I2C1_Init>
  MX_TIM4_Init();
 8005118:	f000 fe5e 	bl	8005dd8 <MX_TIM4_Init>
  MX_I2C2_Init();
 800511c:	f7ff ff54 	bl	8004fc8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  Accel_ini();
 8005120:	f7fe ff0c 	bl	8003f3c <Accel_ini>
  GyroCalibrate();
 8005124:	f7ff fa2a 	bl	800457c <GyroCalibrate>
   deriveGyro();
 8005128:	f7ff fa66 	bl	80045f8 <deriveGyro>
  Accel_ReadAcc();
 800512c:	f7fe fff4 	bl	8004118 <Accel_ReadAcc>
  SSD1306_Init();
 8005130:	f000 f92e 	bl	8005390 <SSD1306_Init>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_1);
 8005134:	2100      	movs	r1, #0
 8005136:	4837      	ldr	r0, [pc, #220]	; (8005214 <main+0x118>)
 8005138:	f7fe f8de 	bl	80032f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_2);
 800513c:	2104      	movs	r1, #4
 800513e:	4835      	ldr	r0, [pc, #212]	; (8005214 <main+0x118>)
 8005140:	f7fe f8da 	bl	80032f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_3);
 8005144:	2108      	movs	r1, #8
 8005146:	4833      	ldr	r0, [pc, #204]	; (8005214 <main+0x118>)
 8005148:	f7fe f8d6 	bl	80032f8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800514c:	4832      	ldr	r0, [pc, #200]	; (8005218 <main+0x11c>)
 800514e:	f7fe f884 	bl	800325a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8005152:	4832      	ldr	r0, [pc, #200]	; (800521c <main+0x120>)
 8005154:	f7fe f881 	bl	800325a <HAL_TIM_Base_Start_IT>
XGf = YGf = ZGf = 0;
 8005158:	4b31      	ldr	r3, [pc, #196]	; (8005220 <main+0x124>)
 800515a:	2200      	movs	r2, #0
 800515c:	801a      	strh	r2, [r3, #0]
 800515e:	4b30      	ldr	r3, [pc, #192]	; (8005220 <main+0x124>)
 8005160:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005164:	4b2f      	ldr	r3, [pc, #188]	; (8005224 <main+0x128>)
 8005166:	801a      	strh	r2, [r3, #0]
 8005168:	4b2e      	ldr	r3, [pc, #184]	; (8005224 <main+0x128>)
 800516a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800516e:	4b2e      	ldr	r3, [pc, #184]	; (8005228 <main+0x12c>)
 8005170:	801a      	strh	r2, [r3, #0]
Fuzzy_Init();
 8005172:	f7ff fe73 	bl	8004e5c <Fuzzy_Init>

uart_init();
 8005176:	f7ff fb2d 	bl	80047d4 <uart_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag)
 800517a:	4b2c      	ldr	r3, [pc, #176]	; (800522c <main+0x130>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0fb      	beq.n	800517a <main+0x7e>
	  {
	  flag = 0;
 8005182:	4b2a      	ldr	r3, [pc, #168]	; (800522c <main+0x130>)
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
		  ReadGyro();
 8005188:	f7ff f90a 	bl	80043a0 <ReadGyro>
		  Accel_ReadAcc();
 800518c:	f7fe ffc4 	bl	8004118 <Accel_ReadAcc>
		  selfStabilizing();
 8005190:	f7ff fbe8 	bl	8004964 <selfStabilizing>
		  write_CRC();
 8005194:	f7ff fbb4 	bl	8004900 <write_CRC>
		  data = buffer_str[0];
 8005198:	4b25      	ldr	r3, [pc, #148]	; (8005230 <main+0x134>)
 800519a:	f993 3000 	ldrsb.w	r3, [r3]
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	4b24      	ldr	r3, [pc, #144]	; (8005234 <main+0x138>)
 80051a2:	701a      	strb	r2, [r3, #0]
		  send_to_uart(data);
 80051a4:	4b23      	ldr	r3, [pc, #140]	; (8005234 <main+0x138>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff fb57 	bl	800485c <send_to_uart>
		  convertToChar(xval);
 80051ae:	4b22      	ldr	r3, [pc, #136]	; (8005238 <main+0x13c>)
 80051b0:	f993 3000 	ldrsb.w	r3, [r3]
 80051b4:	b21b      	sxth	r3, r3
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 f88e 	bl	80052d8 <convertToChar>
		 SSD1306_GotoXY(0, 20);
 80051bc:	2114      	movs	r1, #20
 80051be:	2000      	movs	r0, #0
 80051c0:	f000 fa3a 	bl	8005638 <SSD1306_GotoXY>
		 SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 80051c4:	2201      	movs	r2, #1
 80051c6:	491d      	ldr	r1, [pc, #116]	; (800523c <main+0x140>)
 80051c8:	481d      	ldr	r0, [pc, #116]	; (8005240 <main+0x144>)
 80051ca:	f000 fabd 	bl	8005748 <SSD1306_Puts>
		 convertToChar(yval);
 80051ce:	4b1d      	ldr	r3, [pc, #116]	; (8005244 <main+0x148>)
 80051d0:	f993 3000 	ldrsb.w	r3, [r3]
 80051d4:	b21b      	sxth	r3, r3
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 f87e 	bl	80052d8 <convertToChar>
		 SSD1306_GotoXY(80, 20);
 80051dc:	2114      	movs	r1, #20
 80051de:	2050      	movs	r0, #80	; 0x50
 80051e0:	f000 fa2a 	bl	8005638 <SSD1306_GotoXY>
		 SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 80051e4:	2201      	movs	r2, #1
 80051e6:	4915      	ldr	r1, [pc, #84]	; (800523c <main+0x140>)
 80051e8:	4815      	ldr	r0, [pc, #84]	; (8005240 <main+0x144>)
 80051ea:	f000 faad 	bl	8005748 <SSD1306_Puts>
		 convertToChar(zval);
 80051ee:	4b16      	ldr	r3, [pc, #88]	; (8005248 <main+0x14c>)
 80051f0:	f993 3000 	ldrsb.w	r3, [r3]
 80051f4:	b21b      	sxth	r3, r3
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 f86e 	bl	80052d8 <convertToChar>
		 SSD1306_GotoXY(45, 30);
 80051fc:	211e      	movs	r1, #30
 80051fe:	202d      	movs	r0, #45	; 0x2d
 8005200:	f000 fa1a 	bl	8005638 <SSD1306_GotoXY>
		 SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 8005204:	2201      	movs	r2, #1
 8005206:	490d      	ldr	r1, [pc, #52]	; (800523c <main+0x140>)
 8005208:	480d      	ldr	r0, [pc, #52]	; (8005240 <main+0x144>)
 800520a:	f000 fa9d 	bl	8005748 <SSD1306_Puts>
		 SSD1306_UpdateScreen();
 800520e:	f000 f97d 	bl	800550c <SSD1306_UpdateScreen>
	  if(flag)
 8005212:	e7b2      	b.n	800517a <main+0x7e>
 8005214:	2000069c 	.word	0x2000069c
 8005218:	2000065c 	.word	0x2000065c
 800521c:	2000061c 	.word	0x2000061c
 8005220:	200005d8 	.word	0x200005d8
 8005224:	200005c0 	.word	0x200005c0
 8005228:	200005ec 	.word	0x200005ec
 800522c:	200005b8 	.word	0x200005b8
 8005230:	20000600 	.word	0x20000600
 8005234:	200005e2 	.word	0x200005e2
 8005238:	200005e3 	.word	0x200005e3
 800523c:	20000008 	.word	0x20000008
 8005240:	200005f4 	.word	0x200005f4
 8005244:	200005bc 	.word	0x200005bc
 8005248:	200005ea 	.word	0x200005ea

0800524c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b090      	sub	sp, #64	; 0x40
 8005250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005252:	f107 0318 	add.w	r3, r7, #24
 8005256:	2228      	movs	r2, #40	; 0x28
 8005258:	2100      	movs	r1, #0
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fed8 	bl	8006010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005260:	1d3b      	adds	r3, r7, #4
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	605a      	str	r2, [r3, #4]
 8005268:	609a      	str	r2, [r3, #8]
 800526a:	60da      	str	r2, [r3, #12]
 800526c:	611a      	str	r2, [r3, #16]

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800526e:	2301      	movs	r3, #1
 8005270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005278:	2300      	movs	r3, #0
 800527a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800527c:	2301      	movs	r3, #1
 800527e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005280:	2302      	movs	r3, #2
 8005282:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005288:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800528a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800528e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005290:	f107 0318 	add.w	r3, r7, #24
 8005294:	4618      	mov	r0, r3
 8005296:	f7fd fba7 	bl	80029e8 <HAL_RCC_OscConfig>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80052a0:	f000 f870 	bl	8005384 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80052a4:	230f      	movs	r3, #15
 80052a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80052a8:	2302      	movs	r3, #2
 80052aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80052b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80052ba:	1d3b      	adds	r3, r7, #4
 80052bc:	2102      	movs	r1, #2
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fd fdf6 	bl	8002eb0 <HAL_RCC_ClockConfig>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80052ca:	f000 f85b 	bl	8005384 <Error_Handler>
  }
}
 80052ce:	bf00      	nop
 80052d0:	3740      	adds	r7, #64	; 0x40
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <convertToChar>:

/* USER CODE BEGIN 4 */
void convertToChar(int16_t data)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	4603      	mov	r3, r0
 80052e0:	80fb      	strh	r3, [r7, #6]
	int16_t number = data;
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	81fb      	strh	r3, [r7, #14]
	uint8_t neg = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	737b      	strb	r3, [r7, #13]
	if(number < 0)
 80052ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	da05      	bge.n	80052fe <convertToChar+0x26>
	{
		number = -number;
 80052f2:	89fb      	ldrh	r3, [r7, #14]
 80052f4:	425b      	negs	r3, r3
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	81fb      	strh	r3, [r7, #14]
		neg = 1;
 80052fa:	2301      	movs	r3, #1
 80052fc:	737b      	strb	r3, [r7, #13]
	}
	for(uint8_t i = 6; i --> 0 ;)
 80052fe:	2306      	movs	r3, #6
 8005300:	733b      	strb	r3, [r7, #12]
 8005302:	e01c      	b.n	800533e <convertToChar+0x66>
	{
		str[i] = (number % 10) + (unsigned char)'0';
 8005304:	7b38      	ldrb	r0, [r7, #12]
 8005306:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800530a:	4b1c      	ldr	r3, [pc, #112]	; (800537c <convertToChar+0xa4>)
 800530c:	fb83 1302 	smull	r1, r3, r3, r2
 8005310:	1099      	asrs	r1, r3, #2
 8005312:	17d3      	asrs	r3, r2, #31
 8005314:	1ac9      	subs	r1, r1, r3
 8005316:	460b      	mov	r3, r1
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	440b      	add	r3, r1
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	b21b      	sxth	r3, r3
 8005322:	b2db      	uxtb	r3, r3
 8005324:	3330      	adds	r3, #48	; 0x30
 8005326:	b2da      	uxtb	r2, r3
 8005328:	4b15      	ldr	r3, [pc, #84]	; (8005380 <convertToChar+0xa8>)
 800532a:	541a      	strb	r2, [r3, r0]
		number /= 10;
 800532c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005330:	4a12      	ldr	r2, [pc, #72]	; (800537c <convertToChar+0xa4>)
 8005332:	fb82 1203 	smull	r1, r2, r2, r3
 8005336:	1092      	asrs	r2, r2, #2
 8005338:	17db      	asrs	r3, r3, #31
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 6; i --> 0 ;)
 800533e:	7b3b      	ldrb	r3, [r7, #12]
 8005340:	1e5a      	subs	r2, r3, #1
 8005342:	733a      	strb	r2, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1dd      	bne.n	8005304 <convertToChar+0x2c>
	}
	if(neg)
 8005348:	7b7b      	ldrb	r3, [r7, #13]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d011      	beq.n	8005372 <convertToChar+0x9a>
	{
for(uint8_t j = 0; j < 6; j++)
 800534e:	2300      	movs	r3, #0
 8005350:	72fb      	strb	r3, [r7, #11]
 8005352:	7afb      	ldrb	r3, [r7, #11]
 8005354:	2b05      	cmp	r3, #5
 8005356:	d80a      	bhi.n	800536e <convertToChar+0x96>
{
	if(str[j + 1] != 0)
 8005358:	7afb      	ldrb	r3, [r7, #11]
 800535a:	3301      	adds	r3, #1
 800535c:	4a08      	ldr	r2, [pc, #32]	; (8005380 <convertToChar+0xa8>)
 800535e:	5cd3      	ldrb	r3, [r2, r3]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <convertToChar+0x94>
	str[j] = '-';
 8005364:	7afb      	ldrb	r3, [r7, #11]
 8005366:	4a06      	ldr	r2, [pc, #24]	; (8005380 <convertToChar+0xa8>)
 8005368:	212d      	movs	r1, #45	; 0x2d
 800536a:	54d1      	strb	r1, [r2, r3]
	break;
 800536c:	bf00      	nop
	}
neg = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	737b      	strb	r3, [r7, #13]
	}
}
 8005372:	bf00      	nop
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr
 800537c:	66666667 	.word	0x66666667
 8005380:	200005f4 	.word	0x200005f4

08005384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005388:	bf00      	nop
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr

08005390 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8005396:	f000 f9fd 	bl	8005794 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800539a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800539e:	2201      	movs	r2, #1
 80053a0:	2178      	movs	r1, #120	; 0x78
 80053a2:	4858      	ldr	r0, [pc, #352]	; (8005504 <SSD1306_Init+0x174>)
 80053a4:	f7fc fe50 	bl	8002048 <HAL_I2C_IsDeviceReady>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	e0a4      	b.n	80054fc <SSD1306_Init+0x16c>
	}

	/* A little delay */
	uint32_t p = 2500;
 80053b2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80053b6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80053b8:	e002      	b.n	80053c0 <SSD1306_Init+0x30>
		p--;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3b01      	subs	r3, #1
 80053be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f9      	bne.n	80053ba <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80053c6:	22ae      	movs	r2, #174	; 0xae
 80053c8:	2100      	movs	r1, #0
 80053ca:	2078      	movs	r0, #120	; 0x78
 80053cc:	f000 f9f6 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80053d0:	2220      	movs	r2, #32
 80053d2:	2100      	movs	r1, #0
 80053d4:	2078      	movs	r0, #120	; 0x78
 80053d6:	f000 f9f1 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80053da:	2210      	movs	r2, #16
 80053dc:	2100      	movs	r1, #0
 80053de:	2078      	movs	r0, #120	; 0x78
 80053e0:	f000 f9ec 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80053e4:	22b0      	movs	r2, #176	; 0xb0
 80053e6:	2100      	movs	r1, #0
 80053e8:	2078      	movs	r0, #120	; 0x78
 80053ea:	f000 f9e7 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80053ee:	22c8      	movs	r2, #200	; 0xc8
 80053f0:	2100      	movs	r1, #0
 80053f2:	2078      	movs	r0, #120	; 0x78
 80053f4:	f000 f9e2 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80053f8:	2200      	movs	r2, #0
 80053fa:	2100      	movs	r1, #0
 80053fc:	2078      	movs	r0, #120	; 0x78
 80053fe:	f000 f9dd 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8005402:	2210      	movs	r2, #16
 8005404:	2100      	movs	r1, #0
 8005406:	2078      	movs	r0, #120	; 0x78
 8005408:	f000 f9d8 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800540c:	2240      	movs	r2, #64	; 0x40
 800540e:	2100      	movs	r1, #0
 8005410:	2078      	movs	r0, #120	; 0x78
 8005412:	f000 f9d3 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8005416:	2281      	movs	r2, #129	; 0x81
 8005418:	2100      	movs	r1, #0
 800541a:	2078      	movs	r0, #120	; 0x78
 800541c:	f000 f9ce 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8005420:	22ff      	movs	r2, #255	; 0xff
 8005422:	2100      	movs	r1, #0
 8005424:	2078      	movs	r0, #120	; 0x78
 8005426:	f000 f9c9 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800542a:	22a1      	movs	r2, #161	; 0xa1
 800542c:	2100      	movs	r1, #0
 800542e:	2078      	movs	r0, #120	; 0x78
 8005430:	f000 f9c4 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8005434:	22a6      	movs	r2, #166	; 0xa6
 8005436:	2100      	movs	r1, #0
 8005438:	2078      	movs	r0, #120	; 0x78
 800543a:	f000 f9bf 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800543e:	22a8      	movs	r2, #168	; 0xa8
 8005440:	2100      	movs	r1, #0
 8005442:	2078      	movs	r0, #120	; 0x78
 8005444:	f000 f9ba 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8005448:	223f      	movs	r2, #63	; 0x3f
 800544a:	2100      	movs	r1, #0
 800544c:	2078      	movs	r0, #120	; 0x78
 800544e:	f000 f9b5 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005452:	22a4      	movs	r2, #164	; 0xa4
 8005454:	2100      	movs	r1, #0
 8005456:	2078      	movs	r0, #120	; 0x78
 8005458:	f000 f9b0 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800545c:	22d3      	movs	r2, #211	; 0xd3
 800545e:	2100      	movs	r1, #0
 8005460:	2078      	movs	r0, #120	; 0x78
 8005462:	f000 f9ab 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8005466:	2200      	movs	r2, #0
 8005468:	2100      	movs	r1, #0
 800546a:	2078      	movs	r0, #120	; 0x78
 800546c:	f000 f9a6 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8005470:	22d5      	movs	r2, #213	; 0xd5
 8005472:	2100      	movs	r1, #0
 8005474:	2078      	movs	r0, #120	; 0x78
 8005476:	f000 f9a1 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800547a:	22f0      	movs	r2, #240	; 0xf0
 800547c:	2100      	movs	r1, #0
 800547e:	2078      	movs	r0, #120	; 0x78
 8005480:	f000 f99c 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8005484:	22d9      	movs	r2, #217	; 0xd9
 8005486:	2100      	movs	r1, #0
 8005488:	2078      	movs	r0, #120	; 0x78
 800548a:	f000 f997 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800548e:	2222      	movs	r2, #34	; 0x22
 8005490:	2100      	movs	r1, #0
 8005492:	2078      	movs	r0, #120	; 0x78
 8005494:	f000 f992 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8005498:	22da      	movs	r2, #218	; 0xda
 800549a:	2100      	movs	r1, #0
 800549c:	2078      	movs	r0, #120	; 0x78
 800549e:	f000 f98d 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80054a2:	2212      	movs	r2, #18
 80054a4:	2100      	movs	r1, #0
 80054a6:	2078      	movs	r0, #120	; 0x78
 80054a8:	f000 f988 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80054ac:	22db      	movs	r2, #219	; 0xdb
 80054ae:	2100      	movs	r1, #0
 80054b0:	2078      	movs	r0, #120	; 0x78
 80054b2:	f000 f983 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80054b6:	2220      	movs	r2, #32
 80054b8:	2100      	movs	r1, #0
 80054ba:	2078      	movs	r0, #120	; 0x78
 80054bc:	f000 f97e 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80054c0:	228d      	movs	r2, #141	; 0x8d
 80054c2:	2100      	movs	r1, #0
 80054c4:	2078      	movs	r0, #120	; 0x78
 80054c6:	f000 f979 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80054ca:	2214      	movs	r2, #20
 80054cc:	2100      	movs	r1, #0
 80054ce:	2078      	movs	r0, #120	; 0x78
 80054d0:	f000 f974 	bl	80057bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80054d4:	22af      	movs	r2, #175	; 0xaf
 80054d6:	2100      	movs	r1, #0
 80054d8:	2078      	movs	r0, #120	; 0x78
 80054da:	f000 f96f 	bl	80057bc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80054de:	2000      	movs	r0, #0
 80054e0:	f000 f82c 	bl	800553c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80054e4:	f000 f812 	bl	800550c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80054e8:	4b07      	ldr	r3, [pc, #28]	; (8005508 <SSD1306_Init+0x178>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80054ee:	4b06      	ldr	r3, [pc, #24]	; (8005508 <SSD1306_Init+0x178>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80054f4:	4b04      	ldr	r3, [pc, #16]	; (8005508 <SSD1306_Init+0x178>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80054fa:	2301      	movs	r3, #1
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	20000560 	.word	0x20000560
 8005508:	200004a0 	.word	0x200004a0

0800550c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af02      	add	r7, sp, #8
	SSD1306_Buffer_all[0] = 0x40;
 8005512:	4b08      	ldr	r3, [pc, #32]	; (8005534 <SSD1306_UpdateScreen+0x28>)
 8005514:	2240      	movs	r2, #64	; 0x40
 8005516:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, SSD1306_I2C_ADDR, SSD1306_Buffer_all, SSD1306_WIDTH * SSD1306_HEIGHT / 8 + 1, 1000);
 8005518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	f240 4301 	movw	r3, #1025	; 0x401
 8005522:	4a04      	ldr	r2, [pc, #16]	; (8005534 <SSD1306_UpdateScreen+0x28>)
 8005524:	2178      	movs	r1, #120	; 0x78
 8005526:	4804      	ldr	r0, [pc, #16]	; (8005538 <SSD1306_UpdateScreen+0x2c>)
 8005528:	f7fc f934 	bl	8001794 <HAL_I2C_Master_Transmit>
}
 800552c:	bf00      	nop
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	2000009c 	.word	0x2000009c
 8005538:	20000560 	.word	0x20000560

0800553c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(uint8_t color) {
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	4603      	mov	r3, r0
 8005544:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, SSD1306_WIDTH * SSD1306_HEIGHT / 8);
 8005546:	4b08      	ldr	r3, [pc, #32]	; (8005568 <SSD1306_Fill+0x2c>)
 8005548:	6818      	ldr	r0, [r3, #0]
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <SSD1306_Fill+0x18>
 8005550:	2300      	movs	r3, #0
 8005552:	e000      	b.n	8005556 <SSD1306_Fill+0x1a>
 8005554:	23ff      	movs	r3, #255	; 0xff
 8005556:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800555a:	4619      	mov	r1, r3
 800555c:	f000 fd58 	bl	8006010 <memset>
}
 8005560:	bf00      	nop
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20000010 	.word	0x20000010

0800556c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, uint8_t color) {
 800556c:	b490      	push	{r4, r7}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	80fb      	strh	r3, [r7, #6]
 8005576:	460b      	mov	r3, r1
 8005578:	80bb      	strh	r3, [r7, #4]
 800557a:	4613      	mov	r3, r2
 800557c:	70fb      	strb	r3, [r7, #3]
	if (
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	2b7f      	cmp	r3, #127	; 0x7f
 8005582:	d850      	bhi.n	8005626 <SSD1306_DrawPixel+0xba>
		x >= SSD1306_WIDTH ||
 8005584:	88bb      	ldrh	r3, [r7, #4]
 8005586:	2b3f      	cmp	r3, #63	; 0x3f
 8005588:	d84d      	bhi.n	8005626 <SSD1306_DrawPixel+0xba>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800558a:	4b29      	ldr	r3, [pc, #164]	; (8005630 <SSD1306_DrawPixel+0xc4>)
 800558c:	791b      	ldrb	r3, [r3, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d006      	beq.n	80055a0 <SSD1306_DrawPixel+0x34>
		color = (uint8_t)!color;
 8005592:	78fb      	ldrb	r3, [r7, #3]
 8005594:	2b00      	cmp	r3, #0
 8005596:	bf0c      	ite	eq
 8005598:	2301      	moveq	r3, #1
 800559a:	2300      	movne	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d11e      	bne.n	80055e4 <SSD1306_DrawPixel+0x78>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80055a6:	4b23      	ldr	r3, [pc, #140]	; (8005634 <SSD1306_DrawPixel+0xc8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	88f9      	ldrh	r1, [r7, #6]
 80055ac:	88ba      	ldrh	r2, [r7, #4]
 80055ae:	08d2      	lsrs	r2, r2, #3
 80055b0:	b294      	uxth	r4, r2
 80055b2:	4622      	mov	r2, r4
 80055b4:	01d2      	lsls	r2, r2, #7
 80055b6:	440a      	add	r2, r1
 80055b8:	4413      	add	r3, r2
 80055ba:	4a1e      	ldr	r2, [pc, #120]	; (8005634 <SSD1306_DrawPixel+0xc8>)
 80055bc:	6812      	ldr	r2, [r2, #0]
 80055be:	88f8      	ldrh	r0, [r7, #6]
 80055c0:	4621      	mov	r1, r4
 80055c2:	01c9      	lsls	r1, r1, #7
 80055c4:	4401      	add	r1, r0
 80055c6:	440a      	add	r2, r1
 80055c8:	7812      	ldrb	r2, [r2, #0]
 80055ca:	b251      	sxtb	r1, r2
 80055cc:	88ba      	ldrh	r2, [r7, #4]
 80055ce:	f002 0207 	and.w	r2, r2, #7
 80055d2:	2001      	movs	r0, #1
 80055d4:	fa00 f202 	lsl.w	r2, r0, r2
 80055d8:	b252      	sxtb	r2, r2
 80055da:	430a      	orrs	r2, r1
 80055dc:	b252      	sxtb	r2, r2
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	e021      	b.n	8005628 <SSD1306_DrawPixel+0xbc>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80055e4:	4b13      	ldr	r3, [pc, #76]	; (8005634 <SSD1306_DrawPixel+0xc8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	88f9      	ldrh	r1, [r7, #6]
 80055ea:	88ba      	ldrh	r2, [r7, #4]
 80055ec:	08d2      	lsrs	r2, r2, #3
 80055ee:	b294      	uxth	r4, r2
 80055f0:	4622      	mov	r2, r4
 80055f2:	01d2      	lsls	r2, r2, #7
 80055f4:	440a      	add	r2, r1
 80055f6:	4413      	add	r3, r2
 80055f8:	4a0e      	ldr	r2, [pc, #56]	; (8005634 <SSD1306_DrawPixel+0xc8>)
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	88f8      	ldrh	r0, [r7, #6]
 80055fe:	4621      	mov	r1, r4
 8005600:	01c9      	lsls	r1, r1, #7
 8005602:	4401      	add	r1, r0
 8005604:	440a      	add	r2, r1
 8005606:	7812      	ldrb	r2, [r2, #0]
 8005608:	b251      	sxtb	r1, r2
 800560a:	88ba      	ldrh	r2, [r7, #4]
 800560c:	f002 0207 	and.w	r2, r2, #7
 8005610:	2001      	movs	r0, #1
 8005612:	fa00 f202 	lsl.w	r2, r0, r2
 8005616:	b252      	sxtb	r2, r2
 8005618:	43d2      	mvns	r2, r2
 800561a:	b252      	sxtb	r2, r2
 800561c:	400a      	ands	r2, r1
 800561e:	b252      	sxtb	r2, r2
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	e000      	b.n	8005628 <SSD1306_DrawPixel+0xbc>
		return;
 8005626:	bf00      	nop
	}
}
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bc90      	pop	{r4, r7}
 800562e:	4770      	bx	lr
 8005630:	200004a0 	.word	0x200004a0
 8005634:	20000010 	.word	0x20000010

08005638 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	4603      	mov	r3, r0
 8005640:	460a      	mov	r2, r1
 8005642:	80fb      	strh	r3, [r7, #6]
 8005644:	4613      	mov	r3, r2
 8005646:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8005648:	4a05      	ldr	r2, [pc, #20]	; (8005660 <SSD1306_GotoXY+0x28>)
 800564a:	88fb      	ldrh	r3, [r7, #6]
 800564c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800564e:	4a04      	ldr	r2, [pc, #16]	; (8005660 <SSD1306_GotoXY+0x28>)
 8005650:	88bb      	ldrh	r3, [r7, #4]
 8005652:	8053      	strh	r3, [r2, #2]
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	200004a0 	.word	0x200004a0

08005664 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, uint8_t color) {
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	6039      	str	r1, [r7, #0]
 800566e:	71fb      	strb	r3, [r7, #7]
 8005670:	4613      	mov	r3, r2
 8005672:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	b = 0;
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	e04e      	b.n	800571c <SSD1306_Putc+0xb8>
		for (j = 0; j < Font->FontWidth; j++) {
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e042      	b.n	800570a <SSD1306_Putc+0xa6>
			if ((Font->data[ch*Font->CharBytes + b/8] >> b%8) & 1) {
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	79fb      	ldrb	r3, [r7, #7]
 800568a:	6839      	ldr	r1, [r7, #0]
 800568c:	7889      	ldrb	r1, [r1, #2]
 800568e:	fb01 f303 	mul.w	r3, r1, r3
 8005692:	4619      	mov	r1, r3
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	08db      	lsrs	r3, r3, #3
 8005698:	440b      	add	r3, r1
 800569a:	4413      	add	r3, r2
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	fa42 f303 	asr.w	r3, r2, r3
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d010      	beq.n	80056d4 <SSD1306_Putc+0x70>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (uint8_t) color);
 80056b2:	4b24      	ldr	r3, [pc, #144]	; (8005744 <SSD1306_Putc+0xe0>)
 80056b4:	881a      	ldrh	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	4413      	add	r3, r2
 80056bc:	b298      	uxth	r0, r3
 80056be:	4b21      	ldr	r3, [pc, #132]	; (8005744 <SSD1306_Putc+0xe0>)
 80056c0:	885a      	ldrh	r2, [r3, #2]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	4413      	add	r3, r2
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	79ba      	ldrb	r2, [r7, #6]
 80056cc:	4619      	mov	r1, r3
 80056ce:	f7ff ff4d 	bl	800556c <SSD1306_DrawPixel>
 80056d2:	e014      	b.n	80056fe <SSD1306_Putc+0x9a>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (uint8_t)!color);
 80056d4:	4b1b      	ldr	r3, [pc, #108]	; (8005744 <SSD1306_Putc+0xe0>)
 80056d6:	881a      	ldrh	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	4413      	add	r3, r2
 80056de:	b298      	uxth	r0, r3
 80056e0:	4b18      	ldr	r3, [pc, #96]	; (8005744 <SSD1306_Putc+0xe0>)
 80056e2:	885a      	ldrh	r2, [r3, #2]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	4413      	add	r3, r2
 80056ea:	b299      	uxth	r1, r3
 80056ec:	79bb      	ldrb	r3, [r7, #6]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	bf0c      	ite	eq
 80056f2:	2301      	moveq	r3, #1
 80056f4:	2300      	movne	r3, #0
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	461a      	mov	r2, r3
 80056fa:	f7ff ff37 	bl	800556c <SSD1306_DrawPixel>
			}
			b++;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	3301      	adds	r3, #1
 8005702:	613b      	str	r3, [r7, #16]
		for (j = 0; j < Font->FontWidth; j++) {
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3301      	adds	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	429a      	cmp	r2, r3
 8005714:	d8b6      	bhi.n	8005684 <SSD1306_Putc+0x20>
	for (i = 0; i < Font->FontHeight; i++) {
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	3301      	adds	r3, #1
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	785b      	ldrb	r3, [r3, #1]
 8005720:	461a      	mov	r2, r3
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	429a      	cmp	r2, r3
 8005726:	d8aa      	bhi.n	800567e <SSD1306_Putc+0x1a>
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8005728:	4b06      	ldr	r3, [pc, #24]	; (8005744 <SSD1306_Putc+0xe0>)
 800572a:	881a      	ldrh	r2, [r3, #0]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	b29b      	uxth	r3, r3
 8005732:	4413      	add	r3, r2
 8005734:	b29a      	uxth	r2, r3
 8005736:	4b03      	ldr	r3, [pc, #12]	; (8005744 <SSD1306_Putc+0xe0>)
 8005738:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800573a:	79fb      	ldrb	r3, [r7, #7]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	200004a0 	.word	0x200004a0

08005748 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, uint8_t color) {
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	4613      	mov	r3, r2
 8005754:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8005756:	e012      	b.n	800577e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	79fa      	ldrb	r2, [r7, #7]
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff ff7f 	bl	8005664 <SSD1306_Putc>
 8005766:	4603      	mov	r3, r0
 8005768:	461a      	mov	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d002      	beq.n	8005778 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	e008      	b.n	800578a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3301      	adds	r3, #1
 800577c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e8      	bne.n	8005758 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	781b      	ldrb	r3, [r3, #0]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <ssd1306_I2C_Init+0x24>)
 800579c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800579e:	e002      	b.n	80057a6 <ssd1306_I2C_Init+0x12>
		p--;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1f9      	bne.n	80057a0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc80      	pop	{r7}
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	0003d090 	.word	0x0003d090

080057bc <ssd1306_I2C_Write>:
	HAL_I2C_Master_Transmit(&hi2c2, address, &reg, 1, 100);
	HAL_I2C_Master_Transmit_DMA(&hi2c2, address, data, count);
}


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	4603      	mov	r3, r0
 80057c4:	71fb      	strb	r3, [r7, #7]
 80057c6:	460b      	mov	r3, r1
 80057c8:	71bb      	strb	r3, [r7, #6]
 80057ca:	4613      	mov	r3, r2
 80057cc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80057ce:	79bb      	ldrb	r3, [r7, #6]
 80057d0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80057d2:	797b      	ldrb	r3, [r7, #5]
 80057d4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	b299      	uxth	r1, r3
 80057da:	f107 020c 	add.w	r2, r7, #12
 80057de:	230a      	movs	r3, #10
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	2302      	movs	r3, #2
 80057e4:	4803      	ldr	r0, [pc, #12]	; (80057f4 <ssd1306_I2C_Write+0x38>)
 80057e6:	f7fb ffd5 	bl	8001794 <HAL_I2C_Master_Transmit>
}
 80057ea:	bf00      	nop
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000560 	.word	0x20000560

080057f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80057fe:	4a15      	ldr	r2, [pc, #84]	; (8005854 <HAL_MspInit+0x5c>)
 8005800:	4b14      	ldr	r3, [pc, #80]	; (8005854 <HAL_MspInit+0x5c>)
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	6193      	str	r3, [r2, #24]
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <HAL_MspInit+0x5c>)
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	60bb      	str	r3, [r7, #8]
 8005814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005816:	4a0f      	ldr	r2, [pc, #60]	; (8005854 <HAL_MspInit+0x5c>)
 8005818:	4b0e      	ldr	r3, [pc, #56]	; (8005854 <HAL_MspInit+0x5c>)
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005820:	61d3      	str	r3, [r2, #28]
 8005822:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <HAL_MspInit+0x5c>)
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800582a:	607b      	str	r3, [r7, #4]
 800582c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800582e:	4b0a      	ldr	r3, [pc, #40]	; (8005858 <HAL_MspInit+0x60>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	4a04      	ldr	r2, [pc, #16]	; (8005858 <HAL_MspInit+0x60>)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800584a:	bf00      	nop
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr
 8005854:	40021000 	.word	0x40021000
 8005858:	40010000 	.word	0x40010000

0800585c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005860:	bf00      	nop
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr

08005868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800586c:	e7fe      	b.n	800586c <HardFault_Handler+0x4>

0800586e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800586e:	b480      	push	{r7}
 8005870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005872:	e7fe      	b.n	8005872 <MemManage_Handler+0x4>

08005874 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005878:	e7fe      	b.n	8005878 <BusFault_Handler+0x4>

0800587a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800587a:	b480      	push	{r7}
 800587c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800587e:	e7fe      	b.n	800587e <UsageFault_Handler+0x4>

08005880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005884:	bf00      	nop
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr

0800588c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005890:	bf00      	nop
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr

08005898 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800589c:	bf00      	nop
 800589e:	46bd      	mov	sp, r7
 80058a0:	bc80      	pop	{r7}
 80058a2:	4770      	bx	lr

080058a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058a8:	f7fb fbcc 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058ac:	bf00      	nop
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80058b0:	b5b0      	push	{r4, r5, r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

val = 0;
 80058b4:	4baf      	ldr	r3, [pc, #700]	; (8005b74 <TIM3_IRQHandler+0x2c4>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	801a      	strh	r2, [r3, #0]
	if(dMThZ != 0)
 80058ba:	4baf      	ldr	r3, [pc, #700]	; (8005b78 <TIM3_IRQHandler+0x2c8>)
 80058bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00f      	beq.n	80058e4 <TIM3_IRQHandler+0x34>
			val = -dMThZ*5 + 1500;
 80058c4:	4bac      	ldr	r3, [pc, #688]	; (8005b78 <TIM3_IRQHandler+0x2c8>)
 80058c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	0392      	lsls	r2, r2, #14
 80058d0:	1ad2      	subs	r2, r2, r3
 80058d2:	0092      	lsls	r2, r2, #2
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80058dc:	b29a      	uxth	r2, r3
 80058de:	4ba5      	ldr	r3, [pc, #660]	; (8005b74 <TIM3_IRQHandler+0x2c4>)
 80058e0:	801a      	strh	r2, [r3, #0]
 80058e2:	e003      	b.n	80058ec <TIM3_IRQHandler+0x3c>
	else
		val = 1500;
 80058e4:	4ba3      	ldr	r3, [pc, #652]	; (8005b74 <TIM3_IRQHandler+0x2c4>)
 80058e6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80058ea:	801a      	strh	r2, [r3, #0]

	val1 = val2 = val3 = val;
 80058ec:	4ba1      	ldr	r3, [pc, #644]	; (8005b74 <TIM3_IRQHandler+0x2c4>)
 80058ee:	881a      	ldrh	r2, [r3, #0]
 80058f0:	4ba2      	ldr	r3, [pc, #648]	; (8005b7c <TIM3_IRQHandler+0x2cc>)
 80058f2:	801a      	strh	r2, [r3, #0]
 80058f4:	4ba1      	ldr	r3, [pc, #644]	; (8005b7c <TIM3_IRQHandler+0x2cc>)
 80058f6:	881a      	ldrh	r2, [r3, #0]
 80058f8:	4ba1      	ldr	r3, [pc, #644]	; (8005b80 <TIM3_IRQHandler+0x2d0>)
 80058fa:	801a      	strh	r2, [r3, #0]
 80058fc:	4ba0      	ldr	r3, [pc, #640]	; (8005b80 <TIM3_IRQHandler+0x2d0>)
 80058fe:	881a      	ldrh	r2, [r3, #0]
 8005900:	4ba0      	ldr	r3, [pc, #640]	; (8005b84 <TIM3_IRQHandler+0x2d4>)
 8005902:	801a      	strh	r2, [r3, #0]

	if(dMThX != 0)
 8005904:	4ba0      	ldr	r3, [pc, #640]	; (8005b88 <TIM3_IRQHandler+0x2d8>)
 8005906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d03f      	beq.n	800598e <TIM3_IRQHandler+0xde>
	{
		val3 += (-1 * dMThX/5*4) * 5;
 800590e:	4b9e      	ldr	r3, [pc, #632]	; (8005b88 <TIM3_IRQHandler+0x2d8>)
 8005910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005914:	425b      	negs	r3, r3
 8005916:	4a9d      	ldr	r2, [pc, #628]	; (8005b8c <TIM3_IRQHandler+0x2dc>)
 8005918:	fb82 1203 	smull	r1, r2, r2, r3
 800591c:	1052      	asrs	r2, r2, #1
 800591e:	17db      	asrs	r3, r3, #31
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	b29b      	uxth	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	0092      	lsls	r2, r2, #2
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	b29a      	uxth	r2, r3
 800592e:	4b93      	ldr	r3, [pc, #588]	; (8005b7c <TIM3_IRQHandler+0x2cc>)
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	4413      	add	r3, r2
 8005934:	b29a      	uxth	r2, r3
 8005936:	4b91      	ldr	r3, [pc, #580]	; (8005b7c <TIM3_IRQHandler+0x2cc>)
 8005938:	801a      	strh	r2, [r3, #0]

		val1 += -dMThX/5/2*5;
 800593a:	4b93      	ldr	r3, [pc, #588]	; (8005b88 <TIM3_IRQHandler+0x2d8>)
 800593c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005940:	425b      	negs	r3, r3
 8005942:	4a92      	ldr	r2, [pc, #584]	; (8005b8c <TIM3_IRQHandler+0x2dc>)
 8005944:	fb82 1203 	smull	r1, r2, r2, r3
 8005948:	1092      	asrs	r2, r2, #2
 800594a:	17db      	asrs	r3, r3, #31
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	b29b      	uxth	r3, r3
 8005950:	461a      	mov	r2, r3
 8005952:	0092      	lsls	r2, r2, #2
 8005954:	4413      	add	r3, r2
 8005956:	b29a      	uxth	r2, r3
 8005958:	4b8a      	ldr	r3, [pc, #552]	; (8005b84 <TIM3_IRQHandler+0x2d4>)
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	4413      	add	r3, r2
 800595e:	b29a      	uxth	r2, r3
 8005960:	4b88      	ldr	r3, [pc, #544]	; (8005b84 <TIM3_IRQHandler+0x2d4>)
 8005962:	801a      	strh	r2, [r3, #0]
		val2 += dMThX/5/2 * 5;
 8005964:	4b88      	ldr	r3, [pc, #544]	; (8005b88 <TIM3_IRQHandler+0x2d8>)
 8005966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800596a:	4a88      	ldr	r2, [pc, #544]	; (8005b8c <TIM3_IRQHandler+0x2dc>)
 800596c:	fb82 1203 	smull	r1, r2, r2, r3
 8005970:	1092      	asrs	r2, r2, #2
 8005972:	17db      	asrs	r3, r3, #31
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	b21b      	sxth	r3, r3
 8005978:	b29b      	uxth	r3, r3
 800597a:	461a      	mov	r2, r3
 800597c:	0092      	lsls	r2, r2, #2
 800597e:	4413      	add	r3, r2
 8005980:	b29a      	uxth	r2, r3
 8005982:	4b7f      	ldr	r3, [pc, #508]	; (8005b80 <TIM3_IRQHandler+0x2d0>)
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	4413      	add	r3, r2
 8005988:	b29a      	uxth	r2, r3
 800598a:	4b7d      	ldr	r3, [pc, #500]	; (8005b80 <TIM3_IRQHandler+0x2d0>)
 800598c:	801a      	strh	r2, [r3, #0]
	}
	if(dMThY != 0)
 800598e:	4b80      	ldr	r3, [pc, #512]	; (8005b90 <TIM3_IRQHandler+0x2e0>)
 8005990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d056      	beq.n	8005a46 <TIM3_IRQHandler+0x196>
	{
		val1 += -dMThY*0.5* 5;
 8005998:	4b7a      	ldr	r3, [pc, #488]	; (8005b84 <TIM3_IRQHandler+0x2d4>)
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	4618      	mov	r0, r3
 800599e:	f7fa fd29 	bl	80003f4 <__aeabi_i2d>
 80059a2:	4604      	mov	r4, r0
 80059a4:	460d      	mov	r5, r1
 80059a6:	4b7a      	ldr	r3, [pc, #488]	; (8005b90 <TIM3_IRQHandler+0x2e0>)
 80059a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059ac:	425b      	negs	r3, r3
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fa fd20 	bl	80003f4 <__aeabi_i2d>
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	4b76      	ldr	r3, [pc, #472]	; (8005b94 <TIM3_IRQHandler+0x2e4>)
 80059ba:	f7fa fd81 	bl	80004c0 <__aeabi_dmul>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4610      	mov	r0, r2
 80059c4:	4619      	mov	r1, r3
 80059c6:	f04f 0200 	mov.w	r2, #0
 80059ca:	4b73      	ldr	r3, [pc, #460]	; (8005b98 <TIM3_IRQHandler+0x2e8>)
 80059cc:	f7fa fd78 	bl	80004c0 <__aeabi_dmul>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4620      	mov	r0, r4
 80059d6:	4629      	mov	r1, r5
 80059d8:	f7fa fbc0 	bl	800015c <__adddf3>
 80059dc:	4603      	mov	r3, r0
 80059de:	460c      	mov	r4, r1
 80059e0:	4618      	mov	r0, r3
 80059e2:	4621      	mov	r1, r4
 80059e4:	f7fb f844 	bl	8000a70 <__aeabi_d2uiz>
 80059e8:	4603      	mov	r3, r0
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	4b65      	ldr	r3, [pc, #404]	; (8005b84 <TIM3_IRQHandler+0x2d4>)
 80059ee:	801a      	strh	r2, [r3, #0]
		val3 += dMThY*0.5 * 5;
 80059f0:	4b62      	ldr	r3, [pc, #392]	; (8005b7c <TIM3_IRQHandler+0x2cc>)
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fa fcfd 	bl	80003f4 <__aeabi_i2d>
 80059fa:	4604      	mov	r4, r0
 80059fc:	460d      	mov	r5, r1
 80059fe:	4b64      	ldr	r3, [pc, #400]	; (8005b90 <TIM3_IRQHandler+0x2e0>)
 8005a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fa fcf5 	bl	80003f4 <__aeabi_i2d>
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	4b61      	ldr	r3, [pc, #388]	; (8005b94 <TIM3_IRQHandler+0x2e4>)
 8005a10:	f7fa fd56 	bl	80004c0 <__aeabi_dmul>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	4b5d      	ldr	r3, [pc, #372]	; (8005b98 <TIM3_IRQHandler+0x2e8>)
 8005a22:	f7fa fd4d 	bl	80004c0 <__aeabi_dmul>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	4629      	mov	r1, r5
 8005a2e:	f7fa fb95 	bl	800015c <__adddf3>
 8005a32:	4603      	mov	r3, r0
 8005a34:	460c      	mov	r4, r1
 8005a36:	4618      	mov	r0, r3
 8005a38:	4621      	mov	r1, r4
 8005a3a:	f7fb f819 	bl	8000a70 <__aeabi_d2uiz>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	4b4e      	ldr	r3, [pc, #312]	; (8005b7c <TIM3_IRQHandler+0x2cc>)
 8005a44:	801a      	strh	r2, [r3, #0]
		//val1 += dMThY * 5;
	}
	if(val1 > 2000)
 8005a46:	4b4f      	ldr	r3, [pc, #316]	; (8005b84 <TIM3_IRQHandler+0x2d4>)
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005a4e:	d903      	bls.n	8005a58 <TIM3_IRQHandler+0x1a8>
		val1 = 2000;
 8005a50:	4b4c      	ldr	r3, [pc, #304]	; (8005b84 <TIM3_IRQHandler+0x2d4>)
 8005a52:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005a56:	801a      	strh	r2, [r3, #0]
	if(val2 > 2000)
 8005a58:	4b49      	ldr	r3, [pc, #292]	; (8005b80 <TIM3_IRQHandler+0x2d0>)
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005a60:	d903      	bls.n	8005a6a <TIM3_IRQHandler+0x1ba>
		val2 = 2000;
 8005a62:	4b47      	ldr	r3, [pc, #284]	; (8005b80 <TIM3_IRQHandler+0x2d0>)
 8005a64:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005a68:	801a      	strh	r2, [r3, #0]
	if(val3 > 2000)
 8005a6a:	4b44      	ldr	r3, [pc, #272]	; (8005b7c <TIM3_IRQHandler+0x2cc>)
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005a72:	d903      	bls.n	8005a7c <TIM3_IRQHandler+0x1cc>
		val3 = 2000;
 8005a74:	4b41      	ldr	r3, [pc, #260]	; (8005b7c <TIM3_IRQHandler+0x2cc>)
 8005a76:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005a7a:	801a      	strh	r2, [r3, #0]

	if(val1 < TIM2->CCR1)
 8005a7c:	4b41      	ldr	r3, [pc, #260]	; (8005b84 <TIM3_IRQHandler+0x2d4>)
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d207      	bcs.n	8005a9c <TIM3_IRQHandler+0x1ec>
		TIM2->CCR1 = TIM2->CCR1 - 1;
 8005a8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a96:	3b01      	subs	r3, #1
 8005a98:	6353      	str	r3, [r2, #52]	; 0x34
 8005a9a:	e01c      	b.n	8005ad6 <TIM3_IRQHandler+0x226>
	else if(val1 > TIM2->CCR1)
 8005a9c:	4b39      	ldr	r3, [pc, #228]	; (8005b84 <TIM3_IRQHandler+0x2d4>)
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d907      	bls.n	8005abc <TIM3_IRQHandler+0x20c>
		TIM2->CCR1 = TIM2->CCR1 + 1;
 8005aac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	6353      	str	r3, [r2, #52]	; 0x34
 8005aba:	e00c      	b.n	8005ad6 <TIM3_IRQHandler+0x226>
	else if(val1 == TIM2->CCR1)
 8005abc:	4b31      	ldr	r3, [pc, #196]	; (8005b84 <TIM3_IRQHandler+0x2d4>)
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d104      	bne.n	8005ad6 <TIM3_IRQHandler+0x226>
	TIM2->CCR1 = val1;
 8005acc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ad0:	4a2c      	ldr	r2, [pc, #176]	; (8005b84 <TIM3_IRQHandler+0x2d4>)
 8005ad2:	8812      	ldrh	r2, [r2, #0]
 8005ad4:	635a      	str	r2, [r3, #52]	; 0x34

	if(val2 < TIM2->CCR2)
 8005ad6:	4b2a      	ldr	r3, [pc, #168]	; (8005b80 <TIM3_IRQHandler+0x2d0>)
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d207      	bcs.n	8005af6 <TIM3_IRQHandler+0x246>
			TIM2->CCR2 = TIM2->CCR2 - 1;
 8005ae6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	3b01      	subs	r3, #1
 8005af2:	6393      	str	r3, [r2, #56]	; 0x38
 8005af4:	e014      	b.n	8005b20 <TIM3_IRQHandler+0x270>
		else if(val2 > TIM2->CCR2)
 8005af6:	4b22      	ldr	r3, [pc, #136]	; (8005b80 <TIM3_IRQHandler+0x2d0>)
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d907      	bls.n	8005b16 <TIM3_IRQHandler+0x266>
			TIM2->CCR2 = TIM2->CCR2 + 1;
 8005b06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	3301      	adds	r3, #1
 8005b12:	6393      	str	r3, [r2, #56]	; 0x38
 8005b14:	e004      	b.n	8005b20 <TIM3_IRQHandler+0x270>
		else
		TIM2->CCR2 = val2;
 8005b16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b1a:	4a19      	ldr	r2, [pc, #100]	; (8005b80 <TIM3_IRQHandler+0x2d0>)
 8005b1c:	8812      	ldrh	r2, [r2, #0]
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38

	if(val3 < TIM2->CCR3)
 8005b20:	4b16      	ldr	r3, [pc, #88]	; (8005b7c <TIM3_IRQHandler+0x2cc>)
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d207      	bcs.n	8005b40 <TIM3_IRQHandler+0x290>
				TIM2->CCR3 = TIM2->CCR3 - 1;
 8005b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005b3e:	e014      	b.n	8005b6a <TIM3_IRQHandler+0x2ba>
			else if(val3 > TIM2->CCR3)
 8005b40:	4b0e      	ldr	r3, [pc, #56]	; (8005b7c <TIM3_IRQHandler+0x2cc>)
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	461a      	mov	r2, r3
 8005b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d907      	bls.n	8005b60 <TIM3_IRQHandler+0x2b0>
				TIM2->CCR3 = TIM2->CCR3 + 1;
 8005b50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005b5e:	e004      	b.n	8005b6a <TIM3_IRQHandler+0x2ba>
			else
			TIM2->CCR3 = val3;
 8005b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b64:	4a05      	ldr	r2, [pc, #20]	; (8005b7c <TIM3_IRQHandler+0x2cc>)
 8005b66:	8812      	ldrh	r2, [r2, #0]
 8005b68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005b6a:	480c      	ldr	r0, [pc, #48]	; (8005b9c <TIM3_IRQHandler+0x2ec>)
 8005b6c:	f7fd fbec 	bl	8003348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005b70:	bf00      	nop
 8005b72:	bdb0      	pop	{r4, r5, r7, pc}
 8005b74:	200005d2 	.word	0x200005d2
 8005b78:	20000616 	.word	0x20000616
 8005b7c:	200005dc 	.word	0x200005dc
 8005b80:	200005d6 	.word	0x200005d6
 8005b84:	200005fc 	.word	0x200005fc
 8005b88:	200005d0 	.word	0x200005d0
 8005b8c:	66666667 	.word	0x66666667
 8005b90:	200005de 	.word	0x200005de
 8005b94:	3fe00000 	.word	0x3fe00000
 8005b98:	40140000 	.word	0x40140000
 8005b9c:	2000065c 	.word	0x2000065c

08005ba0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	flag = 1;
 8005ba4:	4b03      	ldr	r3, [pc, #12]	; (8005bb4 <TIM4_IRQHandler+0x14>)
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005baa:	4803      	ldr	r0, [pc, #12]	; (8005bb8 <TIM4_IRQHandler+0x18>)
 8005bac:	f7fd fbcc 	bl	8003348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005bb0:	bf00      	nop
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	200005b8 	.word	0x200005b8
 8005bb8:	2000061c 	.word	0x2000061c

08005bbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005bc0:	4a15      	ldr	r2, [pc, #84]	; (8005c18 <SystemInit+0x5c>)
 8005bc2:	4b15      	ldr	r3, [pc, #84]	; (8005c18 <SystemInit+0x5c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f043 0301 	orr.w	r3, r3, #1
 8005bca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005bcc:	4912      	ldr	r1, [pc, #72]	; (8005c18 <SystemInit+0x5c>)
 8005bce:	4b12      	ldr	r3, [pc, #72]	; (8005c18 <SystemInit+0x5c>)
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <SystemInit+0x60>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005bd8:	4a0f      	ldr	r2, [pc, #60]	; (8005c18 <SystemInit+0x5c>)
 8005bda:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <SystemInit+0x5c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005be6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005be8:	4a0b      	ldr	r2, [pc, #44]	; (8005c18 <SystemInit+0x5c>)
 8005bea:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <SystemInit+0x5c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bf2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005bf4:	4a08      	ldr	r2, [pc, #32]	; (8005c18 <SystemInit+0x5c>)
 8005bf6:	4b08      	ldr	r3, [pc, #32]	; (8005c18 <SystemInit+0x5c>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005bfe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005c00:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <SystemInit+0x5c>)
 8005c02:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005c06:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005c08:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <SystemInit+0x64>)
 8005c0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c0e:	609a      	str	r2, [r3, #8]
#endif 
}
 8005c10:	bf00      	nop
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc80      	pop	{r7}
 8005c16:	4770      	bx	lr
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	f8ff0000 	.word	0xf8ff0000
 8005c20:	e000ed00 	.word	0xe000ed00

08005c24 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08e      	sub	sp, #56	; 0x38
 8005c28:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	605a      	str	r2, [r3, #4]
 8005c34:	609a      	str	r2, [r3, #8]
 8005c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c38:	f107 0320 	add.w	r3, r7, #32
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c42:	1d3b      	adds	r3, r7, #4
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	605a      	str	r2, [r3, #4]
 8005c4a:	609a      	str	r2, [r3, #8]
 8005c4c:	60da      	str	r2, [r3, #12]
 8005c4e:	611a      	str	r2, [r3, #16]
 8005c50:	615a      	str	r2, [r3, #20]
 8005c52:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8005c54:	4b38      	ldr	r3, [pc, #224]	; (8005d38 <MX_TIM2_Init+0x114>)
 8005c56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8005c5c:	4b36      	ldr	r3, [pc, #216]	; (8005d38 <MX_TIM2_Init+0x114>)
 8005c5e:	2247      	movs	r2, #71	; 0x47
 8005c60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c62:	4b35      	ldr	r3, [pc, #212]	; (8005d38 <MX_TIM2_Init+0x114>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8005c68:	4b33      	ldr	r3, [pc, #204]	; (8005d38 <MX_TIM2_Init+0x114>)
 8005c6a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005c6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c70:	4b31      	ldr	r3, [pc, #196]	; (8005d38 <MX_TIM2_Init+0x114>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c76:	4b30      	ldr	r3, [pc, #192]	; (8005d38 <MX_TIM2_Init+0x114>)
 8005c78:	2280      	movs	r2, #128	; 0x80
 8005c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005c7c:	482e      	ldr	r0, [pc, #184]	; (8005d38 <MX_TIM2_Init+0x114>)
 8005c7e:	f7fd fac1 	bl	8003204 <HAL_TIM_Base_Init>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8005c88:	f7ff fb7c 	bl	8005384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c96:	4619      	mov	r1, r3
 8005c98:	4827      	ldr	r0, [pc, #156]	; (8005d38 <MX_TIM2_Init+0x114>)
 8005c9a:	f7fd fd23 	bl	80036e4 <HAL_TIM_ConfigClockSource>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8005ca4:	f7ff fb6e 	bl	8005384 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005ca8:	4823      	ldr	r0, [pc, #140]	; (8005d38 <MX_TIM2_Init+0x114>)
 8005caa:	f7fd faf0 	bl	800328e <HAL_TIM_PWM_Init>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8005cb4:	f7ff fb66 	bl	8005384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005cc0:	f107 0320 	add.w	r3, r7, #32
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	481c      	ldr	r0, [pc, #112]	; (8005d38 <MX_TIM2_Init+0x114>)
 8005cc8:	f7fe f8e1 	bl	8003e8e <HAL_TIMEx_MasterConfigSynchronization>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8005cd2:	f7ff fb57 	bl	8005384 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005cd6:	2360      	movs	r3, #96	; 0x60
 8005cd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8005cda:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005cde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ce8:	1d3b      	adds	r3, r7, #4
 8005cea:	2200      	movs	r2, #0
 8005cec:	4619      	mov	r1, r3
 8005cee:	4812      	ldr	r0, [pc, #72]	; (8005d38 <MX_TIM2_Init+0x114>)
 8005cf0:	f7fd fc32 	bl	8003558 <HAL_TIM_PWM_ConfigChannel>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8005cfa:	f7ff fb43 	bl	8005384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005cfe:	1d3b      	adds	r3, r7, #4
 8005d00:	2204      	movs	r2, #4
 8005d02:	4619      	mov	r1, r3
 8005d04:	480c      	ldr	r0, [pc, #48]	; (8005d38 <MX_TIM2_Init+0x114>)
 8005d06:	f7fd fc27 	bl	8003558 <HAL_TIM_PWM_ConfigChannel>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8005d10:	f7ff fb38 	bl	8005384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005d14:	1d3b      	adds	r3, r7, #4
 8005d16:	2208      	movs	r2, #8
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4807      	ldr	r0, [pc, #28]	; (8005d38 <MX_TIM2_Init+0x114>)
 8005d1c:	f7fd fc1c 	bl	8003558 <HAL_TIM_PWM_ConfigChannel>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8005d26:	f7ff fb2d 	bl	8005384 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8005d2a:	4803      	ldr	r0, [pc, #12]	; (8005d38 <MX_TIM2_Init+0x114>)
 8005d2c:	f000 f8f6 	bl	8005f1c <HAL_TIM_MspPostInit>

}
 8005d30:	bf00      	nop
 8005d32:	3738      	adds	r7, #56	; 0x38
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	2000069c 	.word	0x2000069c

08005d3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d42:	f107 0308 	add.w	r3, r7, #8
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	605a      	str	r2, [r3, #4]
 8005d4c:	609a      	str	r2, [r3, #8]
 8005d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d50:	463b      	mov	r3, r7
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8005d58:	4b1d      	ldr	r3, [pc, #116]	; (8005dd0 <MX_TIM3_Init+0x94>)
 8005d5a:	4a1e      	ldr	r2, [pc, #120]	; (8005dd4 <MX_TIM3_Init+0x98>)
 8005d5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8005d5e:	4b1c      	ldr	r3, [pc, #112]	; (8005dd0 <MX_TIM3_Init+0x94>)
 8005d60:	2247      	movs	r2, #71	; 0x47
 8005d62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d64:	4b1a      	ldr	r3, [pc, #104]	; (8005dd0 <MX_TIM3_Init+0x94>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8005d6a:	4b19      	ldr	r3, [pc, #100]	; (8005dd0 <MX_TIM3_Init+0x94>)
 8005d6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005d70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d72:	4b17      	ldr	r3, [pc, #92]	; (8005dd0 <MX_TIM3_Init+0x94>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d78:	4b15      	ldr	r3, [pc, #84]	; (8005dd0 <MX_TIM3_Init+0x94>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005d7e:	4814      	ldr	r0, [pc, #80]	; (8005dd0 <MX_TIM3_Init+0x94>)
 8005d80:	f7fd fa40 	bl	8003204 <HAL_TIM_Base_Init>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8005d8a:	f7ff fafb 	bl	8005384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005d94:	f107 0308 	add.w	r3, r7, #8
 8005d98:	4619      	mov	r1, r3
 8005d9a:	480d      	ldr	r0, [pc, #52]	; (8005dd0 <MX_TIM3_Init+0x94>)
 8005d9c:	f7fd fca2 	bl	80036e4 <HAL_TIM_ConfigClockSource>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8005da6:	f7ff faed 	bl	8005384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005daa:	2300      	movs	r3, #0
 8005dac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dae:	2300      	movs	r3, #0
 8005db0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005db2:	463b      	mov	r3, r7
 8005db4:	4619      	mov	r1, r3
 8005db6:	4806      	ldr	r0, [pc, #24]	; (8005dd0 <MX_TIM3_Init+0x94>)
 8005db8:	f7fe f869 	bl	8003e8e <HAL_TIMEx_MasterConfigSynchronization>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8005dc2:	f7ff fadf 	bl	8005384 <Error_Handler>
  }

}
 8005dc6:	bf00      	nop
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	2000065c 	.word	0x2000065c
 8005dd4:	40000400 	.word	0x40000400

08005dd8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005dde:	f107 0308 	add.w	r3, r7, #8
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	605a      	str	r2, [r3, #4]
 8005de8:	609a      	str	r2, [r3, #8]
 8005dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dec:	463b      	mov	r3, r7
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8005df4:	4b1d      	ldr	r3, [pc, #116]	; (8005e6c <MX_TIM4_Init+0x94>)
 8005df6:	4a1e      	ldr	r2, [pc, #120]	; (8005e70 <MX_TIM4_Init+0x98>)
 8005df8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720-1;
 8005dfa:	4b1c      	ldr	r3, [pc, #112]	; (8005e6c <MX_TIM4_Init+0x94>)
 8005dfc:	f240 22cf 	movw	r2, #719	; 0x2cf
 8005e00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e02:	4b1a      	ldr	r3, [pc, #104]	; (8005e6c <MX_TIM4_Init+0x94>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8005e08:	4b18      	ldr	r3, [pc, #96]	; (8005e6c <MX_TIM4_Init+0x94>)
 8005e0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005e0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e10:	4b16      	ldr	r3, [pc, #88]	; (8005e6c <MX_TIM4_Init+0x94>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e16:	4b15      	ldr	r3, [pc, #84]	; (8005e6c <MX_TIM4_Init+0x94>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005e1c:	4813      	ldr	r0, [pc, #76]	; (8005e6c <MX_TIM4_Init+0x94>)
 8005e1e:	f7fd f9f1 	bl	8003204 <HAL_TIM_Base_Init>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8005e28:	f7ff faac 	bl	8005384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005e32:	f107 0308 	add.w	r3, r7, #8
 8005e36:	4619      	mov	r1, r3
 8005e38:	480c      	ldr	r0, [pc, #48]	; (8005e6c <MX_TIM4_Init+0x94>)
 8005e3a:	f7fd fc53 	bl	80036e4 <HAL_TIM_ConfigClockSource>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8005e44:	f7ff fa9e 	bl	8005384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005e50:	463b      	mov	r3, r7
 8005e52:	4619      	mov	r1, r3
 8005e54:	4805      	ldr	r0, [pc, #20]	; (8005e6c <MX_TIM4_Init+0x94>)
 8005e56:	f7fe f81a 	bl	8003e8e <HAL_TIMEx_MasterConfigSynchronization>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8005e60:	f7ff fa90 	bl	8005384 <Error_Handler>
  }

}
 8005e64:	bf00      	nop
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	2000061c 	.word	0x2000061c
 8005e70:	40000800 	.word	0x40000800

08005e74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e84:	d10c      	bne.n	8005ea0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005e86:	4a22      	ldr	r2, [pc, #136]	; (8005f10 <HAL_TIM_Base_MspInit+0x9c>)
 8005e88:	4b21      	ldr	r3, [pc, #132]	; (8005f10 <HAL_TIM_Base_MspInit+0x9c>)
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	f043 0301 	orr.w	r3, r3, #1
 8005e90:	61d3      	str	r3, [r2, #28]
 8005e92:	4b1f      	ldr	r3, [pc, #124]	; (8005f10 <HAL_TIM_Base_MspInit+0x9c>)
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005e9e:	e032      	b.n	8005f06 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a1b      	ldr	r2, [pc, #108]	; (8005f14 <HAL_TIM_Base_MspInit+0xa0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d114      	bne.n	8005ed4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005eaa:	4a19      	ldr	r2, [pc, #100]	; (8005f10 <HAL_TIM_Base_MspInit+0x9c>)
 8005eac:	4b18      	ldr	r3, [pc, #96]	; (8005f10 <HAL_TIM_Base_MspInit+0x9c>)
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f043 0302 	orr.w	r3, r3, #2
 8005eb4:	61d3      	str	r3, [r2, #28]
 8005eb6:	4b16      	ldr	r3, [pc, #88]	; (8005f10 <HAL_TIM_Base_MspInit+0x9c>)
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	613b      	str	r3, [r7, #16]
 8005ec0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	201d      	movs	r0, #29
 8005ec8:	f7fb f9cb 	bl	8001262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005ecc:	201d      	movs	r0, #29
 8005ece:	f7fb f9e4 	bl	800129a <HAL_NVIC_EnableIRQ>
}
 8005ed2:	e018      	b.n	8005f06 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a0f      	ldr	r2, [pc, #60]	; (8005f18 <HAL_TIM_Base_MspInit+0xa4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d113      	bne.n	8005f06 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005ede:	4a0c      	ldr	r2, [pc, #48]	; (8005f10 <HAL_TIM_Base_MspInit+0x9c>)
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <HAL_TIM_Base_MspInit+0x9c>)
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	f043 0304 	orr.w	r3, r3, #4
 8005ee8:	61d3      	str	r3, [r2, #28]
 8005eea:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <HAL_TIM_Base_MspInit+0x9c>)
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	2100      	movs	r1, #0
 8005efa:	201e      	movs	r0, #30
 8005efc:	f7fb f9b1 	bl	8001262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005f00:	201e      	movs	r0, #30
 8005f02:	f7fb f9ca 	bl	800129a <HAL_NVIC_EnableIRQ>
}
 8005f06:	bf00      	nop
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	40021000 	.word	0x40021000
 8005f14:	40000400 	.word	0x40000400
 8005f18:	40000800 	.word	0x40000800

08005f1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b088      	sub	sp, #32
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f24:	f107 0310 	add.w	r3, r7, #16
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	605a      	str	r2, [r3, #4]
 8005f2e:	609a      	str	r2, [r3, #8]
 8005f30:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3a:	d117      	bne.n	8005f6c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f3c:	4a0d      	ldr	r2, [pc, #52]	; (8005f74 <HAL_TIM_MspPostInit+0x58>)
 8005f3e:	4b0d      	ldr	r3, [pc, #52]	; (8005f74 <HAL_TIM_MspPostInit+0x58>)
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f043 0304 	orr.w	r3, r3, #4
 8005f46:	6193      	str	r3, [r2, #24]
 8005f48:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <HAL_TIM_MspPostInit+0x58>)
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005f54:	2307      	movs	r3, #7
 8005f56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f60:	f107 0310 	add.w	r3, r7, #16
 8005f64:	4619      	mov	r1, r3
 8005f66:	4804      	ldr	r0, [pc, #16]	; (8005f78 <HAL_TIM_MspPostInit+0x5c>)
 8005f68:	f7fb f9b2 	bl	80012d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005f6c:	bf00      	nop
 8005f6e:	3720      	adds	r7, #32
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40021000 	.word	0x40021000
 8005f78:	40010800 	.word	0x40010800

08005f7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005f7c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005f7e:	e003      	b.n	8005f88 <LoopCopyDataInit>

08005f80 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005f80:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005f82:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005f84:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005f86:	3104      	adds	r1, #4

08005f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005f88:	480a      	ldr	r0, [pc, #40]	; (8005fb4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005f8a:	4b0b      	ldr	r3, [pc, #44]	; (8005fb8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005f8c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005f8e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005f90:	d3f6      	bcc.n	8005f80 <CopyDataInit>
  ldr r2, =_sbss
 8005f92:	4a0a      	ldr	r2, [pc, #40]	; (8005fbc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005f94:	e002      	b.n	8005f9c <LoopFillZerobss>

08005f96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005f96:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005f98:	f842 3b04 	str.w	r3, [r2], #4

08005f9c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005f9c:	4b08      	ldr	r3, [pc, #32]	; (8005fc0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005f9e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005fa0:	d3f9      	bcc.n	8005f96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005fa2:	f7ff fe0b 	bl	8005bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005fa6:	f000 f80f 	bl	8005fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005faa:	f7ff f8a7 	bl	80050fc <main>
  bx lr
 8005fae:	4770      	bx	lr
  ldr r3, =_sidata
 8005fb0:	080080b8 	.word	0x080080b8
  ldr r0, =_sdata
 8005fb4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005fb8:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8005fbc:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8005fc0:	200006dc 	.word	0x200006dc

08005fc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005fc4:	e7fe      	b.n	8005fc4 <ADC1_2_IRQHandler>
	...

08005fc8 <__libc_init_array>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	2500      	movs	r5, #0
 8005fcc:	4e0c      	ldr	r6, [pc, #48]	; (8006000 <__libc_init_array+0x38>)
 8005fce:	4c0d      	ldr	r4, [pc, #52]	; (8006004 <__libc_init_array+0x3c>)
 8005fd0:	1ba4      	subs	r4, r4, r6
 8005fd2:	10a4      	asrs	r4, r4, #2
 8005fd4:	42a5      	cmp	r5, r4
 8005fd6:	d109      	bne.n	8005fec <__libc_init_array+0x24>
 8005fd8:	f001 fb02 	bl	80075e0 <_init>
 8005fdc:	2500      	movs	r5, #0
 8005fde:	4e0a      	ldr	r6, [pc, #40]	; (8006008 <__libc_init_array+0x40>)
 8005fe0:	4c0a      	ldr	r4, [pc, #40]	; (800600c <__libc_init_array+0x44>)
 8005fe2:	1ba4      	subs	r4, r4, r6
 8005fe4:	10a4      	asrs	r4, r4, #2
 8005fe6:	42a5      	cmp	r5, r4
 8005fe8:	d105      	bne.n	8005ff6 <__libc_init_array+0x2e>
 8005fea:	bd70      	pop	{r4, r5, r6, pc}
 8005fec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ff0:	4798      	blx	r3
 8005ff2:	3501      	adds	r5, #1
 8005ff4:	e7ee      	b.n	8005fd4 <__libc_init_array+0xc>
 8005ff6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ffa:	4798      	blx	r3
 8005ffc:	3501      	adds	r5, #1
 8005ffe:	e7f2      	b.n	8005fe6 <__libc_init_array+0x1e>
 8006000:	080080b0 	.word	0x080080b0
 8006004:	080080b0 	.word	0x080080b0
 8006008:	080080b0 	.word	0x080080b0
 800600c:	080080b4 	.word	0x080080b4

08006010 <memset>:
 8006010:	4603      	mov	r3, r0
 8006012:	4402      	add	r2, r0
 8006014:	4293      	cmp	r3, r2
 8006016:	d100      	bne.n	800601a <memset+0xa>
 8006018:	4770      	bx	lr
 800601a:	f803 1b01 	strb.w	r1, [r3], #1
 800601e:	e7f9      	b.n	8006014 <memset+0x4>

08006020 <atan2>:
 8006020:	f000 b9ba 	b.w	8006398 <__ieee754_atan2>

08006024 <pow>:
 8006024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006028:	b08f      	sub	sp, #60	; 0x3c
 800602a:	461d      	mov	r5, r3
 800602c:	4680      	mov	r8, r0
 800602e:	4689      	mov	r9, r1
 8006030:	4614      	mov	r4, r2
 8006032:	f000 fa8d 	bl	8006550 <__ieee754_pow>
 8006036:	4fa5      	ldr	r7, [pc, #660]	; (80062cc <pow+0x2a8>)
 8006038:	e9cd 0100 	strd	r0, r1, [sp]
 800603c:	f997 3000 	ldrsb.w	r3, [r7]
 8006040:	463e      	mov	r6, r7
 8006042:	9302      	str	r3, [sp, #8]
 8006044:	3301      	adds	r3, #1
 8006046:	d05f      	beq.n	8006108 <pow+0xe4>
 8006048:	4622      	mov	r2, r4
 800604a:	462b      	mov	r3, r5
 800604c:	4620      	mov	r0, r4
 800604e:	4629      	mov	r1, r5
 8006050:	f7fa fcd0 	bl	80009f4 <__aeabi_dcmpun>
 8006054:	4682      	mov	sl, r0
 8006056:	2800      	cmp	r0, #0
 8006058:	d156      	bne.n	8006108 <pow+0xe4>
 800605a:	4642      	mov	r2, r8
 800605c:	464b      	mov	r3, r9
 800605e:	4640      	mov	r0, r8
 8006060:	4649      	mov	r1, r9
 8006062:	f7fa fcc7 	bl	80009f4 <__aeabi_dcmpun>
 8006066:	9003      	str	r0, [sp, #12]
 8006068:	b1e8      	cbz	r0, 80060a6 <pow+0x82>
 800606a:	2200      	movs	r2, #0
 800606c:	2300      	movs	r3, #0
 800606e:	4620      	mov	r0, r4
 8006070:	4629      	mov	r1, r5
 8006072:	f7fa fc8d 	bl	8000990 <__aeabi_dcmpeq>
 8006076:	2800      	cmp	r0, #0
 8006078:	d046      	beq.n	8006108 <pow+0xe4>
 800607a:	2301      	movs	r3, #1
 800607c:	2200      	movs	r2, #0
 800607e:	9304      	str	r3, [sp, #16]
 8006080:	4b93      	ldr	r3, [pc, #588]	; (80062d0 <pow+0x2ac>)
 8006082:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006086:	9305      	str	r3, [sp, #20]
 8006088:	4b92      	ldr	r3, [pc, #584]	; (80062d4 <pow+0x2b0>)
 800608a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800608e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006092:	9b02      	ldr	r3, [sp, #8]
 8006094:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d031      	beq.n	8006100 <pow+0xdc>
 800609c:	a804      	add	r0, sp, #16
 800609e:	f001 f992 	bl	80073c6 <matherr>
 80060a2:	bb38      	cbnz	r0, 80060f4 <pow+0xd0>
 80060a4:	e058      	b.n	8006158 <pow+0x134>
 80060a6:	f04f 0a00 	mov.w	sl, #0
 80060aa:	f04f 0b00 	mov.w	fp, #0
 80060ae:	4652      	mov	r2, sl
 80060b0:	465b      	mov	r3, fp
 80060b2:	4640      	mov	r0, r8
 80060b4:	4649      	mov	r1, r9
 80060b6:	f7fa fc6b 	bl	8000990 <__aeabi_dcmpeq>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d051      	beq.n	8006162 <pow+0x13e>
 80060be:	4652      	mov	r2, sl
 80060c0:	465b      	mov	r3, fp
 80060c2:	4620      	mov	r0, r4
 80060c4:	4629      	mov	r1, r5
 80060c6:	f7fa fc63 	bl	8000990 <__aeabi_dcmpeq>
 80060ca:	4606      	mov	r6, r0
 80060cc:	b308      	cbz	r0, 8006112 <pow+0xee>
 80060ce:	2301      	movs	r3, #1
 80060d0:	9304      	str	r3, [sp, #16]
 80060d2:	4b7f      	ldr	r3, [pc, #508]	; (80062d0 <pow+0x2ac>)
 80060d4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80060d8:	9305      	str	r3, [sp, #20]
 80060da:	9b03      	ldr	r3, [sp, #12]
 80060dc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80060e0:	930c      	str	r3, [sp, #48]	; 0x30
 80060e2:	9b02      	ldr	r3, [sp, #8]
 80060e4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0d7      	beq.n	800609c <pow+0x78>
 80060ec:	2200      	movs	r2, #0
 80060ee:	4b79      	ldr	r3, [pc, #484]	; (80062d4 <pow+0x2b0>)
 80060f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80060f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060f6:	b11b      	cbz	r3, 8006100 <pow+0xdc>
 80060f8:	f001 fa6c 	bl	80075d4 <__errno>
 80060fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060fe:	6003      	str	r3, [r0, #0]
 8006100:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8006104:	e88d 0018 	stmia.w	sp, {r3, r4}
 8006108:	e9dd 0100 	ldrd	r0, r1, [sp]
 800610c:	b00f      	add	sp, #60	; 0x3c
 800610e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006112:	4620      	mov	r0, r4
 8006114:	4629      	mov	r1, r5
 8006116:	f001 f950 	bl	80073ba <finite>
 800611a:	2800      	cmp	r0, #0
 800611c:	d0f4      	beq.n	8006108 <pow+0xe4>
 800611e:	4652      	mov	r2, sl
 8006120:	465b      	mov	r3, fp
 8006122:	4620      	mov	r0, r4
 8006124:	4629      	mov	r1, r5
 8006126:	f7fa fc3d 	bl	80009a4 <__aeabi_dcmplt>
 800612a:	2800      	cmp	r0, #0
 800612c:	d0ec      	beq.n	8006108 <pow+0xe4>
 800612e:	2301      	movs	r3, #1
 8006130:	9304      	str	r3, [sp, #16]
 8006132:	4b67      	ldr	r3, [pc, #412]	; (80062d0 <pow+0x2ac>)
 8006134:	960c      	str	r6, [sp, #48]	; 0x30
 8006136:	9305      	str	r3, [sp, #20]
 8006138:	f997 3000 	ldrsb.w	r3, [r7]
 800613c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006140:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006144:	b913      	cbnz	r3, 800614c <pow+0x128>
 8006146:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800614a:	e7a7      	b.n	800609c <pow+0x78>
 800614c:	2000      	movs	r0, #0
 800614e:	4962      	ldr	r1, [pc, #392]	; (80062d8 <pow+0x2b4>)
 8006150:	2b02      	cmp	r3, #2
 8006152:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006156:	d1a1      	bne.n	800609c <pow+0x78>
 8006158:	f001 fa3c 	bl	80075d4 <__errno>
 800615c:	2321      	movs	r3, #33	; 0x21
 800615e:	6003      	str	r3, [r0, #0]
 8006160:	e7c8      	b.n	80060f4 <pow+0xd0>
 8006162:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006166:	f001 f928 	bl	80073ba <finite>
 800616a:	9002      	str	r0, [sp, #8]
 800616c:	2800      	cmp	r0, #0
 800616e:	d17f      	bne.n	8006270 <pow+0x24c>
 8006170:	4640      	mov	r0, r8
 8006172:	4649      	mov	r1, r9
 8006174:	f001 f921 	bl	80073ba <finite>
 8006178:	2800      	cmp	r0, #0
 800617a:	d079      	beq.n	8006270 <pow+0x24c>
 800617c:	4620      	mov	r0, r4
 800617e:	4629      	mov	r1, r5
 8006180:	f001 f91b 	bl	80073ba <finite>
 8006184:	2800      	cmp	r0, #0
 8006186:	d073      	beq.n	8006270 <pow+0x24c>
 8006188:	e9dd 2300 	ldrd	r2, r3, [sp]
 800618c:	4619      	mov	r1, r3
 800618e:	4610      	mov	r0, r2
 8006190:	f7fa fc30 	bl	80009f4 <__aeabi_dcmpun>
 8006194:	f997 7000 	ldrsb.w	r7, [r7]
 8006198:	4b4d      	ldr	r3, [pc, #308]	; (80062d0 <pow+0x2ac>)
 800619a:	b1a0      	cbz	r0, 80061c6 <pow+0x1a2>
 800619c:	2201      	movs	r2, #1
 800619e:	9305      	str	r3, [sp, #20]
 80061a0:	9b02      	ldr	r3, [sp, #8]
 80061a2:	9204      	str	r2, [sp, #16]
 80061a4:	930c      	str	r3, [sp, #48]	; 0x30
 80061a6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80061aa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80061ae:	2f00      	cmp	r7, #0
 80061b0:	d0c9      	beq.n	8006146 <pow+0x122>
 80061b2:	4652      	mov	r2, sl
 80061b4:	465b      	mov	r3, fp
 80061b6:	4650      	mov	r0, sl
 80061b8:	4659      	mov	r1, fp
 80061ba:	f7fa faab 	bl	8000714 <__aeabi_ddiv>
 80061be:	2f02      	cmp	r7, #2
 80061c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80061c4:	e7c7      	b.n	8006156 <pow+0x132>
 80061c6:	2203      	movs	r2, #3
 80061c8:	9305      	str	r3, [sp, #20]
 80061ca:	9204      	str	r2, [sp, #16]
 80061cc:	900c      	str	r0, [sp, #48]	; 0x30
 80061ce:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80061d2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80061d6:	bb57      	cbnz	r7, 800622e <pow+0x20a>
 80061d8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80061dc:	4b3f      	ldr	r3, [pc, #252]	; (80062dc <pow+0x2b8>)
 80061de:	4640      	mov	r0, r8
 80061e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80061e4:	4649      	mov	r1, r9
 80061e6:	4652      	mov	r2, sl
 80061e8:	465b      	mov	r3, fp
 80061ea:	f7fa fbdb 	bl	80009a4 <__aeabi_dcmplt>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d064      	beq.n	80062bc <pow+0x298>
 80061f2:	2200      	movs	r2, #0
 80061f4:	4b3a      	ldr	r3, [pc, #232]	; (80062e0 <pow+0x2bc>)
 80061f6:	4620      	mov	r0, r4
 80061f8:	4629      	mov	r1, r5
 80061fa:	f7fa f961 	bl	80004c0 <__aeabi_dmul>
 80061fe:	4604      	mov	r4, r0
 8006200:	460d      	mov	r5, r1
 8006202:	f001 f8e9 	bl	80073d8 <rint>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4620      	mov	r0, r4
 800620c:	4629      	mov	r1, r5
 800620e:	f7fa fbbf 	bl	8000990 <__aeabi_dcmpeq>
 8006212:	b920      	cbnz	r0, 800621e <pow+0x1fa>
 8006214:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006218:	4b32      	ldr	r3, [pc, #200]	; (80062e4 <pow+0x2c0>)
 800621a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800621e:	f996 3000 	ldrsb.w	r3, [r6]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d14a      	bne.n	80062bc <pow+0x298>
 8006226:	f001 f9d5 	bl	80075d4 <__errno>
 800622a:	2322      	movs	r3, #34	; 0x22
 800622c:	e797      	b.n	800615e <pow+0x13a>
 800622e:	2200      	movs	r2, #0
 8006230:	4b2d      	ldr	r3, [pc, #180]	; (80062e8 <pow+0x2c4>)
 8006232:	4640      	mov	r0, r8
 8006234:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006238:	4649      	mov	r1, r9
 800623a:	4652      	mov	r2, sl
 800623c:	465b      	mov	r3, fp
 800623e:	f7fa fbb1 	bl	80009a4 <__aeabi_dcmplt>
 8006242:	2800      	cmp	r0, #0
 8006244:	d0eb      	beq.n	800621e <pow+0x1fa>
 8006246:	2200      	movs	r2, #0
 8006248:	4b25      	ldr	r3, [pc, #148]	; (80062e0 <pow+0x2bc>)
 800624a:	4620      	mov	r0, r4
 800624c:	4629      	mov	r1, r5
 800624e:	f7fa f937 	bl	80004c0 <__aeabi_dmul>
 8006252:	4604      	mov	r4, r0
 8006254:	460d      	mov	r5, r1
 8006256:	f001 f8bf 	bl	80073d8 <rint>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4620      	mov	r0, r4
 8006260:	4629      	mov	r1, r5
 8006262:	f7fa fb95 	bl	8000990 <__aeabi_dcmpeq>
 8006266:	2800      	cmp	r0, #0
 8006268:	d1d9      	bne.n	800621e <pow+0x1fa>
 800626a:	2200      	movs	r2, #0
 800626c:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <pow+0x2b4>)
 800626e:	e7d4      	b.n	800621a <pow+0x1f6>
 8006270:	2200      	movs	r2, #0
 8006272:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006276:	2300      	movs	r3, #0
 8006278:	f7fa fb8a 	bl	8000990 <__aeabi_dcmpeq>
 800627c:	2800      	cmp	r0, #0
 800627e:	f43f af43 	beq.w	8006108 <pow+0xe4>
 8006282:	4640      	mov	r0, r8
 8006284:	4649      	mov	r1, r9
 8006286:	f001 f898 	bl	80073ba <finite>
 800628a:	2800      	cmp	r0, #0
 800628c:	f43f af3c 	beq.w	8006108 <pow+0xe4>
 8006290:	4620      	mov	r0, r4
 8006292:	4629      	mov	r1, r5
 8006294:	f001 f891 	bl	80073ba <finite>
 8006298:	2800      	cmp	r0, #0
 800629a:	f43f af35 	beq.w	8006108 <pow+0xe4>
 800629e:	2304      	movs	r3, #4
 80062a0:	9304      	str	r3, [sp, #16]
 80062a2:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <pow+0x2ac>)
 80062a4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80062a8:	9305      	str	r3, [sp, #20]
 80062aa:	2300      	movs	r3, #0
 80062ac:	2400      	movs	r4, #0
 80062ae:	930c      	str	r3, [sp, #48]	; 0x30
 80062b0:	2300      	movs	r3, #0
 80062b2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80062b6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80062ba:	e7b0      	b.n	800621e <pow+0x1fa>
 80062bc:	a804      	add	r0, sp, #16
 80062be:	f001 f882 	bl	80073c6 <matherr>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	f47f af16 	bne.w	80060f4 <pow+0xd0>
 80062c8:	e7ad      	b.n	8006226 <pow+0x202>
 80062ca:	bf00      	nop
 80062cc:	20000018 	.word	0x20000018
 80062d0:	08008024 	.word	0x08008024
 80062d4:	3ff00000 	.word	0x3ff00000
 80062d8:	fff00000 	.word	0xfff00000
 80062dc:	47efffff 	.word	0x47efffff
 80062e0:	3fe00000 	.word	0x3fe00000
 80062e4:	c7efffff 	.word	0xc7efffff
 80062e8:	7ff00000 	.word	0x7ff00000

080062ec <sqrt>:
 80062ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f0:	b08b      	sub	sp, #44	; 0x2c
 80062f2:	4604      	mov	r4, r0
 80062f4:	460d      	mov	r5, r1
 80062f6:	f000 fe1d 	bl	8006f34 <__ieee754_sqrt>
 80062fa:	4b24      	ldr	r3, [pc, #144]	; (800638c <sqrt+0xa0>)
 80062fc:	4680      	mov	r8, r0
 80062fe:	f993 a000 	ldrsb.w	sl, [r3]
 8006302:	4689      	mov	r9, r1
 8006304:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006308:	d02b      	beq.n	8006362 <sqrt+0x76>
 800630a:	4622      	mov	r2, r4
 800630c:	462b      	mov	r3, r5
 800630e:	4620      	mov	r0, r4
 8006310:	4629      	mov	r1, r5
 8006312:	f7fa fb6f 	bl	80009f4 <__aeabi_dcmpun>
 8006316:	4683      	mov	fp, r0
 8006318:	bb18      	cbnz	r0, 8006362 <sqrt+0x76>
 800631a:	2600      	movs	r6, #0
 800631c:	2700      	movs	r7, #0
 800631e:	4632      	mov	r2, r6
 8006320:	463b      	mov	r3, r7
 8006322:	4620      	mov	r0, r4
 8006324:	4629      	mov	r1, r5
 8006326:	f7fa fb3d 	bl	80009a4 <__aeabi_dcmplt>
 800632a:	b1d0      	cbz	r0, 8006362 <sqrt+0x76>
 800632c:	2301      	movs	r3, #1
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	4b17      	ldr	r3, [pc, #92]	; (8006390 <sqrt+0xa4>)
 8006332:	f8cd b020 	str.w	fp, [sp, #32]
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800633c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006340:	f1ba 0f00 	cmp.w	sl, #0
 8006344:	d112      	bne.n	800636c <sqrt+0x80>
 8006346:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800634a:	4668      	mov	r0, sp
 800634c:	f001 f83b 	bl	80073c6 <matherr>
 8006350:	b1b8      	cbz	r0, 8006382 <sqrt+0x96>
 8006352:	9b08      	ldr	r3, [sp, #32]
 8006354:	b11b      	cbz	r3, 800635e <sqrt+0x72>
 8006356:	f001 f93d 	bl	80075d4 <__errno>
 800635a:	9b08      	ldr	r3, [sp, #32]
 800635c:	6003      	str	r3, [r0, #0]
 800635e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8006362:	4640      	mov	r0, r8
 8006364:	4649      	mov	r1, r9
 8006366:	b00b      	add	sp, #44	; 0x2c
 8006368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800636c:	4632      	mov	r2, r6
 800636e:	463b      	mov	r3, r7
 8006370:	4630      	mov	r0, r6
 8006372:	4639      	mov	r1, r7
 8006374:	f7fa f9ce 	bl	8000714 <__aeabi_ddiv>
 8006378:	f1ba 0f02 	cmp.w	sl, #2
 800637c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006380:	d1e3      	bne.n	800634a <sqrt+0x5e>
 8006382:	f001 f927 	bl	80075d4 <__errno>
 8006386:	2321      	movs	r3, #33	; 0x21
 8006388:	6003      	str	r3, [r0, #0]
 800638a:	e7e2      	b.n	8006352 <sqrt+0x66>
 800638c:	20000018 	.word	0x20000018
 8006390:	08008028 	.word	0x08008028
 8006394:	00000000 	.word	0x00000000

08006398 <__ieee754_atan2>:
 8006398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639c:	4256      	negs	r6, r2
 800639e:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 80063a2:	4316      	orrs	r6, r2
 80063a4:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8006548 <__ieee754_atan2+0x1b0>
 80063a8:	ea4e 76d6 	orr.w	r6, lr, r6, lsr #31
 80063ac:	454e      	cmp	r6, r9
 80063ae:	4604      	mov	r4, r0
 80063b0:	460d      	mov	r5, r1
 80063b2:	4688      	mov	r8, r1
 80063b4:	d807      	bhi.n	80063c6 <__ieee754_atan2+0x2e>
 80063b6:	4246      	negs	r6, r0
 80063b8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80063bc:	4306      	orrs	r6, r0
 80063be:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 80063c2:	454e      	cmp	r6, r9
 80063c4:	d906      	bls.n	80063d4 <__ieee754_atan2+0x3c>
 80063c6:	4620      	mov	r0, r4
 80063c8:	4629      	mov	r1, r5
 80063ca:	f7f9 fec7 	bl	800015c <__adddf3>
 80063ce:	4604      	mov	r4, r0
 80063d0:	460d      	mov	r5, r1
 80063d2:	e015      	b.n	8006400 <__ieee754_atan2+0x68>
 80063d4:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 80063d8:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80063dc:	4316      	orrs	r6, r2
 80063de:	d103      	bne.n	80063e8 <__ieee754_atan2+0x50>
 80063e0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e4:	f000 be54 	b.w	8007090 <atan>
 80063e8:	179e      	asrs	r6, r3, #30
 80063ea:	f006 0602 	and.w	r6, r6, #2
 80063ee:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80063f2:	ea50 0107 	orrs.w	r1, r0, r7
 80063f6:	d107      	bne.n	8006408 <__ieee754_atan2+0x70>
 80063f8:	2e02      	cmp	r6, #2
 80063fa:	d030      	beq.n	800645e <__ieee754_atan2+0xc6>
 80063fc:	2e03      	cmp	r6, #3
 80063fe:	d032      	beq.n	8006466 <__ieee754_atan2+0xce>
 8006400:	4620      	mov	r0, r4
 8006402:	4629      	mov	r1, r5
 8006404:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006408:	ea52 010e 	orrs.w	r1, r2, lr
 800640c:	d106      	bne.n	800641c <__ieee754_atan2+0x84>
 800640e:	f1b8 0f00 	cmp.w	r8, #0
 8006412:	da71      	bge.n	80064f8 <__ieee754_atan2+0x160>
 8006414:	a53a      	add	r5, pc, #232	; (adr r5, 8006500 <__ieee754_atan2+0x168>)
 8006416:	e9d5 4500 	ldrd	r4, r5, [r5]
 800641a:	e7f1      	b.n	8006400 <__ieee754_atan2+0x68>
 800641c:	45ce      	cmp	lr, r9
 800641e:	d126      	bne.n	800646e <__ieee754_atan2+0xd6>
 8006420:	4577      	cmp	r7, lr
 8006422:	d111      	bne.n	8006448 <__ieee754_atan2+0xb0>
 8006424:	2e02      	cmp	r6, #2
 8006426:	d007      	beq.n	8006438 <__ieee754_atan2+0xa0>
 8006428:	2e03      	cmp	r6, #3
 800642a:	d009      	beq.n	8006440 <__ieee754_atan2+0xa8>
 800642c:	2e01      	cmp	r6, #1
 800642e:	d15d      	bne.n	80064ec <__ieee754_atan2+0x154>
 8006430:	a535      	add	r5, pc, #212	; (adr r5, 8006508 <__ieee754_atan2+0x170>)
 8006432:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006436:	e7e3      	b.n	8006400 <__ieee754_atan2+0x68>
 8006438:	a535      	add	r5, pc, #212	; (adr r5, 8006510 <__ieee754_atan2+0x178>)
 800643a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800643e:	e7df      	b.n	8006400 <__ieee754_atan2+0x68>
 8006440:	a535      	add	r5, pc, #212	; (adr r5, 8006518 <__ieee754_atan2+0x180>)
 8006442:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006446:	e7db      	b.n	8006400 <__ieee754_atan2+0x68>
 8006448:	2e02      	cmp	r6, #2
 800644a:	d008      	beq.n	800645e <__ieee754_atan2+0xc6>
 800644c:	2e03      	cmp	r6, #3
 800644e:	d00a      	beq.n	8006466 <__ieee754_atan2+0xce>
 8006450:	2e01      	cmp	r6, #1
 8006452:	f04f 0400 	mov.w	r4, #0
 8006456:	d14d      	bne.n	80064f4 <__ieee754_atan2+0x15c>
 8006458:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800645c:	e7d0      	b.n	8006400 <__ieee754_atan2+0x68>
 800645e:	a530      	add	r5, pc, #192	; (adr r5, 8006520 <__ieee754_atan2+0x188>)
 8006460:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006464:	e7cc      	b.n	8006400 <__ieee754_atan2+0x68>
 8006466:	a530      	add	r5, pc, #192	; (adr r5, 8006528 <__ieee754_atan2+0x190>)
 8006468:	e9d5 4500 	ldrd	r4, r5, [r5]
 800646c:	e7c8      	b.n	8006400 <__ieee754_atan2+0x68>
 800646e:	454f      	cmp	r7, r9
 8006470:	d0cd      	beq.n	800640e <__ieee754_atan2+0x76>
 8006472:	eba7 070e 	sub.w	r7, r7, lr
 8006476:	153f      	asrs	r7, r7, #20
 8006478:	2f3c      	cmp	r7, #60	; 0x3c
 800647a:	dc1e      	bgt.n	80064ba <__ieee754_atan2+0x122>
 800647c:	2b00      	cmp	r3, #0
 800647e:	da01      	bge.n	8006484 <__ieee754_atan2+0xec>
 8006480:	373c      	adds	r7, #60	; 0x3c
 8006482:	db1e      	blt.n	80064c2 <__ieee754_atan2+0x12a>
 8006484:	4620      	mov	r0, r4
 8006486:	4629      	mov	r1, r5
 8006488:	f7fa f944 	bl	8000714 <__aeabi_ddiv>
 800648c:	f000 ff92 	bl	80073b4 <fabs>
 8006490:	f000 fdfe 	bl	8007090 <atan>
 8006494:	4604      	mov	r4, r0
 8006496:	460d      	mov	r5, r1
 8006498:	2e01      	cmp	r6, #1
 800649a:	d015      	beq.n	80064c8 <__ieee754_atan2+0x130>
 800649c:	2e02      	cmp	r6, #2
 800649e:	d016      	beq.n	80064ce <__ieee754_atan2+0x136>
 80064a0:	2e00      	cmp	r6, #0
 80064a2:	d0ad      	beq.n	8006400 <__ieee754_atan2+0x68>
 80064a4:	a322      	add	r3, pc, #136	; (adr r3, 8006530 <__ieee754_atan2+0x198>)
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	4620      	mov	r0, r4
 80064ac:	4629      	mov	r1, r5
 80064ae:	f7f9 fe53 	bl	8000158 <__aeabi_dsub>
 80064b2:	a31b      	add	r3, pc, #108	; (adr r3, 8006520 <__ieee754_atan2+0x188>)
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	e015      	b.n	80064e6 <__ieee754_atan2+0x14e>
 80064ba:	a51f      	add	r5, pc, #124	; (adr r5, 8006538 <__ieee754_atan2+0x1a0>)
 80064bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80064c0:	e7ea      	b.n	8006498 <__ieee754_atan2+0x100>
 80064c2:	2400      	movs	r4, #0
 80064c4:	2500      	movs	r5, #0
 80064c6:	e7e7      	b.n	8006498 <__ieee754_atan2+0x100>
 80064c8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80064cc:	e798      	b.n	8006400 <__ieee754_atan2+0x68>
 80064ce:	a318      	add	r3, pc, #96	; (adr r3, 8006530 <__ieee754_atan2+0x198>)
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	4620      	mov	r0, r4
 80064d6:	4629      	mov	r1, r5
 80064d8:	f7f9 fe3e 	bl	8000158 <__aeabi_dsub>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	a10f      	add	r1, pc, #60	; (adr r1, 8006520 <__ieee754_atan2+0x188>)
 80064e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064e6:	f7f9 fe37 	bl	8000158 <__aeabi_dsub>
 80064ea:	e770      	b.n	80063ce <__ieee754_atan2+0x36>
 80064ec:	a514      	add	r5, pc, #80	; (adr r5, 8006540 <__ieee754_atan2+0x1a8>)
 80064ee:	e9d5 4500 	ldrd	r4, r5, [r5]
 80064f2:	e785      	b.n	8006400 <__ieee754_atan2+0x68>
 80064f4:	2500      	movs	r5, #0
 80064f6:	e783      	b.n	8006400 <__ieee754_atan2+0x68>
 80064f8:	a50f      	add	r5, pc, #60	; (adr r5, 8006538 <__ieee754_atan2+0x1a0>)
 80064fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80064fe:	e77f      	b.n	8006400 <__ieee754_atan2+0x68>
 8006500:	54442d18 	.word	0x54442d18
 8006504:	bff921fb 	.word	0xbff921fb
 8006508:	54442d18 	.word	0x54442d18
 800650c:	bfe921fb 	.word	0xbfe921fb
 8006510:	7f3321d2 	.word	0x7f3321d2
 8006514:	4002d97c 	.word	0x4002d97c
 8006518:	7f3321d2 	.word	0x7f3321d2
 800651c:	c002d97c 	.word	0xc002d97c
 8006520:	54442d18 	.word	0x54442d18
 8006524:	400921fb 	.word	0x400921fb
 8006528:	54442d18 	.word	0x54442d18
 800652c:	c00921fb 	.word	0xc00921fb
 8006530:	33145c07 	.word	0x33145c07
 8006534:	3ca1a626 	.word	0x3ca1a626
 8006538:	54442d18 	.word	0x54442d18
 800653c:	3ff921fb 	.word	0x3ff921fb
 8006540:	54442d18 	.word	0x54442d18
 8006544:	3fe921fb 	.word	0x3fe921fb
 8006548:	7ff00000 	.word	0x7ff00000
 800654c:	00000000 	.word	0x00000000

08006550 <__ieee754_pow>:
 8006550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006554:	b093      	sub	sp, #76	; 0x4c
 8006556:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800655a:	9e03      	ldr	r6, [sp, #12]
 800655c:	9a02      	ldr	r2, [sp, #8]
 800655e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8006562:	ea55 0302 	orrs.w	r3, r5, r2
 8006566:	4607      	mov	r7, r0
 8006568:	4688      	mov	r8, r1
 800656a:	4682      	mov	sl, r0
 800656c:	4689      	mov	r9, r1
 800656e:	f000 849e 	beq.w	8006eae <__ieee754_pow+0x95e>
 8006572:	4b77      	ldr	r3, [pc, #476]	; (8006750 <__ieee754_pow+0x200>)
 8006574:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8006578:	429c      	cmp	r4, r3
 800657a:	dc09      	bgt.n	8006590 <__ieee754_pow+0x40>
 800657c:	d103      	bne.n	8006586 <__ieee754_pow+0x36>
 800657e:	b938      	cbnz	r0, 8006590 <__ieee754_pow+0x40>
 8006580:	42a5      	cmp	r5, r4
 8006582:	dc0d      	bgt.n	80065a0 <__ieee754_pow+0x50>
 8006584:	e001      	b.n	800658a <__ieee754_pow+0x3a>
 8006586:	429d      	cmp	r5, r3
 8006588:	dc02      	bgt.n	8006590 <__ieee754_pow+0x40>
 800658a:	429d      	cmp	r5, r3
 800658c:	d10e      	bne.n	80065ac <__ieee754_pow+0x5c>
 800658e:	b16a      	cbz	r2, 80065ac <__ieee754_pow+0x5c>
 8006590:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006594:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006598:	ea54 030a 	orrs.w	r3, r4, sl
 800659c:	f000 8487 	beq.w	8006eae <__ieee754_pow+0x95e>
 80065a0:	486c      	ldr	r0, [pc, #432]	; (8006754 <__ieee754_pow+0x204>)
 80065a2:	b013      	add	sp, #76	; 0x4c
 80065a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	f000 bf10 	b.w	80073cc <nan>
 80065ac:	f1b9 0f00 	cmp.w	r9, #0
 80065b0:	da4f      	bge.n	8006652 <__ieee754_pow+0x102>
 80065b2:	4b69      	ldr	r3, [pc, #420]	; (8006758 <__ieee754_pow+0x208>)
 80065b4:	429d      	cmp	r5, r3
 80065b6:	dc4a      	bgt.n	800664e <__ieee754_pow+0xfe>
 80065b8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80065bc:	429d      	cmp	r5, r3
 80065be:	dd48      	ble.n	8006652 <__ieee754_pow+0x102>
 80065c0:	152b      	asrs	r3, r5, #20
 80065c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80065c6:	2b14      	cmp	r3, #20
 80065c8:	dd24      	ble.n	8006614 <__ieee754_pow+0xc4>
 80065ca:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80065ce:	fa22 f103 	lsr.w	r1, r2, r3
 80065d2:	fa01 f303 	lsl.w	r3, r1, r3
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d13b      	bne.n	8006652 <__ieee754_pow+0x102>
 80065da:	f001 0101 	and.w	r1, r1, #1
 80065de:	f1c1 0302 	rsb	r3, r1, #2
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	2a00      	cmp	r2, #0
 80065e6:	d156      	bne.n	8006696 <__ieee754_pow+0x146>
 80065e8:	4b59      	ldr	r3, [pc, #356]	; (8006750 <__ieee754_pow+0x200>)
 80065ea:	429d      	cmp	r5, r3
 80065ec:	d122      	bne.n	8006634 <__ieee754_pow+0xe4>
 80065ee:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80065f2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80065f6:	ea53 030a 	orrs.w	r3, r3, sl
 80065fa:	f000 8458 	beq.w	8006eae <__ieee754_pow+0x95e>
 80065fe:	4b57      	ldr	r3, [pc, #348]	; (800675c <__ieee754_pow+0x20c>)
 8006600:	429c      	cmp	r4, r3
 8006602:	dd28      	ble.n	8006656 <__ieee754_pow+0x106>
 8006604:	2e00      	cmp	r6, #0
 8006606:	f280 8456 	bge.w	8006eb6 <__ieee754_pow+0x966>
 800660a:	2000      	movs	r0, #0
 800660c:	2100      	movs	r1, #0
 800660e:	b013      	add	sp, #76	; 0x4c
 8006610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006614:	2a00      	cmp	r2, #0
 8006616:	d13c      	bne.n	8006692 <__ieee754_pow+0x142>
 8006618:	f1c3 0314 	rsb	r3, r3, #20
 800661c:	fa45 f103 	asr.w	r1, r5, r3
 8006620:	fa01 f303 	lsl.w	r3, r1, r3
 8006624:	429d      	cmp	r5, r3
 8006626:	f040 844e 	bne.w	8006ec6 <__ieee754_pow+0x976>
 800662a:	f001 0101 	and.w	r1, r1, #1
 800662e:	f1c1 0302 	rsb	r3, r1, #2
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	4b4a      	ldr	r3, [pc, #296]	; (8006760 <__ieee754_pow+0x210>)
 8006636:	429d      	cmp	r5, r3
 8006638:	d114      	bne.n	8006664 <__ieee754_pow+0x114>
 800663a:	2e00      	cmp	r6, #0
 800663c:	f280 843f 	bge.w	8006ebe <__ieee754_pow+0x96e>
 8006640:	463a      	mov	r2, r7
 8006642:	4643      	mov	r3, r8
 8006644:	2000      	movs	r0, #0
 8006646:	4946      	ldr	r1, [pc, #280]	; (8006760 <__ieee754_pow+0x210>)
 8006648:	f7fa f864 	bl	8000714 <__aeabi_ddiv>
 800664c:	e7df      	b.n	800660e <__ieee754_pow+0xbe>
 800664e:	2302      	movs	r3, #2
 8006650:	e7c7      	b.n	80065e2 <__ieee754_pow+0x92>
 8006652:	2300      	movs	r3, #0
 8006654:	e7c5      	b.n	80065e2 <__ieee754_pow+0x92>
 8006656:	2e00      	cmp	r6, #0
 8006658:	dad7      	bge.n	800660a <__ieee754_pow+0xba>
 800665a:	9b03      	ldr	r3, [sp, #12]
 800665c:	9802      	ldr	r0, [sp, #8]
 800665e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006662:	e7d4      	b.n	800660e <__ieee754_pow+0xbe>
 8006664:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8006668:	d106      	bne.n	8006678 <__ieee754_pow+0x128>
 800666a:	463a      	mov	r2, r7
 800666c:	4643      	mov	r3, r8
 800666e:	4638      	mov	r0, r7
 8006670:	4641      	mov	r1, r8
 8006672:	f7f9 ff25 	bl	80004c0 <__aeabi_dmul>
 8006676:	e7ca      	b.n	800660e <__ieee754_pow+0xbe>
 8006678:	4b3a      	ldr	r3, [pc, #232]	; (8006764 <__ieee754_pow+0x214>)
 800667a:	429e      	cmp	r6, r3
 800667c:	d10b      	bne.n	8006696 <__ieee754_pow+0x146>
 800667e:	f1b9 0f00 	cmp.w	r9, #0
 8006682:	db08      	blt.n	8006696 <__ieee754_pow+0x146>
 8006684:	4638      	mov	r0, r7
 8006686:	4641      	mov	r1, r8
 8006688:	b013      	add	sp, #76	; 0x4c
 800668a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668e:	f000 bc51 	b.w	8006f34 <__ieee754_sqrt>
 8006692:	2300      	movs	r3, #0
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	4638      	mov	r0, r7
 8006698:	4641      	mov	r1, r8
 800669a:	f000 fe8b 	bl	80073b4 <fabs>
 800669e:	f1ba 0f00 	cmp.w	sl, #0
 80066a2:	d125      	bne.n	80066f0 <__ieee754_pow+0x1a0>
 80066a4:	b124      	cbz	r4, 80066b0 <__ieee754_pow+0x160>
 80066a6:	4b2e      	ldr	r3, [pc, #184]	; (8006760 <__ieee754_pow+0x210>)
 80066a8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d11f      	bne.n	80066f0 <__ieee754_pow+0x1a0>
 80066b0:	2e00      	cmp	r6, #0
 80066b2:	da05      	bge.n	80066c0 <__ieee754_pow+0x170>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	2000      	movs	r0, #0
 80066ba:	4929      	ldr	r1, [pc, #164]	; (8006760 <__ieee754_pow+0x210>)
 80066bc:	f7fa f82a 	bl	8000714 <__aeabi_ddiv>
 80066c0:	f1b9 0f00 	cmp.w	r9, #0
 80066c4:	daa3      	bge.n	800660e <__ieee754_pow+0xbe>
 80066c6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80066ca:	9b00      	ldr	r3, [sp, #0]
 80066cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80066d0:	4323      	orrs	r3, r4
 80066d2:	d106      	bne.n	80066e2 <__ieee754_pow+0x192>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	f7f9 fd3e 	bl	8000158 <__aeabi_dsub>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	e7b2      	b.n	8006648 <__ieee754_pow+0xf8>
 80066e2:	9b00      	ldr	r3, [sp, #0]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d192      	bne.n	800660e <__ieee754_pow+0xbe>
 80066e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066ec:	4619      	mov	r1, r3
 80066ee:	e78e      	b.n	800660e <__ieee754_pow+0xbe>
 80066f0:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80066f4:	f109 33ff 	add.w	r3, r9, #4294967295
 80066f8:	930c      	str	r3, [sp, #48]	; 0x30
 80066fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066fc:	9b00      	ldr	r3, [sp, #0]
 80066fe:	4313      	orrs	r3, r2
 8006700:	d104      	bne.n	800670c <__ieee754_pow+0x1bc>
 8006702:	463a      	mov	r2, r7
 8006704:	4643      	mov	r3, r8
 8006706:	4638      	mov	r0, r7
 8006708:	4641      	mov	r1, r8
 800670a:	e7e5      	b.n	80066d8 <__ieee754_pow+0x188>
 800670c:	4b16      	ldr	r3, [pc, #88]	; (8006768 <__ieee754_pow+0x218>)
 800670e:	429d      	cmp	r5, r3
 8006710:	f340 80fc 	ble.w	800690c <__ieee754_pow+0x3bc>
 8006714:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006718:	429d      	cmp	r5, r3
 800671a:	dd0b      	ble.n	8006734 <__ieee754_pow+0x1e4>
 800671c:	4b0f      	ldr	r3, [pc, #60]	; (800675c <__ieee754_pow+0x20c>)
 800671e:	429c      	cmp	r4, r3
 8006720:	dc0e      	bgt.n	8006740 <__ieee754_pow+0x1f0>
 8006722:	2e00      	cmp	r6, #0
 8006724:	f6bf af71 	bge.w	800660a <__ieee754_pow+0xba>
 8006728:	a307      	add	r3, pc, #28	; (adr r3, 8006748 <__ieee754_pow+0x1f8>)
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	4610      	mov	r0, r2
 8006730:	4619      	mov	r1, r3
 8006732:	e79e      	b.n	8006672 <__ieee754_pow+0x122>
 8006734:	4b0d      	ldr	r3, [pc, #52]	; (800676c <__ieee754_pow+0x21c>)
 8006736:	429c      	cmp	r4, r3
 8006738:	ddf3      	ble.n	8006722 <__ieee754_pow+0x1d2>
 800673a:	4b09      	ldr	r3, [pc, #36]	; (8006760 <__ieee754_pow+0x210>)
 800673c:	429c      	cmp	r4, r3
 800673e:	dd17      	ble.n	8006770 <__ieee754_pow+0x220>
 8006740:	2e00      	cmp	r6, #0
 8006742:	dcf1      	bgt.n	8006728 <__ieee754_pow+0x1d8>
 8006744:	e761      	b.n	800660a <__ieee754_pow+0xba>
 8006746:	bf00      	nop
 8006748:	8800759c 	.word	0x8800759c
 800674c:	7e37e43c 	.word	0x7e37e43c
 8006750:	7ff00000 	.word	0x7ff00000
 8006754:	0800802c 	.word	0x0800802c
 8006758:	433fffff 	.word	0x433fffff
 800675c:	3fefffff 	.word	0x3fefffff
 8006760:	3ff00000 	.word	0x3ff00000
 8006764:	3fe00000 	.word	0x3fe00000
 8006768:	41e00000 	.word	0x41e00000
 800676c:	3feffffe 	.word	0x3feffffe
 8006770:	2200      	movs	r2, #0
 8006772:	4b61      	ldr	r3, [pc, #388]	; (80068f8 <__ieee754_pow+0x3a8>)
 8006774:	f7f9 fcf0 	bl	8000158 <__aeabi_dsub>
 8006778:	a355      	add	r3, pc, #340	; (adr r3, 80068d0 <__ieee754_pow+0x380>)
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	4604      	mov	r4, r0
 8006780:	460d      	mov	r5, r1
 8006782:	f7f9 fe9d 	bl	80004c0 <__aeabi_dmul>
 8006786:	a354      	add	r3, pc, #336	; (adr r3, 80068d8 <__ieee754_pow+0x388>)
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	4606      	mov	r6, r0
 800678e:	460f      	mov	r7, r1
 8006790:	4620      	mov	r0, r4
 8006792:	4629      	mov	r1, r5
 8006794:	f7f9 fe94 	bl	80004c0 <__aeabi_dmul>
 8006798:	2200      	movs	r2, #0
 800679a:	4682      	mov	sl, r0
 800679c:	468b      	mov	fp, r1
 800679e:	4b57      	ldr	r3, [pc, #348]	; (80068fc <__ieee754_pow+0x3ac>)
 80067a0:	4620      	mov	r0, r4
 80067a2:	4629      	mov	r1, r5
 80067a4:	f7f9 fe8c 	bl	80004c0 <__aeabi_dmul>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	a14c      	add	r1, pc, #304	; (adr r1, 80068e0 <__ieee754_pow+0x390>)
 80067ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067b2:	f7f9 fcd1 	bl	8000158 <__aeabi_dsub>
 80067b6:	4622      	mov	r2, r4
 80067b8:	462b      	mov	r3, r5
 80067ba:	f7f9 fe81 	bl	80004c0 <__aeabi_dmul>
 80067be:	4602      	mov	r2, r0
 80067c0:	460b      	mov	r3, r1
 80067c2:	2000      	movs	r0, #0
 80067c4:	494e      	ldr	r1, [pc, #312]	; (8006900 <__ieee754_pow+0x3b0>)
 80067c6:	f7f9 fcc7 	bl	8000158 <__aeabi_dsub>
 80067ca:	4622      	mov	r2, r4
 80067cc:	462b      	mov	r3, r5
 80067ce:	4680      	mov	r8, r0
 80067d0:	4689      	mov	r9, r1
 80067d2:	4620      	mov	r0, r4
 80067d4:	4629      	mov	r1, r5
 80067d6:	f7f9 fe73 	bl	80004c0 <__aeabi_dmul>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4640      	mov	r0, r8
 80067e0:	4649      	mov	r1, r9
 80067e2:	f7f9 fe6d 	bl	80004c0 <__aeabi_dmul>
 80067e6:	a340      	add	r3, pc, #256	; (adr r3, 80068e8 <__ieee754_pow+0x398>)
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f7f9 fe68 	bl	80004c0 <__aeabi_dmul>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4650      	mov	r0, sl
 80067f6:	4659      	mov	r1, fp
 80067f8:	f7f9 fcae 	bl	8000158 <__aeabi_dsub>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4604      	mov	r4, r0
 8006802:	460d      	mov	r5, r1
 8006804:	4630      	mov	r0, r6
 8006806:	4639      	mov	r1, r7
 8006808:	f7f9 fca8 	bl	800015c <__adddf3>
 800680c:	2000      	movs	r0, #0
 800680e:	468b      	mov	fp, r1
 8006810:	4682      	mov	sl, r0
 8006812:	4632      	mov	r2, r6
 8006814:	463b      	mov	r3, r7
 8006816:	f7f9 fc9f 	bl	8000158 <__aeabi_dsub>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4620      	mov	r0, r4
 8006820:	4629      	mov	r1, r5
 8006822:	f7f9 fc99 	bl	8000158 <__aeabi_dsub>
 8006826:	9b00      	ldr	r3, [sp, #0]
 8006828:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800682a:	3b01      	subs	r3, #1
 800682c:	4313      	orrs	r3, r2
 800682e:	f04f 0300 	mov.w	r3, #0
 8006832:	bf0c      	ite	eq
 8006834:	4c33      	ldreq	r4, [pc, #204]	; (8006904 <__ieee754_pow+0x3b4>)
 8006836:	4c30      	ldrne	r4, [pc, #192]	; (80068f8 <__ieee754_pow+0x3a8>)
 8006838:	4606      	mov	r6, r0
 800683a:	e88d 0018 	stmia.w	sp, {r3, r4}
 800683e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006842:	2400      	movs	r4, #0
 8006844:	460f      	mov	r7, r1
 8006846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800684a:	4622      	mov	r2, r4
 800684c:	462b      	mov	r3, r5
 800684e:	f7f9 fc83 	bl	8000158 <__aeabi_dsub>
 8006852:	4652      	mov	r2, sl
 8006854:	465b      	mov	r3, fp
 8006856:	f7f9 fe33 	bl	80004c0 <__aeabi_dmul>
 800685a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800685e:	4680      	mov	r8, r0
 8006860:	4689      	mov	r9, r1
 8006862:	4630      	mov	r0, r6
 8006864:	4639      	mov	r1, r7
 8006866:	f7f9 fe2b 	bl	80004c0 <__aeabi_dmul>
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	4640      	mov	r0, r8
 8006870:	4649      	mov	r1, r9
 8006872:	f7f9 fc73 	bl	800015c <__adddf3>
 8006876:	4622      	mov	r2, r4
 8006878:	462b      	mov	r3, r5
 800687a:	4680      	mov	r8, r0
 800687c:	4689      	mov	r9, r1
 800687e:	4650      	mov	r0, sl
 8006880:	4659      	mov	r1, fp
 8006882:	f7f9 fe1d 	bl	80004c0 <__aeabi_dmul>
 8006886:	4604      	mov	r4, r0
 8006888:	460d      	mov	r5, r1
 800688a:	460b      	mov	r3, r1
 800688c:	4602      	mov	r2, r0
 800688e:	4649      	mov	r1, r9
 8006890:	4640      	mov	r0, r8
 8006892:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006896:	f7f9 fc61 	bl	800015c <__adddf3>
 800689a:	4b1b      	ldr	r3, [pc, #108]	; (8006908 <__ieee754_pow+0x3b8>)
 800689c:	4682      	mov	sl, r0
 800689e:	4299      	cmp	r1, r3
 80068a0:	460f      	mov	r7, r1
 80068a2:	460e      	mov	r6, r1
 80068a4:	f340 82da 	ble.w	8006e5c <__ieee754_pow+0x90c>
 80068a8:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80068ac:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80068b0:	4303      	orrs	r3, r0
 80068b2:	f000 81d5 	beq.w	8006c60 <__ieee754_pow+0x710>
 80068b6:	a30e      	add	r3, pc, #56	; (adr r3, 80068f0 <__ieee754_pow+0x3a0>)
 80068b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068c0:	f7f9 fdfe 	bl	80004c0 <__aeabi_dmul>
 80068c4:	a30a      	add	r3, pc, #40	; (adr r3, 80068f0 <__ieee754_pow+0x3a0>)
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	e6d2      	b.n	8006672 <__ieee754_pow+0x122>
 80068cc:	f3af 8000 	nop.w
 80068d0:	60000000 	.word	0x60000000
 80068d4:	3ff71547 	.word	0x3ff71547
 80068d8:	f85ddf44 	.word	0xf85ddf44
 80068dc:	3e54ae0b 	.word	0x3e54ae0b
 80068e0:	55555555 	.word	0x55555555
 80068e4:	3fd55555 	.word	0x3fd55555
 80068e8:	652b82fe 	.word	0x652b82fe
 80068ec:	3ff71547 	.word	0x3ff71547
 80068f0:	8800759c 	.word	0x8800759c
 80068f4:	7e37e43c 	.word	0x7e37e43c
 80068f8:	3ff00000 	.word	0x3ff00000
 80068fc:	3fd00000 	.word	0x3fd00000
 8006900:	3fe00000 	.word	0x3fe00000
 8006904:	bff00000 	.word	0xbff00000
 8006908:	408fffff 	.word	0x408fffff
 800690c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	da05      	bge.n	8006922 <__ieee754_pow+0x3d2>
 8006916:	4bca      	ldr	r3, [pc, #808]	; (8006c40 <__ieee754_pow+0x6f0>)
 8006918:	f7f9 fdd2 	bl	80004c0 <__aeabi_dmul>
 800691c:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006920:	460c      	mov	r4, r1
 8006922:	1523      	asrs	r3, r4, #20
 8006924:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006928:	4413      	add	r3, r2
 800692a:	9307      	str	r3, [sp, #28]
 800692c:	4bc5      	ldr	r3, [pc, #788]	; (8006c44 <__ieee754_pow+0x6f4>)
 800692e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006932:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006936:	429c      	cmp	r4, r3
 8006938:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800693c:	dd08      	ble.n	8006950 <__ieee754_pow+0x400>
 800693e:	4bc2      	ldr	r3, [pc, #776]	; (8006c48 <__ieee754_pow+0x6f8>)
 8006940:	429c      	cmp	r4, r3
 8006942:	f340 8154 	ble.w	8006bee <__ieee754_pow+0x69e>
 8006946:	9b07      	ldr	r3, [sp, #28]
 8006948:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800694c:	3301      	adds	r3, #1
 800694e:	9307      	str	r3, [sp, #28]
 8006950:	2600      	movs	r6, #0
 8006952:	4629      	mov	r1, r5
 8006954:	00f3      	lsls	r3, r6, #3
 8006956:	930d      	str	r3, [sp, #52]	; 0x34
 8006958:	4bbc      	ldr	r3, [pc, #752]	; (8006c4c <__ieee754_pow+0x6fc>)
 800695a:	00f2      	lsls	r2, r6, #3
 800695c:	4413      	add	r3, r2
 800695e:	cb18      	ldmia	r3, {r3, r4}
 8006960:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8006964:	461a      	mov	r2, r3
 8006966:	4623      	mov	r3, r4
 8006968:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800696c:	f7f9 fbf4 	bl	8000158 <__aeabi_dsub>
 8006970:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006974:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006978:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800697c:	f7f9 fbee 	bl	800015c <__adddf3>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	2000      	movs	r0, #0
 8006986:	49b2      	ldr	r1, [pc, #712]	; (8006c50 <__ieee754_pow+0x700>)
 8006988:	f7f9 fec4 	bl	8000714 <__aeabi_ddiv>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006994:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006998:	f7f9 fd92 	bl	80004c0 <__aeabi_dmul>
 800699c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069a0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80069a4:	f04f 0a00 	mov.w	sl, #0
 80069a8:	2200      	movs	r2, #0
 80069aa:	106d      	asrs	r5, r5, #1
 80069ac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80069b0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80069b4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80069b8:	4659      	mov	r1, fp
 80069ba:	4650      	mov	r0, sl
 80069bc:	4614      	mov	r4, r2
 80069be:	461d      	mov	r5, r3
 80069c0:	f7f9 fd7e 	bl	80004c0 <__aeabi_dmul>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80069cc:	f7f9 fbc4 	bl	8000158 <__aeabi_dsub>
 80069d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069d4:	4606      	mov	r6, r0
 80069d6:	460f      	mov	r7, r1
 80069d8:	4620      	mov	r0, r4
 80069da:	4629      	mov	r1, r5
 80069dc:	f7f9 fbbc 	bl	8000158 <__aeabi_dsub>
 80069e0:	4602      	mov	r2, r0
 80069e2:	460b      	mov	r3, r1
 80069e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069e8:	f7f9 fbb6 	bl	8000158 <__aeabi_dsub>
 80069ec:	465b      	mov	r3, fp
 80069ee:	4652      	mov	r2, sl
 80069f0:	f7f9 fd66 	bl	80004c0 <__aeabi_dmul>
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	4630      	mov	r0, r6
 80069fa:	4639      	mov	r1, r7
 80069fc:	f7f9 fbac 	bl	8000158 <__aeabi_dsub>
 8006a00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a04:	f7f9 fd5c 	bl	80004c0 <__aeabi_dmul>
 8006a08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a0c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a10:	4610      	mov	r0, r2
 8006a12:	4619      	mov	r1, r3
 8006a14:	f7f9 fd54 	bl	80004c0 <__aeabi_dmul>
 8006a18:	a377      	add	r3, pc, #476	; (adr r3, 8006bf8 <__ieee754_pow+0x6a8>)
 8006a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1e:	4604      	mov	r4, r0
 8006a20:	460d      	mov	r5, r1
 8006a22:	f7f9 fd4d 	bl	80004c0 <__aeabi_dmul>
 8006a26:	a376      	add	r3, pc, #472	; (adr r3, 8006c00 <__ieee754_pow+0x6b0>)
 8006a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2c:	f7f9 fb96 	bl	800015c <__adddf3>
 8006a30:	4622      	mov	r2, r4
 8006a32:	462b      	mov	r3, r5
 8006a34:	f7f9 fd44 	bl	80004c0 <__aeabi_dmul>
 8006a38:	a373      	add	r3, pc, #460	; (adr r3, 8006c08 <__ieee754_pow+0x6b8>)
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	f7f9 fb8d 	bl	800015c <__adddf3>
 8006a42:	4622      	mov	r2, r4
 8006a44:	462b      	mov	r3, r5
 8006a46:	f7f9 fd3b 	bl	80004c0 <__aeabi_dmul>
 8006a4a:	a371      	add	r3, pc, #452	; (adr r3, 8006c10 <__ieee754_pow+0x6c0>)
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f7f9 fb84 	bl	800015c <__adddf3>
 8006a54:	4622      	mov	r2, r4
 8006a56:	462b      	mov	r3, r5
 8006a58:	f7f9 fd32 	bl	80004c0 <__aeabi_dmul>
 8006a5c:	a36e      	add	r3, pc, #440	; (adr r3, 8006c18 <__ieee754_pow+0x6c8>)
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	f7f9 fb7b 	bl	800015c <__adddf3>
 8006a66:	4622      	mov	r2, r4
 8006a68:	462b      	mov	r3, r5
 8006a6a:	f7f9 fd29 	bl	80004c0 <__aeabi_dmul>
 8006a6e:	a36c      	add	r3, pc, #432	; (adr r3, 8006c20 <__ieee754_pow+0x6d0>)
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f7f9 fb72 	bl	800015c <__adddf3>
 8006a78:	4622      	mov	r2, r4
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	460f      	mov	r7, r1
 8006a7e:	462b      	mov	r3, r5
 8006a80:	4620      	mov	r0, r4
 8006a82:	4629      	mov	r1, r5
 8006a84:	f7f9 fd1c 	bl	80004c0 <__aeabi_dmul>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	4639      	mov	r1, r7
 8006a90:	f7f9 fd16 	bl	80004c0 <__aeabi_dmul>
 8006a94:	4604      	mov	r4, r0
 8006a96:	460d      	mov	r5, r1
 8006a98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a9c:	465b      	mov	r3, fp
 8006a9e:	4652      	mov	r2, sl
 8006aa0:	f7f9 fb5c 	bl	800015c <__adddf3>
 8006aa4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006aa8:	f7f9 fd0a 	bl	80004c0 <__aeabi_dmul>
 8006aac:	4622      	mov	r2, r4
 8006aae:	462b      	mov	r3, r5
 8006ab0:	f7f9 fb54 	bl	800015c <__adddf3>
 8006ab4:	465b      	mov	r3, fp
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	460f      	mov	r7, r1
 8006aba:	4652      	mov	r2, sl
 8006abc:	4659      	mov	r1, fp
 8006abe:	4650      	mov	r0, sl
 8006ac0:	f7f9 fcfe 	bl	80004c0 <__aeabi_dmul>
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	4b63      	ldr	r3, [pc, #396]	; (8006c54 <__ieee754_pow+0x704>)
 8006ac8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006acc:	f7f9 fb46 	bl	800015c <__adddf3>
 8006ad0:	4632      	mov	r2, r6
 8006ad2:	463b      	mov	r3, r7
 8006ad4:	f7f9 fb42 	bl	800015c <__adddf3>
 8006ad8:	4650      	mov	r0, sl
 8006ada:	460d      	mov	r5, r1
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4650      	mov	r0, sl
 8006ae2:	4659      	mov	r1, fp
 8006ae4:	f7f9 fcec 	bl	80004c0 <__aeabi_dmul>
 8006ae8:	2200      	movs	r2, #0
 8006aea:	4680      	mov	r8, r0
 8006aec:	4689      	mov	r9, r1
 8006aee:	4b59      	ldr	r3, [pc, #356]	; (8006c54 <__ieee754_pow+0x704>)
 8006af0:	4629      	mov	r1, r5
 8006af2:	4650      	mov	r0, sl
 8006af4:	f7f9 fb30 	bl	8000158 <__aeabi_dsub>
 8006af8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006afc:	f7f9 fb2c 	bl	8000158 <__aeabi_dsub>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4630      	mov	r0, r6
 8006b06:	4639      	mov	r1, r7
 8006b08:	f7f9 fb26 	bl	8000158 <__aeabi_dsub>
 8006b0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b10:	f7f9 fcd6 	bl	80004c0 <__aeabi_dmul>
 8006b14:	462b      	mov	r3, r5
 8006b16:	4606      	mov	r6, r0
 8006b18:	460f      	mov	r7, r1
 8006b1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b1e:	4652      	mov	r2, sl
 8006b20:	f7f9 fcce 	bl	80004c0 <__aeabi_dmul>
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4630      	mov	r0, r6
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	f7f9 fb16 	bl	800015c <__adddf3>
 8006b30:	4606      	mov	r6, r0
 8006b32:	460f      	mov	r7, r1
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4640      	mov	r0, r8
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	f7f9 fb0e 	bl	800015c <__adddf3>
 8006b40:	a339      	add	r3, pc, #228	; (adr r3, 8006c28 <__ieee754_pow+0x6d8>)
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	4650      	mov	r0, sl
 8006b48:	460d      	mov	r5, r1
 8006b4a:	f7f9 fcb9 	bl	80004c0 <__aeabi_dmul>
 8006b4e:	4642      	mov	r2, r8
 8006b50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b54:	464b      	mov	r3, r9
 8006b56:	4629      	mov	r1, r5
 8006b58:	4650      	mov	r0, sl
 8006b5a:	f7f9 fafd 	bl	8000158 <__aeabi_dsub>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4630      	mov	r0, r6
 8006b64:	4639      	mov	r1, r7
 8006b66:	f7f9 faf7 	bl	8000158 <__aeabi_dsub>
 8006b6a:	a331      	add	r3, pc, #196	; (adr r3, 8006c30 <__ieee754_pow+0x6e0>)
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f7f9 fca6 	bl	80004c0 <__aeabi_dmul>
 8006b74:	a330      	add	r3, pc, #192	; (adr r3, 8006c38 <__ieee754_pow+0x6e8>)
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	4606      	mov	r6, r0
 8006b7c:	460f      	mov	r7, r1
 8006b7e:	4650      	mov	r0, sl
 8006b80:	4629      	mov	r1, r5
 8006b82:	f7f9 fc9d 	bl	80004c0 <__aeabi_dmul>
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	4639      	mov	r1, r7
 8006b8e:	f7f9 fae5 	bl	800015c <__adddf3>
 8006b92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b94:	4b30      	ldr	r3, [pc, #192]	; (8006c58 <__ieee754_pow+0x708>)
 8006b96:	4413      	add	r3, r2
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	f7f9 fade 	bl	800015c <__adddf3>
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	9807      	ldr	r0, [sp, #28]
 8006ba4:	460d      	mov	r5, r1
 8006ba6:	f7f9 fc25 	bl	80003f4 <__aeabi_i2d>
 8006baa:	4606      	mov	r6, r0
 8006bac:	460f      	mov	r7, r1
 8006bae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bb0:	4b2a      	ldr	r3, [pc, #168]	; (8006c5c <__ieee754_pow+0x70c>)
 8006bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bbc:	4622      	mov	r2, r4
 8006bbe:	462b      	mov	r3, r5
 8006bc0:	f7f9 facc 	bl	800015c <__adddf3>
 8006bc4:	4642      	mov	r2, r8
 8006bc6:	464b      	mov	r3, r9
 8006bc8:	f7f9 fac8 	bl	800015c <__adddf3>
 8006bcc:	4632      	mov	r2, r6
 8006bce:	463b      	mov	r3, r7
 8006bd0:	f7f9 fac4 	bl	800015c <__adddf3>
 8006bd4:	4632      	mov	r2, r6
 8006bd6:	463b      	mov	r3, r7
 8006bd8:	4650      	mov	r0, sl
 8006bda:	468b      	mov	fp, r1
 8006bdc:	f7f9 fabc 	bl	8000158 <__aeabi_dsub>
 8006be0:	4642      	mov	r2, r8
 8006be2:	464b      	mov	r3, r9
 8006be4:	f7f9 fab8 	bl	8000158 <__aeabi_dsub>
 8006be8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bec:	e613      	b.n	8006816 <__ieee754_pow+0x2c6>
 8006bee:	2601      	movs	r6, #1
 8006bf0:	e6af      	b.n	8006952 <__ieee754_pow+0x402>
 8006bf2:	bf00      	nop
 8006bf4:	f3af 8000 	nop.w
 8006bf8:	4a454eef 	.word	0x4a454eef
 8006bfc:	3fca7e28 	.word	0x3fca7e28
 8006c00:	93c9db65 	.word	0x93c9db65
 8006c04:	3fcd864a 	.word	0x3fcd864a
 8006c08:	a91d4101 	.word	0xa91d4101
 8006c0c:	3fd17460 	.word	0x3fd17460
 8006c10:	518f264d 	.word	0x518f264d
 8006c14:	3fd55555 	.word	0x3fd55555
 8006c18:	db6fabff 	.word	0xdb6fabff
 8006c1c:	3fdb6db6 	.word	0x3fdb6db6
 8006c20:	33333303 	.word	0x33333303
 8006c24:	3fe33333 	.word	0x3fe33333
 8006c28:	e0000000 	.word	0xe0000000
 8006c2c:	3feec709 	.word	0x3feec709
 8006c30:	dc3a03fd 	.word	0xdc3a03fd
 8006c34:	3feec709 	.word	0x3feec709
 8006c38:	145b01f5 	.word	0x145b01f5
 8006c3c:	be3e2fe0 	.word	0xbe3e2fe0
 8006c40:	43400000 	.word	0x43400000
 8006c44:	0003988e 	.word	0x0003988e
 8006c48:	000bb679 	.word	0x000bb679
 8006c4c:	08008030 	.word	0x08008030
 8006c50:	3ff00000 	.word	0x3ff00000
 8006c54:	40080000 	.word	0x40080000
 8006c58:	08008050 	.word	0x08008050
 8006c5c:	08008040 	.word	0x08008040
 8006c60:	a39b      	add	r3, pc, #620	; (adr r3, 8006ed0 <__ieee754_pow+0x980>)
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	4640      	mov	r0, r8
 8006c68:	4649      	mov	r1, r9
 8006c6a:	f7f9 fa77 	bl	800015c <__adddf3>
 8006c6e:	4622      	mov	r2, r4
 8006c70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c74:	462b      	mov	r3, r5
 8006c76:	4650      	mov	r0, sl
 8006c78:	4639      	mov	r1, r7
 8006c7a:	f7f9 fa6d 	bl	8000158 <__aeabi_dsub>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c86:	f7f9 feab 	bl	80009e0 <__aeabi_dcmpgt>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	f47f ae13 	bne.w	80068b6 <__ieee754_pow+0x366>
 8006c90:	4aa3      	ldr	r2, [pc, #652]	; (8006f20 <__ieee754_pow+0x9d0>)
 8006c92:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006c96:	4293      	cmp	r3, r2
 8006c98:	f340 8104 	ble.w	8006ea4 <__ieee754_pow+0x954>
 8006c9c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	151b      	asrs	r3, r3, #20
 8006ca4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006ca8:	fa4a f303 	asr.w	r3, sl, r3
 8006cac:	4433      	add	r3, r6
 8006cae:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006cb2:	4f9c      	ldr	r7, [pc, #624]	; (8006f24 <__ieee754_pow+0x9d4>)
 8006cb4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006cb8:	4117      	asrs	r7, r2
 8006cba:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006cbe:	ea23 0107 	bic.w	r1, r3, r7
 8006cc2:	f1c2 0214 	rsb	r2, r2, #20
 8006cc6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006cca:	fa4a fa02 	asr.w	sl, sl, r2
 8006cce:	2e00      	cmp	r6, #0
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	bfb8      	it	lt
 8006cda:	f1ca 0a00 	rsblt	sl, sl, #0
 8006cde:	f7f9 fa3b 	bl	8000158 <__aeabi_dsub>
 8006ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cea:	4642      	mov	r2, r8
 8006cec:	464b      	mov	r3, r9
 8006cee:	f7f9 fa35 	bl	800015c <__adddf3>
 8006cf2:	a379      	add	r3, pc, #484	; (adr r3, 8006ed8 <__ieee754_pow+0x988>)
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	460d      	mov	r5, r1
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	f7f9 fbdf 	bl	80004c0 <__aeabi_dmul>
 8006d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d06:	4606      	mov	r6, r0
 8006d08:	460f      	mov	r7, r1
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	f7f9 fa23 	bl	8000158 <__aeabi_dsub>
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	4640      	mov	r0, r8
 8006d18:	4649      	mov	r1, r9
 8006d1a:	f7f9 fa1d 	bl	8000158 <__aeabi_dsub>
 8006d1e:	a370      	add	r3, pc, #448	; (adr r3, 8006ee0 <__ieee754_pow+0x990>)
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	f7f9 fbcc 	bl	80004c0 <__aeabi_dmul>
 8006d28:	a36f      	add	r3, pc, #444	; (adr r3, 8006ee8 <__ieee754_pow+0x998>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	4680      	mov	r8, r0
 8006d30:	4689      	mov	r9, r1
 8006d32:	4620      	mov	r0, r4
 8006d34:	4629      	mov	r1, r5
 8006d36:	f7f9 fbc3 	bl	80004c0 <__aeabi_dmul>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4640      	mov	r0, r8
 8006d40:	4649      	mov	r1, r9
 8006d42:	f7f9 fa0b 	bl	800015c <__adddf3>
 8006d46:	4604      	mov	r4, r0
 8006d48:	460d      	mov	r5, r1
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4630      	mov	r0, r6
 8006d50:	4639      	mov	r1, r7
 8006d52:	f7f9 fa03 	bl	800015c <__adddf3>
 8006d56:	4632      	mov	r2, r6
 8006d58:	463b      	mov	r3, r7
 8006d5a:	4680      	mov	r8, r0
 8006d5c:	4689      	mov	r9, r1
 8006d5e:	f7f9 f9fb 	bl	8000158 <__aeabi_dsub>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4620      	mov	r0, r4
 8006d68:	4629      	mov	r1, r5
 8006d6a:	f7f9 f9f5 	bl	8000158 <__aeabi_dsub>
 8006d6e:	4642      	mov	r2, r8
 8006d70:	4606      	mov	r6, r0
 8006d72:	460f      	mov	r7, r1
 8006d74:	464b      	mov	r3, r9
 8006d76:	4640      	mov	r0, r8
 8006d78:	4649      	mov	r1, r9
 8006d7a:	f7f9 fba1 	bl	80004c0 <__aeabi_dmul>
 8006d7e:	a35c      	add	r3, pc, #368	; (adr r3, 8006ef0 <__ieee754_pow+0x9a0>)
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	4604      	mov	r4, r0
 8006d86:	460d      	mov	r5, r1
 8006d88:	f7f9 fb9a 	bl	80004c0 <__aeabi_dmul>
 8006d8c:	a35a      	add	r3, pc, #360	; (adr r3, 8006ef8 <__ieee754_pow+0x9a8>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f7f9 f9e1 	bl	8000158 <__aeabi_dsub>
 8006d96:	4622      	mov	r2, r4
 8006d98:	462b      	mov	r3, r5
 8006d9a:	f7f9 fb91 	bl	80004c0 <__aeabi_dmul>
 8006d9e:	a358      	add	r3, pc, #352	; (adr r3, 8006f00 <__ieee754_pow+0x9b0>)
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	f7f9 f9da 	bl	800015c <__adddf3>
 8006da8:	4622      	mov	r2, r4
 8006daa:	462b      	mov	r3, r5
 8006dac:	f7f9 fb88 	bl	80004c0 <__aeabi_dmul>
 8006db0:	a355      	add	r3, pc, #340	; (adr r3, 8006f08 <__ieee754_pow+0x9b8>)
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	f7f9 f9cf 	bl	8000158 <__aeabi_dsub>
 8006dba:	4622      	mov	r2, r4
 8006dbc:	462b      	mov	r3, r5
 8006dbe:	f7f9 fb7f 	bl	80004c0 <__aeabi_dmul>
 8006dc2:	a353      	add	r3, pc, #332	; (adr r3, 8006f10 <__ieee754_pow+0x9c0>)
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	f7f9 f9c8 	bl	800015c <__adddf3>
 8006dcc:	4622      	mov	r2, r4
 8006dce:	462b      	mov	r3, r5
 8006dd0:	f7f9 fb76 	bl	80004c0 <__aeabi_dmul>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4640      	mov	r0, r8
 8006dda:	4649      	mov	r1, r9
 8006ddc:	f7f9 f9bc 	bl	8000158 <__aeabi_dsub>
 8006de0:	4604      	mov	r4, r0
 8006de2:	460d      	mov	r5, r1
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4640      	mov	r0, r8
 8006dea:	4649      	mov	r1, r9
 8006dec:	f7f9 fb68 	bl	80004c0 <__aeabi_dmul>
 8006df0:	2200      	movs	r2, #0
 8006df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006df6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	f7f9 f9ab 	bl	8000158 <__aeabi_dsub>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e0a:	f7f9 fc83 	bl	8000714 <__aeabi_ddiv>
 8006e0e:	4632      	mov	r2, r6
 8006e10:	4604      	mov	r4, r0
 8006e12:	460d      	mov	r5, r1
 8006e14:	463b      	mov	r3, r7
 8006e16:	4640      	mov	r0, r8
 8006e18:	4649      	mov	r1, r9
 8006e1a:	f7f9 fb51 	bl	80004c0 <__aeabi_dmul>
 8006e1e:	4632      	mov	r2, r6
 8006e20:	463b      	mov	r3, r7
 8006e22:	f7f9 f99b 	bl	800015c <__adddf3>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	f7f9 f993 	bl	8000158 <__aeabi_dsub>
 8006e32:	4642      	mov	r2, r8
 8006e34:	464b      	mov	r3, r9
 8006e36:	f7f9 f98f 	bl	8000158 <__aeabi_dsub>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	2000      	movs	r0, #0
 8006e40:	4939      	ldr	r1, [pc, #228]	; (8006f28 <__ieee754_pow+0x9d8>)
 8006e42:	f7f9 f989 	bl	8000158 <__aeabi_dsub>
 8006e46:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006e4a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006e4e:	da2c      	bge.n	8006eaa <__ieee754_pow+0x95a>
 8006e50:	4652      	mov	r2, sl
 8006e52:	f000 fb49 	bl	80074e8 <scalbn>
 8006e56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e5a:	e40a      	b.n	8006672 <__ieee754_pow+0x122>
 8006e5c:	4b33      	ldr	r3, [pc, #204]	; (8006f2c <__ieee754_pow+0x9dc>)
 8006e5e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006e62:	429f      	cmp	r7, r3
 8006e64:	f77f af14 	ble.w	8006c90 <__ieee754_pow+0x740>
 8006e68:	4b31      	ldr	r3, [pc, #196]	; (8006f30 <__ieee754_pow+0x9e0>)
 8006e6a:	440b      	add	r3, r1
 8006e6c:	4303      	orrs	r3, r0
 8006e6e:	d00b      	beq.n	8006e88 <__ieee754_pow+0x938>
 8006e70:	a329      	add	r3, pc, #164	; (adr r3, 8006f18 <__ieee754_pow+0x9c8>)
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e7a:	f7f9 fb21 	bl	80004c0 <__aeabi_dmul>
 8006e7e:	a326      	add	r3, pc, #152	; (adr r3, 8006f18 <__ieee754_pow+0x9c8>)
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	f7ff bbf5 	b.w	8006672 <__ieee754_pow+0x122>
 8006e88:	4622      	mov	r2, r4
 8006e8a:	462b      	mov	r3, r5
 8006e8c:	f7f9 f964 	bl	8000158 <__aeabi_dsub>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4640      	mov	r0, r8
 8006e96:	4649      	mov	r1, r9
 8006e98:	f7f9 fd8e 	bl	80009b8 <__aeabi_dcmple>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	f43f aef7 	beq.w	8006c90 <__ieee754_pow+0x740>
 8006ea2:	e7e5      	b.n	8006e70 <__ieee754_pow+0x920>
 8006ea4:	f04f 0a00 	mov.w	sl, #0
 8006ea8:	e71d      	b.n	8006ce6 <__ieee754_pow+0x796>
 8006eaa:	4621      	mov	r1, r4
 8006eac:	e7d3      	b.n	8006e56 <__ieee754_pow+0x906>
 8006eae:	2000      	movs	r0, #0
 8006eb0:	491d      	ldr	r1, [pc, #116]	; (8006f28 <__ieee754_pow+0x9d8>)
 8006eb2:	f7ff bbac 	b.w	800660e <__ieee754_pow+0xbe>
 8006eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eba:	f7ff bba8 	b.w	800660e <__ieee754_pow+0xbe>
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	4641      	mov	r1, r8
 8006ec2:	f7ff bba4 	b.w	800660e <__ieee754_pow+0xbe>
 8006ec6:	9200      	str	r2, [sp, #0]
 8006ec8:	f7ff bbb4 	b.w	8006634 <__ieee754_pow+0xe4>
 8006ecc:	f3af 8000 	nop.w
 8006ed0:	652b82fe 	.word	0x652b82fe
 8006ed4:	3c971547 	.word	0x3c971547
 8006ed8:	00000000 	.word	0x00000000
 8006edc:	3fe62e43 	.word	0x3fe62e43
 8006ee0:	fefa39ef 	.word	0xfefa39ef
 8006ee4:	3fe62e42 	.word	0x3fe62e42
 8006ee8:	0ca86c39 	.word	0x0ca86c39
 8006eec:	be205c61 	.word	0xbe205c61
 8006ef0:	72bea4d0 	.word	0x72bea4d0
 8006ef4:	3e663769 	.word	0x3e663769
 8006ef8:	c5d26bf1 	.word	0xc5d26bf1
 8006efc:	3ebbbd41 	.word	0x3ebbbd41
 8006f00:	af25de2c 	.word	0xaf25de2c
 8006f04:	3f11566a 	.word	0x3f11566a
 8006f08:	16bebd93 	.word	0x16bebd93
 8006f0c:	3f66c16c 	.word	0x3f66c16c
 8006f10:	5555553e 	.word	0x5555553e
 8006f14:	3fc55555 	.word	0x3fc55555
 8006f18:	c2f8f359 	.word	0xc2f8f359
 8006f1c:	01a56e1f 	.word	0x01a56e1f
 8006f20:	3fe00000 	.word	0x3fe00000
 8006f24:	000fffff 	.word	0x000fffff
 8006f28:	3ff00000 	.word	0x3ff00000
 8006f2c:	4090cbff 	.word	0x4090cbff
 8006f30:	3f6f3400 	.word	0x3f6f3400

08006f34 <__ieee754_sqrt>:
 8006f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f38:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8007088 <__ieee754_sqrt+0x154>
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	ea3e 0e01 	bics.w	lr, lr, r1
 8006f42:	460d      	mov	r5, r1
 8006f44:	4607      	mov	r7, r0
 8006f46:	460a      	mov	r2, r1
 8006f48:	460c      	mov	r4, r1
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	d10f      	bne.n	8006f6e <__ieee754_sqrt+0x3a>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	f7f9 fab5 	bl	80004c0 <__aeabi_dmul>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	f7f9 f8fd 	bl	800015c <__adddf3>
 8006f62:	4606      	mov	r6, r0
 8006f64:	460d      	mov	r5, r1
 8006f66:	4630      	mov	r0, r6
 8006f68:	4629      	mov	r1, r5
 8006f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f6e:	2900      	cmp	r1, #0
 8006f70:	dc0e      	bgt.n	8006f90 <__ieee754_sqrt+0x5c>
 8006f72:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 8006f76:	ea5e 0707 	orrs.w	r7, lr, r7
 8006f7a:	d0f4      	beq.n	8006f66 <__ieee754_sqrt+0x32>
 8006f7c:	b141      	cbz	r1, 8006f90 <__ieee754_sqrt+0x5c>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	f7f9 f8e9 	bl	8000158 <__aeabi_dsub>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	f7f9 fbc3 	bl	8000714 <__aeabi_ddiv>
 8006f8e:	e7e8      	b.n	8006f62 <__ieee754_sqrt+0x2e>
 8006f90:	1512      	asrs	r2, r2, #20
 8006f92:	d10c      	bne.n	8006fae <__ieee754_sqrt+0x7a>
 8006f94:	2c00      	cmp	r4, #0
 8006f96:	d06e      	beq.n	8007076 <__ieee754_sqrt+0x142>
 8006f98:	2100      	movs	r1, #0
 8006f9a:	02e6      	lsls	r6, r4, #11
 8006f9c:	d56f      	bpl.n	800707e <__ieee754_sqrt+0x14a>
 8006f9e:	1e48      	subs	r0, r1, #1
 8006fa0:	1a12      	subs	r2, r2, r0
 8006fa2:	f1c1 0020 	rsb	r0, r1, #32
 8006fa6:	fa23 f000 	lsr.w	r0, r3, r0
 8006faa:	4304      	orrs	r4, r0
 8006fac:	408b      	lsls	r3, r1
 8006fae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006fb2:	07d5      	lsls	r5, r2, #31
 8006fb4:	f04f 0500 	mov.w	r5, #0
 8006fb8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006fbc:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8006fc0:	bf42      	ittt	mi
 8006fc2:	0064      	lslmi	r4, r4, #1
 8006fc4:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 8006fc8:	005b      	lslmi	r3, r3, #1
 8006fca:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8006fce:	1050      	asrs	r0, r2, #1
 8006fd0:	4421      	add	r1, r4
 8006fd2:	2216      	movs	r2, #22
 8006fd4:	462c      	mov	r4, r5
 8006fd6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	19a7      	adds	r7, r4, r6
 8006fde:	428f      	cmp	r7, r1
 8006fe0:	bfde      	ittt	le
 8006fe2:	1bc9      	suble	r1, r1, r7
 8006fe4:	19bc      	addle	r4, r7, r6
 8006fe6:	19ad      	addle	r5, r5, r6
 8006fe8:	0049      	lsls	r1, r1, #1
 8006fea:	3a01      	subs	r2, #1
 8006fec:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006ff0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006ff4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006ff8:	d1f0      	bne.n	8006fdc <__ieee754_sqrt+0xa8>
 8006ffa:	f04f 0e20 	mov.w	lr, #32
 8006ffe:	4694      	mov	ip, r2
 8007000:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007004:	42a1      	cmp	r1, r4
 8007006:	eb06 070c 	add.w	r7, r6, ip
 800700a:	dc02      	bgt.n	8007012 <__ieee754_sqrt+0xde>
 800700c:	d112      	bne.n	8007034 <__ieee754_sqrt+0x100>
 800700e:	429f      	cmp	r7, r3
 8007010:	d810      	bhi.n	8007034 <__ieee754_sqrt+0x100>
 8007012:	2f00      	cmp	r7, #0
 8007014:	eb07 0c06 	add.w	ip, r7, r6
 8007018:	da34      	bge.n	8007084 <__ieee754_sqrt+0x150>
 800701a:	f1bc 0f00 	cmp.w	ip, #0
 800701e:	db31      	blt.n	8007084 <__ieee754_sqrt+0x150>
 8007020:	f104 0801 	add.w	r8, r4, #1
 8007024:	1b09      	subs	r1, r1, r4
 8007026:	4644      	mov	r4, r8
 8007028:	429f      	cmp	r7, r3
 800702a:	bf88      	it	hi
 800702c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007030:	1bdb      	subs	r3, r3, r7
 8007032:	4432      	add	r2, r6
 8007034:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8007038:	f1be 0e01 	subs.w	lr, lr, #1
 800703c:	4439      	add	r1, r7
 800703e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007042:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007046:	d1dd      	bne.n	8007004 <__ieee754_sqrt+0xd0>
 8007048:	430b      	orrs	r3, r1
 800704a:	d006      	beq.n	800705a <__ieee754_sqrt+0x126>
 800704c:	1c54      	adds	r4, r2, #1
 800704e:	bf0b      	itete	eq
 8007050:	4672      	moveq	r2, lr
 8007052:	3201      	addne	r2, #1
 8007054:	3501      	addeq	r5, #1
 8007056:	f022 0201 	bicne.w	r2, r2, #1
 800705a:	106b      	asrs	r3, r5, #1
 800705c:	0852      	lsrs	r2, r2, #1
 800705e:	07e9      	lsls	r1, r5, #31
 8007060:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007064:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007068:	bf48      	it	mi
 800706a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800706e:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 8007072:	4616      	mov	r6, r2
 8007074:	e777      	b.n	8006f66 <__ieee754_sqrt+0x32>
 8007076:	0adc      	lsrs	r4, r3, #11
 8007078:	3a15      	subs	r2, #21
 800707a:	055b      	lsls	r3, r3, #21
 800707c:	e78a      	b.n	8006f94 <__ieee754_sqrt+0x60>
 800707e:	0064      	lsls	r4, r4, #1
 8007080:	3101      	adds	r1, #1
 8007082:	e78a      	b.n	8006f9a <__ieee754_sqrt+0x66>
 8007084:	46a0      	mov	r8, r4
 8007086:	e7cd      	b.n	8007024 <__ieee754_sqrt+0xf0>
 8007088:	7ff00000 	.word	0x7ff00000
 800708c:	00000000 	.word	0x00000000

08007090 <atan>:
 8007090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	4bba      	ldr	r3, [pc, #744]	; (8007380 <atan+0x2f0>)
 8007096:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800709a:	429e      	cmp	r6, r3
 800709c:	4604      	mov	r4, r0
 800709e:	460d      	mov	r5, r1
 80070a0:	468b      	mov	fp, r1
 80070a2:	dd17      	ble.n	80070d4 <atan+0x44>
 80070a4:	4ab7      	ldr	r2, [pc, #732]	; (8007384 <atan+0x2f4>)
 80070a6:	4296      	cmp	r6, r2
 80070a8:	dc01      	bgt.n	80070ae <atan+0x1e>
 80070aa:	d109      	bne.n	80070c0 <atan+0x30>
 80070ac:	b140      	cbz	r0, 80070c0 <atan+0x30>
 80070ae:	4622      	mov	r2, r4
 80070b0:	462b      	mov	r3, r5
 80070b2:	4620      	mov	r0, r4
 80070b4:	4629      	mov	r1, r5
 80070b6:	f7f9 f851 	bl	800015c <__adddf3>
 80070ba:	4604      	mov	r4, r0
 80070bc:	460d      	mov	r5, r1
 80070be:	e005      	b.n	80070cc <atan+0x3c>
 80070c0:	f1bb 0f00 	cmp.w	fp, #0
 80070c4:	4cb0      	ldr	r4, [pc, #704]	; (8007388 <atan+0x2f8>)
 80070c6:	f300 8129 	bgt.w	800731c <atan+0x28c>
 80070ca:	4db0      	ldr	r5, [pc, #704]	; (800738c <atan+0x2fc>)
 80070cc:	4620      	mov	r0, r4
 80070ce:	4629      	mov	r1, r5
 80070d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d4:	4bae      	ldr	r3, [pc, #696]	; (8007390 <atan+0x300>)
 80070d6:	429e      	cmp	r6, r3
 80070d8:	dc11      	bgt.n	80070fe <atan+0x6e>
 80070da:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80070de:	429e      	cmp	r6, r3
 80070e0:	dc0a      	bgt.n	80070f8 <atan+0x68>
 80070e2:	a38f      	add	r3, pc, #572	; (adr r3, 8007320 <atan+0x290>)
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	f7f9 f838 	bl	800015c <__adddf3>
 80070ec:	2200      	movs	r2, #0
 80070ee:	4ba9      	ldr	r3, [pc, #676]	; (8007394 <atan+0x304>)
 80070f0:	f7f9 fc76 	bl	80009e0 <__aeabi_dcmpgt>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d1e9      	bne.n	80070cc <atan+0x3c>
 80070f8:	f04f 3aff 	mov.w	sl, #4294967295
 80070fc:	e027      	b.n	800714e <atan+0xbe>
 80070fe:	f000 f959 	bl	80073b4 <fabs>
 8007102:	4ba5      	ldr	r3, [pc, #660]	; (8007398 <atan+0x308>)
 8007104:	4604      	mov	r4, r0
 8007106:	429e      	cmp	r6, r3
 8007108:	460d      	mov	r5, r1
 800710a:	f300 80b8 	bgt.w	800727e <atan+0x1ee>
 800710e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007112:	429e      	cmp	r6, r3
 8007114:	f300 809c 	bgt.w	8007250 <atan+0x1c0>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	f7f9 f81e 	bl	800015c <__adddf3>
 8007120:	2200      	movs	r2, #0
 8007122:	4b9c      	ldr	r3, [pc, #624]	; (8007394 <atan+0x304>)
 8007124:	f7f9 f818 	bl	8000158 <__aeabi_dsub>
 8007128:	2200      	movs	r2, #0
 800712a:	4606      	mov	r6, r0
 800712c:	460f      	mov	r7, r1
 800712e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007132:	4620      	mov	r0, r4
 8007134:	4629      	mov	r1, r5
 8007136:	f7f9 f811 	bl	800015c <__adddf3>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	4630      	mov	r0, r6
 8007140:	4639      	mov	r1, r7
 8007142:	f7f9 fae7 	bl	8000714 <__aeabi_ddiv>
 8007146:	f04f 0a00 	mov.w	sl, #0
 800714a:	4604      	mov	r4, r0
 800714c:	460d      	mov	r5, r1
 800714e:	4622      	mov	r2, r4
 8007150:	462b      	mov	r3, r5
 8007152:	4620      	mov	r0, r4
 8007154:	4629      	mov	r1, r5
 8007156:	f7f9 f9b3 	bl	80004c0 <__aeabi_dmul>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4680      	mov	r8, r0
 8007160:	4689      	mov	r9, r1
 8007162:	f7f9 f9ad 	bl	80004c0 <__aeabi_dmul>
 8007166:	a370      	add	r3, pc, #448	; (adr r3, 8007328 <atan+0x298>)
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	4606      	mov	r6, r0
 800716e:	460f      	mov	r7, r1
 8007170:	f7f9 f9a6 	bl	80004c0 <__aeabi_dmul>
 8007174:	a36e      	add	r3, pc, #440	; (adr r3, 8007330 <atan+0x2a0>)
 8007176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717a:	f7f8 ffef 	bl	800015c <__adddf3>
 800717e:	4632      	mov	r2, r6
 8007180:	463b      	mov	r3, r7
 8007182:	f7f9 f99d 	bl	80004c0 <__aeabi_dmul>
 8007186:	a36c      	add	r3, pc, #432	; (adr r3, 8007338 <atan+0x2a8>)
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	f7f8 ffe6 	bl	800015c <__adddf3>
 8007190:	4632      	mov	r2, r6
 8007192:	463b      	mov	r3, r7
 8007194:	f7f9 f994 	bl	80004c0 <__aeabi_dmul>
 8007198:	a369      	add	r3, pc, #420	; (adr r3, 8007340 <atan+0x2b0>)
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	f7f8 ffdd 	bl	800015c <__adddf3>
 80071a2:	4632      	mov	r2, r6
 80071a4:	463b      	mov	r3, r7
 80071a6:	f7f9 f98b 	bl	80004c0 <__aeabi_dmul>
 80071aa:	a367      	add	r3, pc, #412	; (adr r3, 8007348 <atan+0x2b8>)
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	f7f8 ffd4 	bl	800015c <__adddf3>
 80071b4:	4632      	mov	r2, r6
 80071b6:	463b      	mov	r3, r7
 80071b8:	f7f9 f982 	bl	80004c0 <__aeabi_dmul>
 80071bc:	a364      	add	r3, pc, #400	; (adr r3, 8007350 <atan+0x2c0>)
 80071be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c2:	f7f8 ffcb 	bl	800015c <__adddf3>
 80071c6:	4642      	mov	r2, r8
 80071c8:	464b      	mov	r3, r9
 80071ca:	f7f9 f979 	bl	80004c0 <__aeabi_dmul>
 80071ce:	a362      	add	r3, pc, #392	; (adr r3, 8007358 <atan+0x2c8>)
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	4680      	mov	r8, r0
 80071d6:	4689      	mov	r9, r1
 80071d8:	4630      	mov	r0, r6
 80071da:	4639      	mov	r1, r7
 80071dc:	f7f9 f970 	bl	80004c0 <__aeabi_dmul>
 80071e0:	a35f      	add	r3, pc, #380	; (adr r3, 8007360 <atan+0x2d0>)
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	f7f8 ffb7 	bl	8000158 <__aeabi_dsub>
 80071ea:	4632      	mov	r2, r6
 80071ec:	463b      	mov	r3, r7
 80071ee:	f7f9 f967 	bl	80004c0 <__aeabi_dmul>
 80071f2:	a35d      	add	r3, pc, #372	; (adr r3, 8007368 <atan+0x2d8>)
 80071f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f8:	f7f8 ffae 	bl	8000158 <__aeabi_dsub>
 80071fc:	4632      	mov	r2, r6
 80071fe:	463b      	mov	r3, r7
 8007200:	f7f9 f95e 	bl	80004c0 <__aeabi_dmul>
 8007204:	a35a      	add	r3, pc, #360	; (adr r3, 8007370 <atan+0x2e0>)
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f7f8 ffa5 	bl	8000158 <__aeabi_dsub>
 800720e:	4632      	mov	r2, r6
 8007210:	463b      	mov	r3, r7
 8007212:	f7f9 f955 	bl	80004c0 <__aeabi_dmul>
 8007216:	a358      	add	r3, pc, #352	; (adr r3, 8007378 <atan+0x2e8>)
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	f7f8 ff9c 	bl	8000158 <__aeabi_dsub>
 8007220:	4632      	mov	r2, r6
 8007222:	463b      	mov	r3, r7
 8007224:	f7f9 f94c 	bl	80004c0 <__aeabi_dmul>
 8007228:	f1ba 3fff 	cmp.w	sl, #4294967295
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	d14e      	bne.n	80072d0 <atan+0x240>
 8007232:	4640      	mov	r0, r8
 8007234:	4649      	mov	r1, r9
 8007236:	f7f8 ff91 	bl	800015c <__adddf3>
 800723a:	4622      	mov	r2, r4
 800723c:	462b      	mov	r3, r5
 800723e:	f7f9 f93f 	bl	80004c0 <__aeabi_dmul>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4620      	mov	r0, r4
 8007248:	4629      	mov	r1, r5
 800724a:	f7f8 ff85 	bl	8000158 <__aeabi_dsub>
 800724e:	e734      	b.n	80070ba <atan+0x2a>
 8007250:	2200      	movs	r2, #0
 8007252:	4b50      	ldr	r3, [pc, #320]	; (8007394 <atan+0x304>)
 8007254:	f7f8 ff80 	bl	8000158 <__aeabi_dsub>
 8007258:	2200      	movs	r2, #0
 800725a:	4606      	mov	r6, r0
 800725c:	460f      	mov	r7, r1
 800725e:	4b4d      	ldr	r3, [pc, #308]	; (8007394 <atan+0x304>)
 8007260:	4620      	mov	r0, r4
 8007262:	4629      	mov	r1, r5
 8007264:	f7f8 ff7a 	bl	800015c <__adddf3>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4630      	mov	r0, r6
 800726e:	4639      	mov	r1, r7
 8007270:	f7f9 fa50 	bl	8000714 <__aeabi_ddiv>
 8007274:	f04f 0a01 	mov.w	sl, #1
 8007278:	4604      	mov	r4, r0
 800727a:	460d      	mov	r5, r1
 800727c:	e767      	b.n	800714e <atan+0xbe>
 800727e:	4b47      	ldr	r3, [pc, #284]	; (800739c <atan+0x30c>)
 8007280:	429e      	cmp	r6, r3
 8007282:	dc1a      	bgt.n	80072ba <atan+0x22a>
 8007284:	2200      	movs	r2, #0
 8007286:	4b46      	ldr	r3, [pc, #280]	; (80073a0 <atan+0x310>)
 8007288:	f7f8 ff66 	bl	8000158 <__aeabi_dsub>
 800728c:	2200      	movs	r2, #0
 800728e:	4606      	mov	r6, r0
 8007290:	460f      	mov	r7, r1
 8007292:	4b43      	ldr	r3, [pc, #268]	; (80073a0 <atan+0x310>)
 8007294:	4620      	mov	r0, r4
 8007296:	4629      	mov	r1, r5
 8007298:	f7f9 f912 	bl	80004c0 <__aeabi_dmul>
 800729c:	2200      	movs	r2, #0
 800729e:	4b3d      	ldr	r3, [pc, #244]	; (8007394 <atan+0x304>)
 80072a0:	f7f8 ff5c 	bl	800015c <__adddf3>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4630      	mov	r0, r6
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f9 fa32 	bl	8000714 <__aeabi_ddiv>
 80072b0:	f04f 0a02 	mov.w	sl, #2
 80072b4:	4604      	mov	r4, r0
 80072b6:	460d      	mov	r5, r1
 80072b8:	e749      	b.n	800714e <atan+0xbe>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	2000      	movs	r0, #0
 80072c0:	4938      	ldr	r1, [pc, #224]	; (80073a4 <atan+0x314>)
 80072c2:	f7f9 fa27 	bl	8000714 <__aeabi_ddiv>
 80072c6:	f04f 0a03 	mov.w	sl, #3
 80072ca:	4604      	mov	r4, r0
 80072cc:	460d      	mov	r5, r1
 80072ce:	e73e      	b.n	800714e <atan+0xbe>
 80072d0:	4640      	mov	r0, r8
 80072d2:	4649      	mov	r1, r9
 80072d4:	f7f8 ff42 	bl	800015c <__adddf3>
 80072d8:	4622      	mov	r2, r4
 80072da:	462b      	mov	r3, r5
 80072dc:	f7f9 f8f0 	bl	80004c0 <__aeabi_dmul>
 80072e0:	4e31      	ldr	r6, [pc, #196]	; (80073a8 <atan+0x318>)
 80072e2:	4b32      	ldr	r3, [pc, #200]	; (80073ac <atan+0x31c>)
 80072e4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80072e8:	4456      	add	r6, sl
 80072ea:	449a      	add	sl, r3
 80072ec:	e9da 2300 	ldrd	r2, r3, [sl]
 80072f0:	f7f8 ff32 	bl	8000158 <__aeabi_dsub>
 80072f4:	4622      	mov	r2, r4
 80072f6:	462b      	mov	r3, r5
 80072f8:	f7f8 ff2e 	bl	8000158 <__aeabi_dsub>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007304:	f7f8 ff28 	bl	8000158 <__aeabi_dsub>
 8007308:	f1bb 0f00 	cmp.w	fp, #0
 800730c:	4604      	mov	r4, r0
 800730e:	460d      	mov	r5, r1
 8007310:	f6bf aedc 	bge.w	80070cc <atan+0x3c>
 8007314:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007318:	461d      	mov	r5, r3
 800731a:	e6d7      	b.n	80070cc <atan+0x3c>
 800731c:	4d24      	ldr	r5, [pc, #144]	; (80073b0 <atan+0x320>)
 800731e:	e6d5      	b.n	80070cc <atan+0x3c>
 8007320:	8800759c 	.word	0x8800759c
 8007324:	7e37e43c 	.word	0x7e37e43c
 8007328:	e322da11 	.word	0xe322da11
 800732c:	3f90ad3a 	.word	0x3f90ad3a
 8007330:	24760deb 	.word	0x24760deb
 8007334:	3fa97b4b 	.word	0x3fa97b4b
 8007338:	a0d03d51 	.word	0xa0d03d51
 800733c:	3fb10d66 	.word	0x3fb10d66
 8007340:	c54c206e 	.word	0xc54c206e
 8007344:	3fb745cd 	.word	0x3fb745cd
 8007348:	920083ff 	.word	0x920083ff
 800734c:	3fc24924 	.word	0x3fc24924
 8007350:	5555550d 	.word	0x5555550d
 8007354:	3fd55555 	.word	0x3fd55555
 8007358:	2c6a6c2f 	.word	0x2c6a6c2f
 800735c:	bfa2b444 	.word	0xbfa2b444
 8007360:	52defd9a 	.word	0x52defd9a
 8007364:	3fadde2d 	.word	0x3fadde2d
 8007368:	af749a6d 	.word	0xaf749a6d
 800736c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007370:	fe231671 	.word	0xfe231671
 8007374:	3fbc71c6 	.word	0x3fbc71c6
 8007378:	9998ebc4 	.word	0x9998ebc4
 800737c:	3fc99999 	.word	0x3fc99999
 8007380:	440fffff 	.word	0x440fffff
 8007384:	7ff00000 	.word	0x7ff00000
 8007388:	54442d18 	.word	0x54442d18
 800738c:	bff921fb 	.word	0xbff921fb
 8007390:	3fdbffff 	.word	0x3fdbffff
 8007394:	3ff00000 	.word	0x3ff00000
 8007398:	3ff2ffff 	.word	0x3ff2ffff
 800739c:	40037fff 	.word	0x40037fff
 80073a0:	3ff80000 	.word	0x3ff80000
 80073a4:	bff00000 	.word	0xbff00000
 80073a8:	08008060 	.word	0x08008060
 80073ac:	08008080 	.word	0x08008080
 80073b0:	3ff921fb 	.word	0x3ff921fb

080073b4 <fabs>:
 80073b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80073b8:	4770      	bx	lr

080073ba <finite>:
 80073ba:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80073be:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80073c2:	0fc0      	lsrs	r0, r0, #31
 80073c4:	4770      	bx	lr

080073c6 <matherr>:
 80073c6:	2000      	movs	r0, #0
 80073c8:	4770      	bx	lr
	...

080073cc <nan>:
 80073cc:	2000      	movs	r0, #0
 80073ce:	4901      	ldr	r1, [pc, #4]	; (80073d4 <nan+0x8>)
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	7ff80000 	.word	0x7ff80000

080073d8 <rint>:
 80073d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073da:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 80073de:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 80073e2:	2f13      	cmp	r7, #19
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4684      	mov	ip, r0
 80073ea:	460c      	mov	r4, r1
 80073ec:	4605      	mov	r5, r0
 80073ee:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80073f2:	dc56      	bgt.n	80074a2 <rint+0xca>
 80073f4:	2f00      	cmp	r7, #0
 80073f6:	da29      	bge.n	800744c <rint+0x74>
 80073f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80073fc:	4301      	orrs	r1, r0
 80073fe:	d021      	beq.n	8007444 <rint+0x6c>
 8007400:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8007404:	4305      	orrs	r5, r0
 8007406:	426b      	negs	r3, r5
 8007408:	432b      	orrs	r3, r5
 800740a:	0b1b      	lsrs	r3, r3, #12
 800740c:	0c64      	lsrs	r4, r4, #17
 800740e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007412:	0464      	lsls	r4, r4, #17
 8007414:	ea43 0104 	orr.w	r1, r3, r4
 8007418:	4b31      	ldr	r3, [pc, #196]	; (80074e0 <rint+0x108>)
 800741a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800741e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007422:	4622      	mov	r2, r4
 8007424:	462b      	mov	r3, r5
 8007426:	f7f8 fe99 	bl	800015c <__adddf3>
 800742a:	e9cd 0100 	strd	r0, r1, [sp]
 800742e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007432:	4622      	mov	r2, r4
 8007434:	462b      	mov	r3, r5
 8007436:	f7f8 fe8f 	bl	8000158 <__aeabi_dsub>
 800743a:	4602      	mov	r2, r0
 800743c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007440:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 8007444:	4610      	mov	r0, r2
 8007446:	4619      	mov	r1, r3
 8007448:	b003      	add	sp, #12
 800744a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800744c:	4925      	ldr	r1, [pc, #148]	; (80074e4 <rint+0x10c>)
 800744e:	4139      	asrs	r1, r7
 8007450:	ea03 0001 	and.w	r0, r3, r1
 8007454:	4310      	orrs	r0, r2
 8007456:	d0f5      	beq.n	8007444 <rint+0x6c>
 8007458:	084b      	lsrs	r3, r1, #1
 800745a:	ea04 0203 	and.w	r2, r4, r3
 800745e:	ea52 050c 	orrs.w	r5, r2, ip
 8007462:	d00a      	beq.n	800747a <rint+0xa2>
 8007464:	ea24 0303 	bic.w	r3, r4, r3
 8007468:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800746c:	2f13      	cmp	r7, #19
 800746e:	bf0c      	ite	eq
 8007470:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8007474:	2500      	movne	r5, #0
 8007476:	413c      	asrs	r4, r7
 8007478:	431c      	orrs	r4, r3
 800747a:	4b19      	ldr	r3, [pc, #100]	; (80074e0 <rint+0x108>)
 800747c:	4621      	mov	r1, r4
 800747e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007482:	4628      	mov	r0, r5
 8007484:	e9d6 4500 	ldrd	r4, r5, [r6]
 8007488:	4622      	mov	r2, r4
 800748a:	462b      	mov	r3, r5
 800748c:	f7f8 fe66 	bl	800015c <__adddf3>
 8007490:	e9cd 0100 	strd	r0, r1, [sp]
 8007494:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007498:	4622      	mov	r2, r4
 800749a:	462b      	mov	r3, r5
 800749c:	f7f8 fe5c 	bl	8000158 <__aeabi_dsub>
 80074a0:	e006      	b.n	80074b0 <rint+0xd8>
 80074a2:	2f33      	cmp	r7, #51	; 0x33
 80074a4:	dd07      	ble.n	80074b6 <rint+0xde>
 80074a6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80074aa:	d1cb      	bne.n	8007444 <rint+0x6c>
 80074ac:	f7f8 fe56 	bl	800015c <__adddf3>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	e7c6      	b.n	8007444 <rint+0x6c>
 80074b6:	f04f 31ff 	mov.w	r1, #4294967295
 80074ba:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 80074be:	fa21 f10e 	lsr.w	r1, r1, lr
 80074c2:	4208      	tst	r0, r1
 80074c4:	d0be      	beq.n	8007444 <rint+0x6c>
 80074c6:	084b      	lsrs	r3, r1, #1
 80074c8:	4218      	tst	r0, r3
 80074ca:	bf1f      	itttt	ne
 80074cc:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 80074d0:	ea20 0303 	bicne.w	r3, r0, r3
 80074d4:	fa45 fe0e 	asrne.w	lr, r5, lr
 80074d8:	ea4e 0503 	orrne.w	r5, lr, r3
 80074dc:	e7cd      	b.n	800747a <rint+0xa2>
 80074de:	bf00      	nop
 80074e0:	080080a0 	.word	0x080080a0
 80074e4:	000fffff 	.word	0x000fffff

080074e8 <scalbn>:
 80074e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ea:	4616      	mov	r6, r2
 80074ec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80074f0:	4604      	mov	r4, r0
 80074f2:	460d      	mov	r5, r1
 80074f4:	460b      	mov	r3, r1
 80074f6:	b98a      	cbnz	r2, 800751c <scalbn+0x34>
 80074f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074fc:	4303      	orrs	r3, r0
 80074fe:	d035      	beq.n	800756c <scalbn+0x84>
 8007500:	2200      	movs	r2, #0
 8007502:	4b2d      	ldr	r3, [pc, #180]	; (80075b8 <scalbn+0xd0>)
 8007504:	f7f8 ffdc 	bl	80004c0 <__aeabi_dmul>
 8007508:	4a2c      	ldr	r2, [pc, #176]	; (80075bc <scalbn+0xd4>)
 800750a:	4604      	mov	r4, r0
 800750c:	4296      	cmp	r6, r2
 800750e:	460d      	mov	r5, r1
 8007510:	460b      	mov	r3, r1
 8007512:	da0e      	bge.n	8007532 <scalbn+0x4a>
 8007514:	a324      	add	r3, pc, #144	; (adr r3, 80075a8 <scalbn+0xc0>)
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	e01c      	b.n	8007556 <scalbn+0x6e>
 800751c:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8007520:	42ba      	cmp	r2, r7
 8007522:	d109      	bne.n	8007538 <scalbn+0x50>
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	f7f8 fe18 	bl	800015c <__adddf3>
 800752c:	4604      	mov	r4, r0
 800752e:	460d      	mov	r5, r1
 8007530:	e01c      	b.n	800756c <scalbn+0x84>
 8007532:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007536:	3a36      	subs	r2, #54	; 0x36
 8007538:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800753c:	4432      	add	r2, r6
 800753e:	428a      	cmp	r2, r1
 8007540:	dd0c      	ble.n	800755c <scalbn+0x74>
 8007542:	4622      	mov	r2, r4
 8007544:	462b      	mov	r3, r5
 8007546:	a11a      	add	r1, pc, #104	; (adr r1, 80075b0 <scalbn+0xc8>)
 8007548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800754c:	f000 f83a 	bl	80075c4 <copysign>
 8007550:	a317      	add	r3, pc, #92	; (adr r3, 80075b0 <scalbn+0xc8>)
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	f7f8 ffb3 	bl	80004c0 <__aeabi_dmul>
 800755a:	e7e7      	b.n	800752c <scalbn+0x44>
 800755c:	2a00      	cmp	r2, #0
 800755e:	dd08      	ble.n	8007572 <scalbn+0x8a>
 8007560:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007564:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007568:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800756c:	4620      	mov	r0, r4
 800756e:	4629      	mov	r1, r5
 8007570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007572:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007576:	da0b      	bge.n	8007590 <scalbn+0xa8>
 8007578:	f24c 3350 	movw	r3, #50000	; 0xc350
 800757c:	429e      	cmp	r6, r3
 800757e:	4622      	mov	r2, r4
 8007580:	462b      	mov	r3, r5
 8007582:	dce0      	bgt.n	8007546 <scalbn+0x5e>
 8007584:	a108      	add	r1, pc, #32	; (adr r1, 80075a8 <scalbn+0xc0>)
 8007586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800758a:	f000 f81b 	bl	80075c4 <copysign>
 800758e:	e7c1      	b.n	8007514 <scalbn+0x2c>
 8007590:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007594:	3236      	adds	r2, #54	; 0x36
 8007596:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800759a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800759e:	4620      	mov	r0, r4
 80075a0:	4629      	mov	r1, r5
 80075a2:	2200      	movs	r2, #0
 80075a4:	4b06      	ldr	r3, [pc, #24]	; (80075c0 <scalbn+0xd8>)
 80075a6:	e7d6      	b.n	8007556 <scalbn+0x6e>
 80075a8:	c2f8f359 	.word	0xc2f8f359
 80075ac:	01a56e1f 	.word	0x01a56e1f
 80075b0:	8800759c 	.word	0x8800759c
 80075b4:	7e37e43c 	.word	0x7e37e43c
 80075b8:	43500000 	.word	0x43500000
 80075bc:	ffff3cb0 	.word	0xffff3cb0
 80075c0:	3c900000 	.word	0x3c900000

080075c4 <copysign>:
 80075c4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80075c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075cc:	ea42 0103 	orr.w	r1, r2, r3
 80075d0:	4770      	bx	lr
	...

080075d4 <__errno>:
 80075d4:	4b01      	ldr	r3, [pc, #4]	; (80075dc <__errno+0x8>)
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	2000001c 	.word	0x2000001c

080075e0 <_init>:
 80075e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e2:	bf00      	nop
 80075e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075e6:	bc08      	pop	{r3}
 80075e8:	469e      	mov	lr, r3
 80075ea:	4770      	bx	lr

080075ec <_fini>:
 80075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ee:	bf00      	nop
 80075f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f2:	bc08      	pop	{r3}
 80075f4:	469e      	mov	lr, r3
 80075f6:	4770      	bx	lr
