
Wingy_smth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  08003ad0  08003ad0  00013ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004544  08004544  00014544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  08004548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005d8  2000007c  080045c4  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000654  080045c4  00020654  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001879b  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002ec5  00000000  00000000  00038840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008942  00000000  00000000  0003b705  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009e0  00000000  00000000  00044048  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ee8  00000000  00000000  00044a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006b95  00000000  00000000  00045910  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003ab3  00000000  00000000  0004c4a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004ff58  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000021e0  00000000  00000000  0004ffd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003ab4 	.word	0x08003ab4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08003ab4 	.word	0x08003ab4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpun>:
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__aeabi_dcmpun+0x10>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d10a      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x20>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d102      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	f04f 0001 	mov.w	r0, #1
 8000a1e:	4770      	bx	lr

08000a20 <__aeabi_d2iz>:
 8000a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d215      	bcs.n	8000a56 <__aeabi_d2iz+0x36>
 8000a2a:	d511      	bpl.n	8000a50 <__aeabi_d2iz+0x30>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d912      	bls.n	8000a5c <__aeabi_d2iz+0x3c>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	bf18      	it	ne
 8000a4c:	4240      	negne	r0, r0
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_d2iz+0x48>
 8000a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	bf08      	it	eq
 8000a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <HAL_InitTick+0x3c>)
{
 8000a74:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a76:	7818      	ldrb	r0, [r3, #0]
 8000a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a80:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <HAL_InitTick+0x40>)
 8000a82:	6810      	ldr	r0, [r2, #0]
 8000a84:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a88:	f000 f89e 	bl	8000bc8 <HAL_SYSTICK_Config>
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	b958      	cbnz	r0, 8000aa8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a90:	2d0f      	cmp	r5, #15
 8000a92:	d809      	bhi.n	8000aa8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a94:	4602      	mov	r2, r0
 8000a96:	4629      	mov	r1, r5
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f000 f854 	bl	8000b48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <HAL_InitTick+0x44>)
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	601d      	str	r5, [r3, #0]
 8000aa6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000aa8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000aaa:	bd38      	pop	{r3, r4, r5, pc}
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000010 	.word	0x20000010
 8000ab4:	20000004 	.word	0x20000004

08000ab8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x20>)
{
 8000aba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000abc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abe:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	f043 0310 	orr.w	r3, r3, #16
 8000ac4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac6:	f000 f82d 	bl	8000b24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f7ff ffd0 	bl	8000a70 <HAL_InitTick>
  HAL_MspInit();
 8000ad0:	f002 fa00 	bl	8002ed4 <HAL_MspInit>
}
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	bd08      	pop	{r3, pc}
 8000ad8:	40022000 	.word	0x40022000

08000adc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000adc:	4a03      	ldr	r2, [pc, #12]	; (8000aec <HAL_IncTick+0x10>)
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <HAL_IncTick+0x14>)
 8000ae0:	6811      	ldr	r1, [r2, #0]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	440b      	add	r3, r1
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	200004a0 	.word	0x200004a0
 8000af0:	20000000 	.word	0x20000000

08000af4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000af4:	4b01      	ldr	r3, [pc, #4]	; (8000afc <HAL_GetTick+0x8>)
 8000af6:	6818      	ldr	r0, [r3, #0]
}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	200004a0 	.word	0x200004a0

08000b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b00:	b538      	push	{r3, r4, r5, lr}
 8000b02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b04:	f7ff fff6 	bl	8000af4 <HAL_GetTick>
 8000b08:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	4b04      	ldrne	r3, [pc, #16]	; (8000b20 <HAL_Delay+0x20>)
 8000b10:	781b      	ldrbne	r3, [r3, #0]
 8000b12:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b14:	f7ff ffee 	bl	8000af4 <HAL_GetTick>
 8000b18:	1b40      	subs	r0, r0, r5
 8000b1a:	4284      	cmp	r4, r0
 8000b1c:	d8fa      	bhi.n	8000b14 <HAL_Delay+0x14>
  {
  }
}
 8000b1e:	bd38      	pop	{r3, r4, r5, pc}
 8000b20:	20000000 	.word	0x20000000

08000b24 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b26:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b2a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b32:	041b      	lsls	r3, r3, #16
 8000b34:	0c1b      	lsrs	r3, r3, #16
 8000b36:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000b3e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b40:	60d3      	str	r3, [r2, #12]
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4a:	b530      	push	{r4, r5, lr}
 8000b4c:	68dc      	ldr	r4, [r3, #12]
 8000b4e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b52:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	2b04      	cmp	r3, #4
 8000b5a:	bf28      	it	cs
 8000b5c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b64:	bf98      	it	ls
 8000b66:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	fa05 f303 	lsl.w	r3, r5, r3
 8000b6c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b70:	bf88      	it	hi
 8000b72:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	4019      	ands	r1, r3
 8000b76:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	fa05 f404 	lsl.w	r4, r5, r4
 8000b7c:	3c01      	subs	r4, #1
 8000b7e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000b80:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b82:	ea42 0201 	orr.w	r2, r2, r1
 8000b86:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	bfaf      	iteee	ge
 8000b8c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	4b06      	ldrlt	r3, [pc, #24]	; (8000bac <HAL_NVIC_SetPriority+0x64>)
 8000b92:	f000 000f 	andlt.w	r0, r0, #15
 8000b96:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	bfa5      	ittet	ge
 8000b9a:	b2d2      	uxtbge	r2, r2
 8000b9c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ba6:	bd30      	pop	{r4, r5, pc}
 8000ba8:	e000ed00 	.word	0xe000ed00
 8000bac:	e000ed14 	.word	0xe000ed14

08000bb0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	0942      	lsrs	r2, r0, #5
 8000bb4:	f000 001f 	and.w	r0, r0, #31
 8000bb8:	fa03 f000 	lsl.w	r0, r3, r0
 8000bbc:	4b01      	ldr	r3, [pc, #4]	; (8000bc4 <HAL_NVIC_EnableIRQ+0x14>)
 8000bbe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	3801      	subs	r0, #1
 8000bca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bce:	d20a      	bcs.n	8000be6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bdc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bde:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000be6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000bf8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000bfa:	4616      	mov	r6, r2
 8000bfc:	4b65      	ldr	r3, [pc, #404]	; (8000d94 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bfe:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000da4 <HAL_GPIO_Init+0x1b0>
 8000c02:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000da8 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000c06:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c0a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000c0c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c10:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d17f      	bne.n	8000d18 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000c18:	684d      	ldr	r5, [r1, #4]
 8000c1a:	2d12      	cmp	r5, #18
 8000c1c:	f000 80af 	beq.w	8000d7e <HAL_GPIO_Init+0x18a>
 8000c20:	f200 8088 	bhi.w	8000d34 <HAL_GPIO_Init+0x140>
 8000c24:	2d02      	cmp	r5, #2
 8000c26:	f000 80a7 	beq.w	8000d78 <HAL_GPIO_Init+0x184>
 8000c2a:	d87c      	bhi.n	8000d26 <HAL_GPIO_Init+0x132>
 8000c2c:	2d00      	cmp	r5, #0
 8000c2e:	f000 808e 	beq.w	8000d4e <HAL_GPIO_Init+0x15a>
 8000c32:	2d01      	cmp	r5, #1
 8000c34:	f000 809e 	beq.w	8000d74 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c38:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c3c:	2cff      	cmp	r4, #255	; 0xff
 8000c3e:	bf93      	iteet	ls
 8000c40:	4682      	movls	sl, r0
 8000c42:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000c46:	3d08      	subhi	r5, #8
 8000c48:	f8d0 b000 	ldrls.w	fp, [r0]
 8000c4c:	bf92      	itee	ls
 8000c4e:	00b5      	lslls	r5, r6, #2
 8000c50:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000c54:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c56:	fa09 f805 	lsl.w	r8, r9, r5
 8000c5a:	ea2b 0808 	bic.w	r8, fp, r8
 8000c5e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c62:	bf88      	it	hi
 8000c64:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c68:	ea48 0505 	orr.w	r5, r8, r5
 8000c6c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c70:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000c74:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000c78:	d04e      	beq.n	8000d18 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c7a:	4d47      	ldr	r5, [pc, #284]	; (8000d98 <HAL_GPIO_Init+0x1a4>)
 8000c7c:	4f46      	ldr	r7, [pc, #280]	; (8000d98 <HAL_GPIO_Init+0x1a4>)
 8000c7e:	69ad      	ldr	r5, [r5, #24]
 8000c80:	f026 0803 	bic.w	r8, r6, #3
 8000c84:	f045 0501 	orr.w	r5, r5, #1
 8000c88:	61bd      	str	r5, [r7, #24]
 8000c8a:	69bd      	ldr	r5, [r7, #24]
 8000c8c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000c90:	f005 0501 	and.w	r5, r5, #1
 8000c94:	9501      	str	r5, [sp, #4]
 8000c96:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000c9a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c9e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ca0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000ca4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ca8:	fa09 f90b 	lsl.w	r9, r9, fp
 8000cac:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb0:	4d3a      	ldr	r5, [pc, #232]	; (8000d9c <HAL_GPIO_Init+0x1a8>)
 8000cb2:	42a8      	cmp	r0, r5
 8000cb4:	d068      	beq.n	8000d88 <HAL_GPIO_Init+0x194>
 8000cb6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cba:	42a8      	cmp	r0, r5
 8000cbc:	d066      	beq.n	8000d8c <HAL_GPIO_Init+0x198>
 8000cbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cc2:	42a8      	cmp	r0, r5
 8000cc4:	d064      	beq.n	8000d90 <HAL_GPIO_Init+0x19c>
 8000cc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cca:	42a8      	cmp	r0, r5
 8000ccc:	bf0c      	ite	eq
 8000cce:	2503      	moveq	r5, #3
 8000cd0:	2504      	movne	r5, #4
 8000cd2:	fa05 f50b 	lsl.w	r5, r5, fp
 8000cd6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000cda:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cde:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ce0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000ce4:	bf14      	ite	ne
 8000ce6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ce8:	43a5      	biceq	r5, r4
 8000cea:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cec:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cee:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000cf2:	bf14      	ite	ne
 8000cf4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cf6:	43a5      	biceq	r5, r4
 8000cf8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cfa:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cfc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d00:	bf14      	ite	ne
 8000d02:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d04:	43a5      	biceq	r5, r4
 8000d06:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d08:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d0a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d0e:	bf14      	ite	ne
 8000d10:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d12:	ea25 0404 	biceq.w	r4, r5, r4
 8000d16:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000d18:	3601      	adds	r6, #1
 8000d1a:	2e10      	cmp	r6, #16
 8000d1c:	f47f af73 	bne.w	8000c06 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000d20:	b003      	add	sp, #12
 8000d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000d26:	2d03      	cmp	r5, #3
 8000d28:	d022      	beq.n	8000d70 <HAL_GPIO_Init+0x17c>
 8000d2a:	2d11      	cmp	r5, #17
 8000d2c:	d184      	bne.n	8000c38 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d2e:	68ca      	ldr	r2, [r1, #12]
 8000d30:	3204      	adds	r2, #4
          break;
 8000d32:	e781      	b.n	8000c38 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000d34:	4f1a      	ldr	r7, [pc, #104]	; (8000da0 <HAL_GPIO_Init+0x1ac>)
 8000d36:	42bd      	cmp	r5, r7
 8000d38:	d009      	beq.n	8000d4e <HAL_GPIO_Init+0x15a>
 8000d3a:	d812      	bhi.n	8000d62 <HAL_GPIO_Init+0x16e>
 8000d3c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000dac <HAL_GPIO_Init+0x1b8>
 8000d40:	454d      	cmp	r5, r9
 8000d42:	d004      	beq.n	8000d4e <HAL_GPIO_Init+0x15a>
 8000d44:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000d48:	454d      	cmp	r5, r9
 8000d4a:	f47f af75 	bne.w	8000c38 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d4e:	688a      	ldr	r2, [r1, #8]
 8000d50:	b1c2      	cbz	r2, 8000d84 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d52:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000d54:	bf0c      	ite	eq
 8000d56:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000d5a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d5e:	2208      	movs	r2, #8
 8000d60:	e76a      	b.n	8000c38 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000d62:	4575      	cmp	r5, lr
 8000d64:	d0f3      	beq.n	8000d4e <HAL_GPIO_Init+0x15a>
 8000d66:	4565      	cmp	r5, ip
 8000d68:	d0f1      	beq.n	8000d4e <HAL_GPIO_Init+0x15a>
 8000d6a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000db0 <HAL_GPIO_Init+0x1bc>
 8000d6e:	e7eb      	b.n	8000d48 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d70:	2200      	movs	r2, #0
 8000d72:	e761      	b.n	8000c38 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d74:	68ca      	ldr	r2, [r1, #12]
          break;
 8000d76:	e75f      	b.n	8000c38 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d78:	68ca      	ldr	r2, [r1, #12]
 8000d7a:	3208      	adds	r2, #8
          break;
 8000d7c:	e75c      	b.n	8000c38 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d7e:	68ca      	ldr	r2, [r1, #12]
 8000d80:	320c      	adds	r2, #12
          break;
 8000d82:	e759      	b.n	8000c38 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d84:	2204      	movs	r2, #4
 8000d86:	e757      	b.n	8000c38 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d88:	2500      	movs	r5, #0
 8000d8a:	e7a2      	b.n	8000cd2 <HAL_GPIO_Init+0xde>
 8000d8c:	2501      	movs	r5, #1
 8000d8e:	e7a0      	b.n	8000cd2 <HAL_GPIO_Init+0xde>
 8000d90:	2502      	movs	r5, #2
 8000d92:	e79e      	b.n	8000cd2 <HAL_GPIO_Init+0xde>
 8000d94:	40010400 	.word	0x40010400
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010800 	.word	0x40010800
 8000da0:	10210000 	.word	0x10210000
 8000da4:	10310000 	.word	0x10310000
 8000da8:	10320000 	.word	0x10320000
 8000dac:	10110000 	.word	0x10110000
 8000db0:	10220000 	.word	0x10220000

08000db4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000db4:	6802      	ldr	r2, [r0, #0]
 8000db6:	6953      	ldr	r3, [r2, #20]
 8000db8:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000dbc:	d00d      	beq.n	8000dda <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000dbe:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000dc2:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000dc4:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000dc6:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000dc8:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000dce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000dd2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	4770      	bx	lr
  }
  return HAL_OK;
 8000dda:	4618      	mov	r0, r3
}
 8000ddc:	4770      	bx	lr

08000dde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000dde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000de2:	4604      	mov	r4, r0
 8000de4:	4617      	mov	r7, r2
 8000de6:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000de8:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000dec:	b28e      	uxth	r6, r1
 8000dee:	6825      	ldr	r5, [r4, #0]
 8000df0:	f1b8 0f01 	cmp.w	r8, #1
 8000df4:	bf0c      	ite	eq
 8000df6:	696b      	ldreq	r3, [r5, #20]
 8000df8:	69ab      	ldrne	r3, [r5, #24]
 8000dfa:	ea36 0303 	bics.w	r3, r6, r3
 8000dfe:	bf14      	ite	ne
 8000e00:	2001      	movne	r0, #1
 8000e02:	2000      	moveq	r0, #0
 8000e04:	b908      	cbnz	r0, 8000e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e0a:	696b      	ldr	r3, [r5, #20]
 8000e0c:	055a      	lsls	r2, r3, #21
 8000e0e:	d512      	bpl.n	8000e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000e10:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8000e12:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000e14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e18:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e1a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000e1e:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000e20:	2304      	movs	r3, #4
 8000e22:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000e24:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000e26:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8000e28:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8000e2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8000e2e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000e36:	1c7b      	adds	r3, r7, #1
 8000e38:	d0d9      	beq.n	8000dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000e3a:	b94f      	cbnz	r7, 8000e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000e3c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000e3e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000e40:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000e42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000e46:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000e50:	f7ff fe50 	bl	8000af4 <HAL_GetTick>
 8000e54:	eba0 0009 	sub.w	r0, r0, r9
 8000e58:	4287      	cmp	r7, r0
 8000e5a:	d2c8      	bcs.n	8000dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8000e5c:	e7ee      	b.n	8000e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08000e5e <I2C_WaitOnFlagUntilTimeout>:
{
 8000e5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e62:	4604      	mov	r4, r0
 8000e64:	4690      	mov	r8, r2
 8000e66:	461f      	mov	r7, r3
 8000e68:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000e6a:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000e6e:	b28d      	uxth	r5, r1
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	f1b9 0f01 	cmp.w	r9, #1
 8000e76:	bf0c      	ite	eq
 8000e78:	695b      	ldreq	r3, [r3, #20]
 8000e7a:	699b      	ldrne	r3, [r3, #24]
 8000e7c:	ea35 0303 	bics.w	r3, r5, r3
 8000e80:	bf0c      	ite	eq
 8000e82:	2301      	moveq	r3, #1
 8000e84:	2300      	movne	r3, #0
 8000e86:	4543      	cmp	r3, r8
 8000e88:	d002      	beq.n	8000e90 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000e8a:	2000      	movs	r0, #0
}
 8000e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000e90:	1c7b      	adds	r3, r7, #1
 8000e92:	d0ed      	beq.n	8000e70 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000e94:	b95f      	cbnz	r7, 8000eae <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000e96:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000e98:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000e9a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000e9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000ea0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000ea4:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ea6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8000eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000eae:	f7ff fe21 	bl	8000af4 <HAL_GetTick>
 8000eb2:	1b80      	subs	r0, r0, r6
 8000eb4:	4287      	cmp	r7, r0
 8000eb6:	d2db      	bcs.n	8000e70 <I2C_WaitOnFlagUntilTimeout+0x12>
 8000eb8:	e7ed      	b.n	8000e96 <I2C_WaitOnFlagUntilTimeout+0x38>

08000eba <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8000eba:	b570      	push	{r4, r5, r6, lr}
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	460d      	mov	r5, r1
 8000ec0:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	061b      	lsls	r3, r3, #24
 8000ec8:	d501      	bpl.n	8000ece <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8000eca:	2000      	movs	r0, #0
 8000ecc:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f7ff ff70 	bl	8000db4 <I2C_IsAcknowledgeFailed>
 8000ed4:	b9a8      	cbnz	r0, 8000f02 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000ed6:	1c6a      	adds	r2, r5, #1
 8000ed8:	d0f3      	beq.n	8000ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000eda:	b965      	cbnz	r5, 8000ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000edc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000ede:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ee0:	f043 0320 	orr.w	r3, r3, #32
 8000ee4:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000ee6:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000ee8:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000eea:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000eec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000ef0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000ef4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000ef6:	f7ff fdfd 	bl	8000af4 <HAL_GetTick>
 8000efa:	1b80      	subs	r0, r0, r6
 8000efc:	4285      	cmp	r5, r0
 8000efe:	d2e0      	bcs.n	8000ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8000f00:	e7ec      	b.n	8000edc <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000f02:	2001      	movs	r0, #1
}
 8000f04:	bd70      	pop	{r4, r5, r6, pc}
	...

08000f08 <I2C_RequestMemoryWrite>:
{
 8000f08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000f0c:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000f0e:	6802      	ldr	r2, [r0, #0]
{
 8000f10:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000f12:	6813      	ldr	r3, [r2, #0]
{
 8000f14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1a:	6013      	str	r3, [r2, #0]
{
 8000f1c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f1e:	9600      	str	r6, [sp, #0]
 8000f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f22:	2200      	movs	r2, #0
 8000f24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000f28:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f2a:	f7ff ff98 	bl	8000e5e <I2C_WaitOnFlagUntilTimeout>
 8000f2e:	b968      	cbnz	r0, 8000f4c <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000f30:	6823      	ldr	r3, [r4, #0]
 8000f32:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8000f36:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000f3a:	4633      	mov	r3, r6
 8000f3c:	491a      	ldr	r1, [pc, #104]	; (8000fa8 <I2C_RequestMemoryWrite+0xa0>)
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f7ff ff4d 	bl	8000dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f44:	b130      	cbz	r0, 8000f54 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f48:	2b04      	cmp	r3, #4
 8000f4a:	d018      	beq.n	8000f7e <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8000f4c:	2003      	movs	r0, #3
}
 8000f4e:	b004      	add	sp, #16
 8000f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	9003      	str	r0, [sp, #12]
 8000f58:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f5a:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f5c:	9203      	str	r2, [sp, #12]
 8000f5e:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f60:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f62:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f64:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f66:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f68:	f7ff ffa7 	bl	8000eba <I2C_WaitOnTXEFlagUntilTimeout>
 8000f6c:	b148      	cbz	r0, 8000f82 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d1eb      	bne.n	8000f4c <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f74:	6822      	ldr	r2, [r4, #0]
 8000f76:	6813      	ldr	r3, [r2, #0]
 8000f78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8000f7e:	2001      	movs	r0, #1
 8000f80:	e7e5      	b.n	8000f4e <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000f82:	f1b8 0f01 	cmp.w	r8, #1
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	d102      	bne.n	8000f90 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000f8a:	b2ed      	uxtb	r5, r5
 8000f8c:	611d      	str	r5, [r3, #16]
 8000f8e:	e7de      	b.n	8000f4e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000f90:	0a2a      	lsrs	r2, r5, #8
 8000f92:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000f96:	4632      	mov	r2, r6
 8000f98:	4620      	mov	r0, r4
 8000f9a:	f7ff ff8e 	bl	8000eba <I2C_WaitOnTXEFlagUntilTimeout>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	d1e5      	bne.n	8000f6e <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000fa2:	6823      	ldr	r3, [r4, #0]
 8000fa4:	e7f1      	b.n	8000f8a <I2C_RequestMemoryWrite+0x82>
 8000fa6:	bf00      	nop
 8000fa8:	00010002 	.word	0x00010002

08000fac <I2C_RequestMemoryRead>:
{
 8000fac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000fb0:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000fb2:	6803      	ldr	r3, [r0, #0]
{
 8000fb4:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000fb6:	681a      	ldr	r2, [r3, #0]
{
 8000fb8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000fba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000fc0:	681a      	ldr	r2, [r3, #0]
{
 8000fc2:	460f      	mov	r7, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fc8:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000fca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000fce:	9500      	str	r5, [sp, #0]
 8000fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000fd2:	2200      	movs	r2, #0
{
 8000fd4:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000fd6:	f7ff ff42 	bl	8000e5e <I2C_WaitOnFlagUntilTimeout>
 8000fda:	b980      	cbnz	r0, 8000ffe <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	b2ff      	uxtb	r7, r7
 8000fe0:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8000fe4:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000fe6:	492d      	ldr	r1, [pc, #180]	; (800109c <I2C_RequestMemoryRead+0xf0>)
 8000fe8:	462b      	mov	r3, r5
 8000fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000fec:	4620      	mov	r0, r4
 8000fee:	f7ff fef6 	bl	8000dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000ff2:	b140      	cbz	r0, 8001006 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ff4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d101      	bne.n	8000ffe <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	e000      	b.n	8001000 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8000ffe:	2003      	movs	r0, #3
}
 8001000:	b004      	add	sp, #16
 8001002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	9003      	str	r0, [sp, #12]
 800100a:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800100c:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800100e:	9203      	str	r2, [sp, #12]
 8001010:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001012:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001014:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001016:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001018:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800101a:	f7ff ff4e 	bl	8000eba <I2C_WaitOnTXEFlagUntilTimeout>
 800101e:	b140      	cbz	r0, 8001032 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001020:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001022:	2b04      	cmp	r3, #4
 8001024:	d1eb      	bne.n	8000ffe <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001026:	6822      	ldr	r2, [r4, #0]
 8001028:	6813      	ldr	r3, [r2, #0]
 800102a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	e7e3      	b.n	8000ffa <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001032:	f1b8 0f01 	cmp.w	r8, #1
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	d124      	bne.n	8001084 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800103a:	b2f6      	uxtb	r6, r6
 800103c:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800103e:	462a      	mov	r2, r5
 8001040:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001042:	4620      	mov	r0, r4
 8001044:	f7ff ff39 	bl	8000eba <I2C_WaitOnTXEFlagUntilTimeout>
 8001048:	4602      	mov	r2, r0
 800104a:	2800      	cmp	r0, #0
 800104c:	d1e8      	bne.n	8001020 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800104e:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001050:	4620      	mov	r0, r4
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001052:	680b      	ldr	r3, [r1, #0]
 8001054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001058:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800105a:	9500      	str	r5, [sp, #0]
 800105c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800105e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001062:	f7ff fefc 	bl	8000e5e <I2C_WaitOnFlagUntilTimeout>
 8001066:	2800      	cmp	r0, #0
 8001068:	d1c9      	bne.n	8000ffe <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800106a:	6823      	ldr	r3, [r4, #0]
 800106c:	f047 0701 	orr.w	r7, r7, #1
 8001070:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001072:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001074:	462b      	mov	r3, r5
 8001076:	4909      	ldr	r1, [pc, #36]	; (800109c <I2C_RequestMemoryRead+0xf0>)
 8001078:	4620      	mov	r0, r4
 800107a:	f7ff feb0 	bl	8000dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800107e:	2800      	cmp	r0, #0
 8001080:	d1b8      	bne.n	8000ff4 <I2C_RequestMemoryRead+0x48>
 8001082:	e7bd      	b.n	8001000 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001084:	0a32      	lsrs	r2, r6, #8
 8001086:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001088:	990a      	ldr	r1, [sp, #40]	; 0x28
 800108a:	462a      	mov	r2, r5
 800108c:	4620      	mov	r0, r4
 800108e:	f7ff ff14 	bl	8000eba <I2C_WaitOnTXEFlagUntilTimeout>
 8001092:	2800      	cmp	r0, #0
 8001094:	d1c4      	bne.n	8001020 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	e7cf      	b.n	800103a <I2C_RequestMemoryRead+0x8e>
 800109a:	bf00      	nop
 800109c:	00010002 	.word	0x00010002

080010a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 80010a0:	b570      	push	{r4, r5, r6, lr}
 80010a2:	4604      	mov	r4, r0
 80010a4:	460d      	mov	r5, r1
 80010a6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80010a8:	6820      	ldr	r0, [r4, #0]
 80010aa:	6943      	ldr	r3, [r0, #20]
 80010ac:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80010b0:	d001      	beq.n	80010b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80010b2:	2000      	movs	r0, #0
}
 80010b4:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80010b6:	6942      	ldr	r2, [r0, #20]
 80010b8:	06d2      	lsls	r2, r2, #27
 80010ba:	d50b      	bpl.n	80010d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010bc:	f06f 0210 	mvn.w	r2, #16
 80010c0:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 80010c2:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010c4:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80010c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 80010ca:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80010cc:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 80010ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80010d2:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80010d4:	b95d      	cbnz	r5, 80010ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80010d8:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010da:	f043 0320 	orr.w	r3, r3, #32
 80010de:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80010e0:	2320      	movs	r3, #32
 80010e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 80010e6:	2300      	movs	r3, #0
 80010e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80010ec:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80010ee:	f7ff fd01 	bl	8000af4 <HAL_GetTick>
 80010f2:	1b80      	subs	r0, r0, r6
 80010f4:	4285      	cmp	r5, r0
 80010f6:	d2d7      	bcs.n	80010a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80010f8:	e7ed      	b.n	80010d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

080010fa <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80010fa:	b570      	push	{r4, r5, r6, lr}
 80010fc:	4604      	mov	r4, r0
 80010fe:	460d      	mov	r5, r1
 8001100:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	075b      	lsls	r3, r3, #29
 8001108:	d501      	bpl.n	800110e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800110a:	2000      	movs	r0, #0
 800110c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800110e:	4620      	mov	r0, r4
 8001110:	f7ff fe50 	bl	8000db4 <I2C_IsAcknowledgeFailed>
 8001114:	b9a8      	cbnz	r0, 8001142 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001116:	1c6a      	adds	r2, r5, #1
 8001118:	d0f3      	beq.n	8001102 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800111a:	b965      	cbnz	r5, 8001136 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800111c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800111e:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001120:	f043 0320 	orr.w	r3, r3, #32
 8001124:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001126:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001128:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800112a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800112c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001130:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001134:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001136:	f7ff fcdd 	bl	8000af4 <HAL_GetTick>
 800113a:	1b80      	subs	r0, r0, r6
 800113c:	4285      	cmp	r5, r0
 800113e:	d2e0      	bcs.n	8001102 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001140:	e7ec      	b.n	800111c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001142:	2001      	movs	r0, #1
}
 8001144:	bd70      	pop	{r4, r5, r6, pc}
	...

08001148 <HAL_I2C_Init>:
{
 8001148:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 800114a:	4604      	mov	r4, r0
 800114c:	b908      	cbnz	r0, 8001152 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800114e:	2001      	movs	r0, #1
 8001150:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001152:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001156:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800115a:	b91b      	cbnz	r3, 8001164 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800115c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001160:	f001 fc3e 	bl	80029e0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001164:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001166:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001168:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800116c:	6813      	ldr	r3, [r2, #0]
 800116e:	f023 0301 	bic.w	r3, r3, #1
 8001172:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001174:	f000 fe1e 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001178:	6863      	ldr	r3, [r4, #4]
 800117a:	4a2f      	ldr	r2, [pc, #188]	; (8001238 <HAL_I2C_Init+0xf0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d830      	bhi.n	80011e2 <HAL_I2C_Init+0x9a>
 8001180:	4a2e      	ldr	r2, [pc, #184]	; (800123c <HAL_I2C_Init+0xf4>)
 8001182:	4290      	cmp	r0, r2
 8001184:	d9e3      	bls.n	800114e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001186:	4a2e      	ldr	r2, [pc, #184]	; (8001240 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8001188:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800118a:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 800118e:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001190:	3201      	adds	r2, #1
 8001192:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001194:	4a28      	ldr	r2, [pc, #160]	; (8001238 <HAL_I2C_Init+0xf0>)
 8001196:	3801      	subs	r0, #1
 8001198:	4293      	cmp	r3, r2
 800119a:	d832      	bhi.n	8001202 <HAL_I2C_Init+0xba>
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	fbb0 f0f3 	udiv	r0, r0, r3
 80011a2:	1c43      	adds	r3, r0, #1
 80011a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	bf38      	it	cc
 80011ac:	2304      	movcc	r3, #4
 80011ae:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011b0:	6a22      	ldr	r2, [r4, #32]
 80011b2:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011b4:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80011ba:	68e2      	ldr	r2, [r4, #12]
 80011bc:	6923      	ldr	r3, [r4, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80011c2:	69a2      	ldr	r2, [r4, #24]
 80011c4:	6963      	ldr	r3, [r4, #20]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80011ca:	680b      	ldr	r3, [r1, #0]
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80011d2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011d4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011da:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011dc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80011e0:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011e2:	4a18      	ldr	r2, [pc, #96]	; (8001244 <HAL_I2C_Init+0xfc>)
 80011e4:	4290      	cmp	r0, r2
 80011e6:	d9b2      	bls.n	800114e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80011e8:	4d15      	ldr	r5, [pc, #84]	; (8001240 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80011ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80011ee:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80011f2:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80011f4:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80011f6:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80011f8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80011fc:	fbb2 f2f5 	udiv	r2, r2, r5
 8001200:	e7c6      	b.n	8001190 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001202:	68a2      	ldr	r2, [r4, #8]
 8001204:	b952      	cbnz	r2, 800121c <HAL_I2C_Init+0xd4>
 8001206:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800120a:	fbb0 f0f3 	udiv	r0, r0, r3
 800120e:	1c43      	adds	r3, r0, #1
 8001210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001214:	b16b      	cbz	r3, 8001232 <HAL_I2C_Init+0xea>
 8001216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800121a:	e7c8      	b.n	80011ae <HAL_I2C_Init+0x66>
 800121c:	2219      	movs	r2, #25
 800121e:	4353      	muls	r3, r2
 8001220:	fbb0 f0f3 	udiv	r0, r0, r3
 8001224:	1c43      	adds	r3, r0, #1
 8001226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800122a:	b113      	cbz	r3, 8001232 <HAL_I2C_Init+0xea>
 800122c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001230:	e7bd      	b.n	80011ae <HAL_I2C_Init+0x66>
 8001232:	2301      	movs	r3, #1
 8001234:	e7bb      	b.n	80011ae <HAL_I2C_Init+0x66>
 8001236:	bf00      	nop
 8001238:	000186a0 	.word	0x000186a0
 800123c:	001e847f 	.word	0x001e847f
 8001240:	000f4240 	.word	0x000f4240
 8001244:	003d08ff 	.word	0x003d08ff

08001248 <HAL_I2C_Master_Transmit>:
{
 8001248:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800124c:	4604      	mov	r4, r0
 800124e:	461f      	mov	r7, r3
 8001250:	460d      	mov	r5, r1
 8001252:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001254:	f7ff fc4e 	bl	8000af4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001258:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800125c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800125e:	2b20      	cmp	r3, #32
 8001260:	d004      	beq.n	800126c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001262:	2502      	movs	r5, #2
}
 8001264:	4628      	mov	r0, r5
 8001266:	b004      	add	sp, #16
 8001268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800126c:	9000      	str	r0, [sp, #0]
 800126e:	2319      	movs	r3, #25
 8001270:	2201      	movs	r2, #1
 8001272:	495d      	ldr	r1, [pc, #372]	; (80013e8 <HAL_I2C_Master_Transmit+0x1a0>)
 8001274:	4620      	mov	r0, r4
 8001276:	f7ff fdf2 	bl	8000e5e <I2C_WaitOnFlagUntilTimeout>
 800127a:	2800      	cmp	r0, #0
 800127c:	d1f1      	bne.n	8001262 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800127e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001282:	2b01      	cmp	r3, #1
 8001284:	d0ed      	beq.n	8001262 <HAL_I2C_Master_Transmit+0x1a>
 8001286:	2301      	movs	r3, #1
 8001288:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001292:	bf5e      	ittt	pl
 8001294:	681a      	ldrpl	r2, [r3, #0]
 8001296:	f042 0201 	orrpl.w	r2, r2, #1
 800129a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012a2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012a4:	2221      	movs	r2, #33	; 0x21
 80012a6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012aa:	2210      	movs	r2, #16
 80012ac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012b0:	2200      	movs	r2, #0
 80012b2:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012b4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80012b8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012ba:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80012bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80012be:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80012c2:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80012c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80012c6:	2a04      	cmp	r2, #4
 80012c8:	d004      	beq.n	80012d4 <HAL_I2C_Master_Transmit+0x8c>
 80012ca:	2a01      	cmp	r2, #1
 80012cc:	d002      	beq.n	80012d4 <HAL_I2C_Master_Transmit+0x8c>
 80012ce:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80012d2:	d104      	bne.n	80012de <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e002      	b.n	80012e4 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80012de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80012e0:	2a12      	cmp	r2, #18
 80012e2:	d0f7      	beq.n	80012d4 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80012e4:	9600      	str	r6, [sp, #0]
 80012e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80012e8:	2200      	movs	r2, #0
 80012ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80012ee:	4620      	mov	r0, r4
 80012f0:	f7ff fdb5 	bl	8000e5e <I2C_WaitOnFlagUntilTimeout>
 80012f4:	bb28      	cbnz	r0, 8001342 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012f6:	6923      	ldr	r3, [r4, #16]
 80012f8:	6822      	ldr	r2, [r4, #0]
 80012fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012fe:	d112      	bne.n	8001326 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001300:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001304:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001306:	4633      	mov	r3, r6
 8001308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800130a:	4938      	ldr	r1, [pc, #224]	; (80013ec <HAL_I2C_Master_Transmit+0x1a4>)
 800130c:	4620      	mov	r0, r4
 800130e:	f7ff fd66 	bl	8000dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001312:	4605      	mov	r5, r0
 8001314:	b9a0      	cbnz	r0, 8001340 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	9003      	str	r0, [sp, #12]
 800131a:	695a      	ldr	r2, [r3, #20]
 800131c:	9203      	str	r2, [sp, #12]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	9303      	str	r3, [sp, #12]
 8001322:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001324:	e050      	b.n	80013c8 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001326:	11eb      	asrs	r3, r5, #7
 8001328:	f003 0306 	and.w	r3, r3, #6
 800132c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001330:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001332:	492f      	ldr	r1, [pc, #188]	; (80013f0 <HAL_I2C_Master_Transmit+0x1a8>)
 8001334:	4633      	mov	r3, r6
 8001336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001338:	4620      	mov	r0, r4
 800133a:	f7ff fd50 	bl	8000dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800133e:	b148      	cbz	r0, 8001354 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001340:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001342:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001344:	2b04      	cmp	r3, #4
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	d107      	bne.n	800135c <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 800134c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001350:	2501      	movs	r5, #1
 8001352:	e787      	b.n	8001264 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	b2ed      	uxtb	r5, r5
 8001358:	611d      	str	r5, [r3, #16]
 800135a:	e7d4      	b.n	8001306 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 800135c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001360:	2503      	movs	r5, #3
 8001362:	e77f      	b.n	8001264 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001364:	4632      	mov	r2, r6
 8001366:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001368:	4620      	mov	r0, r4
 800136a:	f7ff fda6 	bl	8000eba <I2C_WaitOnTXEFlagUntilTimeout>
 800136e:	b140      	cbz	r0, 8001382 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001370:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001372:	2b04      	cmp	r3, #4
 8001374:	d1f4      	bne.n	8001360 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001376:	6822      	ldr	r2, [r4, #0]
 8001378:	6813      	ldr	r3, [r2, #0]
 800137a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e7e6      	b.n	8001350 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001382:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001384:	6820      	ldr	r0, [r4, #0]
 8001386:	1c4b      	adds	r3, r1, #1
 8001388:	6263      	str	r3, [r4, #36]	; 0x24
 800138a:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 800138c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800138e:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8001390:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001392:	3b01      	subs	r3, #1
 8001394:	b29b      	uxth	r3, r3
 8001396:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001398:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800139a:	1e53      	subs	r3, r2, #1
 800139c:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800139e:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80013a0:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013a2:	d50a      	bpl.n	80013ba <HAL_I2C_Master_Transmit+0x172>
 80013a4:	b14b      	cbz	r3, 80013ba <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80013a6:	1c8b      	adds	r3, r1, #2
 80013a8:	6263      	str	r3, [r4, #36]	; 0x24
 80013aa:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80013ac:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80013ae:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80013b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80013b2:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80013b4:	3b01      	subs	r3, #1
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ba:	4632      	mov	r2, r6
 80013bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80013be:	4620      	mov	r0, r4
 80013c0:	f7ff fe9b 	bl	80010fa <I2C_WaitOnBTFFlagUntilTimeout>
 80013c4:	2800      	cmp	r0, #0
 80013c6:	d1d3      	bne.n	8001370 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80013c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1ca      	bne.n	8001364 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013ce:	6821      	ldr	r1, [r4, #0]
 80013d0:	680a      	ldr	r2, [r1, #0]
 80013d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013d6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80013d8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80013da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80013de:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80013e6:	e73d      	b.n	8001264 <HAL_I2C_Master_Transmit+0x1c>
 80013e8:	00100002 	.word	0x00100002
 80013ec:	00010002 	.word	0x00010002
 80013f0:	00010008 	.word	0x00010008

080013f4 <HAL_I2C_Mem_Write>:
{
 80013f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80013f8:	4604      	mov	r4, r0
 80013fa:	469a      	mov	sl, r3
 80013fc:	4688      	mov	r8, r1
 80013fe:	4691      	mov	r9, r2
 8001400:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001402:	f7ff fb77 	bl	8000af4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001406:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800140a:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800140c:	2b20      	cmp	r3, #32
 800140e:	d003      	beq.n	8001418 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001410:	2002      	movs	r0, #2
}
 8001412:	b002      	add	sp, #8
 8001414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001418:	9000      	str	r0, [sp, #0]
 800141a:	2319      	movs	r3, #25
 800141c:	2201      	movs	r2, #1
 800141e:	493e      	ldr	r1, [pc, #248]	; (8001518 <HAL_I2C_Mem_Write+0x124>)
 8001420:	4620      	mov	r0, r4
 8001422:	f7ff fd1c 	bl	8000e5e <I2C_WaitOnFlagUntilTimeout>
 8001426:	2800      	cmp	r0, #0
 8001428:	d1f2      	bne.n	8001410 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800142a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800142e:	2b01      	cmp	r3, #1
 8001430:	d0ee      	beq.n	8001410 <HAL_I2C_Mem_Write+0x1c>
 8001432:	2301      	movs	r3, #1
 8001434:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001438:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800143a:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800143c:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800143e:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001440:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001442:	bf58      	it	pl
 8001444:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001446:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8001448:	bf5c      	itt	pl
 800144a:	f042 0201 	orrpl.w	r2, r2, #1
 800144e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001456:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001458:	2321      	movs	r3, #33	; 0x21
 800145a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800145e:	2340      	movs	r3, #64	; 0x40
 8001460:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001466:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001468:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800146a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800146e:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 8001470:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001474:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001476:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001478:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800147a:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 800147c:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800147e:	4653      	mov	r3, sl
 8001480:	f7ff fd42 	bl	8000f08 <I2C_RequestMemoryWrite>
 8001484:	2800      	cmp	r0, #0
 8001486:	d02a      	beq.n	80014de <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001488:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800148a:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800148e:	2b04      	cmp	r3, #4
 8001490:	d107      	bne.n	80014a2 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 8001492:	2001      	movs	r0, #1
 8001494:	e7bd      	b.n	8001412 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001496:	f7ff fd10 	bl	8000eba <I2C_WaitOnTXEFlagUntilTimeout>
 800149a:	b120      	cbz	r0, 80014a6 <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800149c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d034      	beq.n	800150c <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 80014a2:	2003      	movs	r0, #3
 80014a4:	e7b5      	b.n	8001412 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80014a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80014a8:	6827      	ldr	r7, [r4, #0]
 80014aa:	1c4b      	adds	r3, r1, #1
 80014ac:	6263      	str	r3, [r4, #36]	; 0x24
 80014ae:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 80014b0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80014b2:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 80014b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80014b6:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 80014b8:	3b01      	subs	r3, #1
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014be:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 80014c0:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014c2:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 80014c4:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014c6:	d50a      	bpl.n	80014de <HAL_I2C_Mem_Write+0xea>
 80014c8:	b148      	cbz	r0, 80014de <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80014ca:	1c8b      	adds	r3, r1, #2
 80014cc:	6263      	str	r3, [r4, #36]	; 0x24
 80014ce:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80014d0:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80014d2:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 80014d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80014d6:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80014d8:	3b01      	subs	r3, #1
 80014da:	b29b      	uxth	r3, r3
 80014dc:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80014de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e0:	462a      	mov	r2, r5
 80014e2:	4631      	mov	r1, r6
 80014e4:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1d5      	bne.n	8001496 <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ea:	f7ff fe06 	bl	80010fa <I2C_WaitOnBTFFlagUntilTimeout>
 80014ee:	2800      	cmp	r0, #0
 80014f0:	d1d4      	bne.n	800149c <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80014f2:	6822      	ldr	r2, [r4, #0]
 80014f4:	6813      	ldr	r3, [r2, #0]
 80014f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fa:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80014fc:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80014fe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001502:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001506:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800150a:	e782      	b.n	8001412 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800150c:	6822      	ldr	r2, [r4, #0]
 800150e:	6813      	ldr	r3, [r2, #0]
 8001510:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e7bc      	b.n	8001492 <HAL_I2C_Mem_Write+0x9e>
 8001518:	00100002 	.word	0x00100002
 800151c:	ffff0000 	.word	0xffff0000

08001520 <HAL_I2C_Mem_Read>:
{
 8001520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001524:	4604      	mov	r4, r0
 8001526:	b086      	sub	sp, #24
 8001528:	469a      	mov	sl, r3
 800152a:	460d      	mov	r5, r1
 800152c:	4691      	mov	r9, r2
 800152e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001530:	f7ff fae0 	bl	8000af4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001534:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001538:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800153a:	2b20      	cmp	r3, #32
 800153c:	d004      	beq.n	8001548 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 800153e:	2502      	movs	r5, #2
}
 8001540:	4628      	mov	r0, r5
 8001542:	b006      	add	sp, #24
 8001544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001548:	9000      	str	r0, [sp, #0]
 800154a:	2319      	movs	r3, #25
 800154c:	2201      	movs	r2, #1
 800154e:	4981      	ldr	r1, [pc, #516]	; (8001754 <HAL_I2C_Mem_Read+0x234>)
 8001550:	4620      	mov	r0, r4
 8001552:	f7ff fc84 	bl	8000e5e <I2C_WaitOnFlagUntilTimeout>
 8001556:	2800      	cmp	r0, #0
 8001558:	d1f1      	bne.n	800153e <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 800155a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800155e:	2b01      	cmp	r3, #1
 8001560:	d0ed      	beq.n	800153e <HAL_I2C_Mem_Read+0x1e>
 8001562:	2301      	movs	r3, #1
 8001564:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001568:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800156a:	f04f 0800 	mov.w	r8, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800156e:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001570:	4629      	mov	r1, r5
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001572:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001574:	bf58      	it	pl
 8001576:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001578:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 800157a:	bf5c      	itt	pl
 800157c:	f042 0201 	orrpl.w	r2, r2, #1
 8001580:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001588:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800158a:	2322      	movs	r3, #34	; 0x22
 800158c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001590:	2340      	movs	r3, #64	; 0x40
 8001592:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001598:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800159c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800159e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015a2:	9601      	str	r6, [sp, #4]
    hi2c->XferCount   = Size;
 80015a4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015a6:	4b6c      	ldr	r3, [pc, #432]	; (8001758 <HAL_I2C_Mem_Read+0x238>)
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015a8:	9700      	str	r7, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015aa:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80015ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015ae:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 80015b0:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015b2:	4653      	mov	r3, sl
 80015b4:	f7ff fcfa 	bl	8000fac <I2C_RequestMemoryRead>
 80015b8:	4605      	mov	r5, r0
 80015ba:	b130      	cbz	r0, 80015ca <HAL_I2C_Mem_Read+0xaa>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80015be:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d13d      	bne.n	8001642 <HAL_I2C_Mem_Read+0x122>
              return HAL_ERROR;
 80015c6:	2501      	movs	r5, #1
 80015c8:	e7ba      	b.n	8001540 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 80015ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	b992      	cbnz	r2, 80015f6 <HAL_I2C_Mem_Read+0xd6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015d0:	9002      	str	r0, [sp, #8]
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	9202      	str	r2, [sp, #8]
 80015d6:	699a      	ldr	r2, [r3, #24]
 80015d8:	9202      	str	r2, [sp, #8]
 80015da:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015e2:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80015e4:	2320      	movs	r3, #32
 80015e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80015f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80015f4:	e7a4      	b.n	8001540 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 80015f6:	2a01      	cmp	r2, #1
 80015f8:	d125      	bne.n	8001646 <HAL_I2C_Mem_Read+0x126>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001600:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001602:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	9003      	str	r0, [sp, #12]
 8001608:	695a      	ldr	r2, [r3, #20]
 800160a:	9203      	str	r2, [sp, #12]
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	9203      	str	r2, [sp, #12]
 8001610:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001618:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800161a:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800161c:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800175c <HAL_I2C_Mem_Read+0x23c>
    while(hi2c->XferSize > 0U)
 8001620:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0de      	beq.n	80015e4 <HAL_I2C_Mem_Read+0xc4>
      if(hi2c->XferSize <= 3U)
 8001626:	2b03      	cmp	r3, #3
 8001628:	d877      	bhi.n	800171a <HAL_I2C_Mem_Read+0x1fa>
        if(hi2c->XferSize== 1U)
 800162a:	2b01      	cmp	r3, #1
 800162c:	d127      	bne.n	800167e <HAL_I2C_Mem_Read+0x15e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800162e:	4632      	mov	r2, r6
 8001630:	4639      	mov	r1, r7
 8001632:	4620      	mov	r0, r4
 8001634:	f7ff fd34 	bl	80010a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001638:	2800      	cmp	r0, #0
 800163a:	d03f      	beq.n	80016bc <HAL_I2C_Mem_Read+0x19c>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800163c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800163e:	2b20      	cmp	r3, #32
 8001640:	d1c1      	bne.n	80015c6 <HAL_I2C_Mem_Read+0xa6>
              return HAL_TIMEOUT;
 8001642:	2503      	movs	r5, #3
 8001644:	e77c      	b.n	8001540 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8001646:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001648:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 800164a:	d10e      	bne.n	800166a <HAL_I2C_Mem_Read+0x14a>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800164c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001650:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001652:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	9004      	str	r0, [sp, #16]
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	9204      	str	r2, [sp, #16]
 800165c:	699a      	ldr	r2, [r3, #24]
 800165e:	9204      	str	r2, [sp, #16]
 8001660:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001668:	e7d6      	b.n	8001618 <HAL_I2C_Mem_Read+0xf8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800166a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800166e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001670:	9005      	str	r0, [sp, #20]
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	9205      	str	r2, [sp, #20]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	9305      	str	r3, [sp, #20]
 800167a:	9b05      	ldr	r3, [sp, #20]
 800167c:	e7ce      	b.n	800161c <HAL_I2C_Mem_Read+0xfc>
        else if(hi2c->XferSize == 2U)
 800167e:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001680:	9600      	str	r6, [sp, #0]
 8001682:	463b      	mov	r3, r7
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	4641      	mov	r1, r8
 800168a:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 800168c:	d124      	bne.n	80016d8 <HAL_I2C_Mem_Read+0x1b8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800168e:	f7ff fbe6 	bl	8000e5e <I2C_WaitOnFlagUntilTimeout>
 8001692:	2800      	cmp	r0, #0
 8001694:	d1d5      	bne.n	8001642 <HAL_I2C_Mem_Read+0x122>
 8001696:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016a0:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	1c51      	adds	r1, r2, #1
 80016a8:	6261      	str	r1, [r4, #36]	; 0x24
 80016aa:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 80016ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80016ae:	3b01      	subs	r3, #1
 80016b0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80016b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80016ba:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	6262      	str	r2, [r4, #36]	; 0x24
 80016c2:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016c4:	6912      	ldr	r2, [r2, #16]
 80016c6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80016c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80016ca:	3b01      	subs	r3, #1
 80016cc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80016ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80016d6:	e7a3      	b.n	8001620 <HAL_I2C_Mem_Read+0x100>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016d8:	f7ff fbc1 	bl	8000e5e <I2C_WaitOnFlagUntilTimeout>
 80016dc:	4602      	mov	r2, r0
 80016de:	2800      	cmp	r0, #0
 80016e0:	d1af      	bne.n	8001642 <HAL_I2C_Mem_Read+0x122>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80016e2:	6821      	ldr	r1, [r4, #0]
 80016e4:	680b      	ldr	r3, [r1, #0]
 80016e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016ea:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016f0:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016f2:	1c59      	adds	r1, r3, #1
 80016f4:	6261      	str	r1, [r4, #36]	; 0x24
 80016f6:	6821      	ldr	r1, [r4, #0]
 80016f8:	6909      	ldr	r1, [r1, #16]
 80016fa:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 80016fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016fe:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001700:	3b01      	subs	r3, #1
 8001702:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001704:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001706:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8001708:	3b01      	subs	r3, #1
 800170a:	b29b      	uxth	r3, r3
 800170c:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800170e:	463b      	mov	r3, r7
 8001710:	f7ff fba5 	bl	8000e5e <I2C_WaitOnFlagUntilTimeout>
 8001714:	2800      	cmp	r0, #0
 8001716:	d0bf      	beq.n	8001698 <HAL_I2C_Mem_Read+0x178>
 8001718:	e793      	b.n	8001642 <HAL_I2C_Mem_Read+0x122>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171a:	4632      	mov	r2, r6
 800171c:	4639      	mov	r1, r7
 800171e:	4620      	mov	r0, r4
 8001720:	f7ff fcbe 	bl	80010a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001724:	2800      	cmp	r0, #0
 8001726:	d189      	bne.n	800163c <HAL_I2C_Mem_Read+0x11c>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	6262      	str	r2, [r4, #36]	; 0x24
 800172e:	6822      	ldr	r2, [r4, #0]
 8001730:	6912      	ldr	r2, [r2, #16]
 8001732:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001734:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001736:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001738:	3b01      	subs	r3, #1
 800173a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800173c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800173e:	3b01      	subs	r3, #1
 8001740:	b29b      	uxth	r3, r3
 8001742:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001744:	6953      	ldr	r3, [r2, #20]
 8001746:	075b      	lsls	r3, r3, #29
 8001748:	f57f af6a 	bpl.w	8001620 <HAL_I2C_Mem_Read+0x100>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800174c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800174e:	1c59      	adds	r1, r3, #1
 8001750:	6261      	str	r1, [r4, #36]	; 0x24
 8001752:	e7b7      	b.n	80016c4 <HAL_I2C_Mem_Read+0x1a4>
 8001754:	00100002 	.word	0x00100002
 8001758:	ffff0000 	.word	0xffff0000
 800175c:	00010004 	.word	0x00010004

08001760 <HAL_I2C_IsDeviceReady>:
{
 8001760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001764:	4604      	mov	r4, r0
 8001766:	b085      	sub	sp, #20
 8001768:	4698      	mov	r8, r3
 800176a:	4689      	mov	r9, r1
 800176c:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 800176e:	f7ff f9c1 	bl	8000af4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001772:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001776:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001778:	2b20      	cmp	r3, #32
 800177a:	d003      	beq.n	8001784 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 800177c:	2002      	movs	r0, #2
}
 800177e:	b005      	add	sp, #20
 8001780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001784:	9000      	str	r0, [sp, #0]
 8001786:	2319      	movs	r3, #25
 8001788:	2201      	movs	r2, #1
 800178a:	494b      	ldr	r1, [pc, #300]	; (80018b8 <HAL_I2C_IsDeviceReady+0x158>)
 800178c:	4620      	mov	r0, r4
 800178e:	f7ff fb66 	bl	8000e5e <I2C_WaitOnFlagUntilTimeout>
 8001792:	2800      	cmp	r0, #0
 8001794:	d1f2      	bne.n	800177c <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8001796:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800179a:	2b01      	cmp	r3, #1
 800179c:	d0ee      	beq.n	800177c <HAL_I2C_IsDeviceReady+0x1c>
 800179e:	2301      	movs	r3, #1
 80017a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017a4:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a6:	2500      	movs	r5, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017a8:	681a      	ldr	r2, [r3, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017aa:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80018b8 <HAL_I2C_IsDeviceReady+0x158>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017ae:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80017b0:	bf58      	it	pl
 80017b2:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017b4:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 80017b8:	bf5c      	itt	pl
 80017ba:	f042 0201 	orrpl.w	r2, r2, #1
 80017be:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c6:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80017c8:	2324      	movs	r3, #36	; 0x24
 80017ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <HAL_I2C_IsDeviceReady+0x15c>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d0:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017d2:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80017d4:	6822      	ldr	r2, [r4, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80017d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80017da:	6813      	ldr	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80017dc:	4620      	mov	r0, r4
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80017de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e2:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80017e4:	9600      	str	r6, [sp, #0]
 80017e6:	4643      	mov	r3, r8
 80017e8:	2200      	movs	r2, #0
 80017ea:	f7ff fb38 	bl	8000e5e <I2C_WaitOnFlagUntilTimeout>
 80017ee:	b108      	cbz	r0, 80017f4 <HAL_I2C_IsDeviceReady+0x94>
        return HAL_TIMEOUT;
 80017f0:	2003      	movs	r0, #3
 80017f2:	e7c4      	b.n	800177e <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017f4:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80017f6:	27a0      	movs	r7, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017f8:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 80017fc:	f7ff f97a 	bl	8000af4 <HAL_GetTick>
 8001800:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001806:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 8001808:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800180c:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001810:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 8001814:	b2db      	uxtb	r3, r3
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8001816:	b911      	cbnz	r1, 800181e <HAL_I2C_IsDeviceReady+0xbe>
 8001818:	b90a      	cbnz	r2, 800181e <HAL_I2C_IsDeviceReady+0xbe>
 800181a:	2ba0      	cmp	r3, #160	; 0xa0
 800181c:	d120      	bne.n	8001860 <HAL_I2C_IsDeviceReady+0x100>
      hi2c->State = HAL_I2C_STATE_READY;
 800181e:	2720      	movs	r7, #32
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001820:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001822:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001832:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001834:	d02a      	beq.n	800188c <HAL_I2C_IsDeviceReady+0x12c>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001836:	2200      	movs	r2, #0
 8001838:	9203      	str	r2, [sp, #12]
 800183a:	695a      	ldr	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800183c:	491e      	ldr	r1, [pc, #120]	; (80018b8 <HAL_I2C_IsDeviceReady+0x158>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800183e:	9203      	str	r2, [sp, #12]
 8001840:	699b      	ldr	r3, [r3, #24]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001842:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001844:	9303      	str	r3, [sp, #12]
 8001846:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001848:	9600      	str	r6, [sp, #0]
 800184a:	2319      	movs	r3, #25
 800184c:	4620      	mov	r0, r4
 800184e:	f7ff fb06 	bl	8000e5e <I2C_WaitOnFlagUntilTimeout>
 8001852:	2800      	cmp	r0, #0
 8001854:	d1cc      	bne.n	80017f0 <HAL_I2C_IsDeviceReady+0x90>
        hi2c->State = HAL_I2C_STATE_READY;
 8001856:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800185a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 800185e:	e78e      	b.n	800177e <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001860:	f1b8 0f00 	cmp.w	r8, #0
 8001864:	d10c      	bne.n	8001880 <HAL_I2C_IsDeviceReady+0x120>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001866:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800186e:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 8001870:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001874:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001878:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 800187c:	b2db      	uxtb	r3, r3
 800187e:	e7ca      	b.n	8001816 <HAL_I2C_IsDeviceReady+0xb6>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001880:	f7ff f938 	bl	8000af4 <HAL_GetTick>
 8001884:	1b80      	subs	r0, r0, r6
 8001886:	4580      	cmp	r8, r0
 8001888:	d3ed      	bcc.n	8001866 <HAL_I2C_IsDeviceReady+0x106>
 800188a:	e7ee      	b.n	800186a <HAL_I2C_IsDeviceReady+0x10a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800188c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001890:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001892:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001894:	4620      	mov	r0, r4
 8001896:	9600      	str	r6, [sp, #0]
 8001898:	2319      	movs	r3, #25
 800189a:	2201      	movs	r2, #1
 800189c:	f7ff fadf 	bl	8000e5e <I2C_WaitOnFlagUntilTimeout>
 80018a0:	2800      	cmp	r0, #0
 80018a2:	d1a5      	bne.n	80017f0 <HAL_I2C_IsDeviceReady+0x90>
 80018a4:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 80018a6:	45aa      	cmp	sl, r5
 80018a8:	d894      	bhi.n	80017d4 <HAL_I2C_IsDeviceReady+0x74>
    __HAL_UNLOCK(hi2c);
 80018aa:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80018ae:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 80018b2:	2001      	movs	r0, #1
 80018b4:	e763      	b.n	800177e <HAL_I2C_IsDeviceReady+0x1e>
 80018b6:	bf00      	nop
 80018b8:	00100002 	.word	0x00100002
 80018bc:	ffff0000 	.word	0xffff0000

080018c0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c0:	6803      	ldr	r3, [r0, #0]
{
 80018c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c6:	07db      	lsls	r3, r3, #31
{
 80018c8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ca:	d410      	bmi.n	80018ee <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018cc:	682b      	ldr	r3, [r5, #0]
 80018ce:	079f      	lsls	r7, r3, #30
 80018d0:	d45e      	bmi.n	8001990 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d2:	682b      	ldr	r3, [r5, #0]
 80018d4:	0719      	lsls	r1, r3, #28
 80018d6:	f100 8095 	bmi.w	8001a04 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018da:	682b      	ldr	r3, [r5, #0]
 80018dc:	075a      	lsls	r2, r3, #29
 80018de:	f100 80bf 	bmi.w	8001a60 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e2:	69ea      	ldr	r2, [r5, #28]
 80018e4:	2a00      	cmp	r2, #0
 80018e6:	f040 812d 	bne.w	8001b44 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80018ea:	2000      	movs	r0, #0
 80018ec:	e014      	b.n	8001918 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018ee:	4c90      	ldr	r4, [pc, #576]	; (8001b30 <HAL_RCC_OscConfig+0x270>)
 80018f0:	6863      	ldr	r3, [r4, #4]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d007      	beq.n	800190a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018fa:	6863      	ldr	r3, [r4, #4]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b08      	cmp	r3, #8
 8001902:	d10c      	bne.n	800191e <HAL_RCC_OscConfig+0x5e>
 8001904:	6863      	ldr	r3, [r4, #4]
 8001906:	03de      	lsls	r6, r3, #15
 8001908:	d509      	bpl.n	800191e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	039c      	lsls	r4, r3, #14
 800190e:	d5dd      	bpl.n	80018cc <HAL_RCC_OscConfig+0xc>
 8001910:	686b      	ldr	r3, [r5, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1da      	bne.n	80018cc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001916:	2001      	movs	r0, #1
}
 8001918:	b002      	add	sp, #8
 800191a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191e:	686b      	ldr	r3, [r5, #4]
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001924:	d110      	bne.n	8001948 <HAL_RCC_OscConfig+0x88>
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800192e:	f7ff f8e1 	bl	8000af4 <HAL_GetTick>
 8001932:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	0398      	lsls	r0, r3, #14
 8001938:	d4c8      	bmi.n	80018cc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800193a:	f7ff f8db 	bl	8000af4 <HAL_GetTick>
 800193e:	1b80      	subs	r0, r0, r6
 8001940:	2864      	cmp	r0, #100	; 0x64
 8001942:	d9f7      	bls.n	8001934 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001944:	2003      	movs	r0, #3
 8001946:	e7e7      	b.n	8001918 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001948:	b99b      	cbnz	r3, 8001972 <HAL_RCC_OscConfig+0xb2>
 800194a:	6823      	ldr	r3, [r4, #0]
 800194c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001950:	6023      	str	r3, [r4, #0]
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001958:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800195a:	f7ff f8cb 	bl	8000af4 <HAL_GetTick>
 800195e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	0399      	lsls	r1, r3, #14
 8001964:	d5b2      	bpl.n	80018cc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001966:	f7ff f8c5 	bl	8000af4 <HAL_GetTick>
 800196a:	1b80      	subs	r0, r0, r6
 800196c:	2864      	cmp	r0, #100	; 0x64
 800196e:	d9f7      	bls.n	8001960 <HAL_RCC_OscConfig+0xa0>
 8001970:	e7e8      	b.n	8001944 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001972:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001976:	6823      	ldr	r3, [r4, #0]
 8001978:	d103      	bne.n	8001982 <HAL_RCC_OscConfig+0xc2>
 800197a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800197e:	6023      	str	r3, [r4, #0]
 8001980:	e7d1      	b.n	8001926 <HAL_RCC_OscConfig+0x66>
 8001982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001986:	6023      	str	r3, [r4, #0]
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198e:	e7cd      	b.n	800192c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001990:	4c67      	ldr	r4, [pc, #412]	; (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001992:	6863      	ldr	r3, [r4, #4]
 8001994:	f013 0f0c 	tst.w	r3, #12
 8001998:	d007      	beq.n	80019aa <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800199a:	6863      	ldr	r3, [r4, #4]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d110      	bne.n	80019c6 <HAL_RCC_OscConfig+0x106>
 80019a4:	6863      	ldr	r3, [r4, #4]
 80019a6:	03da      	lsls	r2, r3, #15
 80019a8:	d40d      	bmi.n	80019c6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	079b      	lsls	r3, r3, #30
 80019ae:	d502      	bpl.n	80019b6 <HAL_RCC_OscConfig+0xf6>
 80019b0:	692b      	ldr	r3, [r5, #16]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d1af      	bne.n	8001916 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	696a      	ldr	r2, [r5, #20]
 80019ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019c2:	6023      	str	r3, [r4, #0]
 80019c4:	e785      	b.n	80018d2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c6:	692a      	ldr	r2, [r5, #16]
 80019c8:	4b5a      	ldr	r3, [pc, #360]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 80019ca:	b16a      	cbz	r2, 80019e8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80019cc:	2201      	movs	r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019d0:	f7ff f890 	bl	8000af4 <HAL_GetTick>
 80019d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	079f      	lsls	r7, r3, #30
 80019da:	d4ec      	bmi.n	80019b6 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019dc:	f7ff f88a 	bl	8000af4 <HAL_GetTick>
 80019e0:	1b80      	subs	r0, r0, r6
 80019e2:	2802      	cmp	r0, #2
 80019e4:	d9f7      	bls.n	80019d6 <HAL_RCC_OscConfig+0x116>
 80019e6:	e7ad      	b.n	8001944 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80019e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019ea:	f7ff f883 	bl	8000af4 <HAL_GetTick>
 80019ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	0798      	lsls	r0, r3, #30
 80019f4:	f57f af6d 	bpl.w	80018d2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f8:	f7ff f87c 	bl	8000af4 <HAL_GetTick>
 80019fc:	1b80      	subs	r0, r0, r6
 80019fe:	2802      	cmp	r0, #2
 8001a00:	d9f6      	bls.n	80019f0 <HAL_RCC_OscConfig+0x130>
 8001a02:	e79f      	b.n	8001944 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a04:	69aa      	ldr	r2, [r5, #24]
 8001a06:	4c4a      	ldr	r4, [pc, #296]	; (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a08:	4b4b      	ldr	r3, [pc, #300]	; (8001b38 <HAL_RCC_OscConfig+0x278>)
 8001a0a:	b1da      	cbz	r2, 8001a44 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a10:	f7ff f870 	bl	8000af4 <HAL_GetTick>
 8001a14:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a18:	079b      	lsls	r3, r3, #30
 8001a1a:	d50d      	bpl.n	8001a38 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a1c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a20:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <HAL_RCC_OscConfig+0x27c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a28:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001a2a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001a2c:	9b01      	ldr	r3, [sp, #4]
 8001a2e:	1e5a      	subs	r2, r3, #1
 8001a30:	9201      	str	r2, [sp, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f9      	bne.n	8001a2a <HAL_RCC_OscConfig+0x16a>
 8001a36:	e750      	b.n	80018da <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a38:	f7ff f85c 	bl	8000af4 <HAL_GetTick>
 8001a3c:	1b80      	subs	r0, r0, r6
 8001a3e:	2802      	cmp	r0, #2
 8001a40:	d9e9      	bls.n	8001a16 <HAL_RCC_OscConfig+0x156>
 8001a42:	e77f      	b.n	8001944 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001a44:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a46:	f7ff f855 	bl	8000af4 <HAL_GetTick>
 8001a4a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a4e:	079f      	lsls	r7, r3, #30
 8001a50:	f57f af43 	bpl.w	80018da <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff f84e 	bl	8000af4 <HAL_GetTick>
 8001a58:	1b80      	subs	r0, r0, r6
 8001a5a:	2802      	cmp	r0, #2
 8001a5c:	d9f6      	bls.n	8001a4c <HAL_RCC_OscConfig+0x18c>
 8001a5e:	e771      	b.n	8001944 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a60:	4c33      	ldr	r4, [pc, #204]	; (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a62:	69e3      	ldr	r3, [r4, #28]
 8001a64:	00d8      	lsls	r0, r3, #3
 8001a66:	d424      	bmi.n	8001ab2 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001a68:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	69e3      	ldr	r3, [r4, #28]
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	61e3      	str	r3, [r4, #28]
 8001a72:	69e3      	ldr	r3, [r4, #28]
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	4e30      	ldr	r6, [pc, #192]	; (8001b40 <HAL_RCC_OscConfig+0x280>)
 8001a7e:	6833      	ldr	r3, [r6, #0]
 8001a80:	05d9      	lsls	r1, r3, #23
 8001a82:	d518      	bpl.n	8001ab6 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a84:	68eb      	ldr	r3, [r5, #12]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d126      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x218>
 8001a8a:	6a23      	ldr	r3, [r4, #32]
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a92:	f7ff f82f 	bl	8000af4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a9a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9c:	6a23      	ldr	r3, [r4, #32]
 8001a9e:	079b      	lsls	r3, r3, #30
 8001aa0:	d53f      	bpl.n	8001b22 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001aa2:	2f00      	cmp	r7, #0
 8001aa4:	f43f af1d 	beq.w	80018e2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa8:	69e3      	ldr	r3, [r4, #28]
 8001aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aae:	61e3      	str	r3, [r4, #28]
 8001ab0:	e717      	b.n	80018e2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001ab2:	2700      	movs	r7, #0
 8001ab4:	e7e2      	b.n	8001a7c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab6:	6833      	ldr	r3, [r6, #0]
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001abe:	f7ff f819 	bl	8000af4 <HAL_GetTick>
 8001ac2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac4:	6833      	ldr	r3, [r6, #0]
 8001ac6:	05da      	lsls	r2, r3, #23
 8001ac8:	d4dc      	bmi.n	8001a84 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aca:	f7ff f813 	bl	8000af4 <HAL_GetTick>
 8001ace:	eba0 0008 	sub.w	r0, r0, r8
 8001ad2:	2864      	cmp	r0, #100	; 0x64
 8001ad4:	d9f6      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x204>
 8001ad6:	e735      	b.n	8001944 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad8:	b9ab      	cbnz	r3, 8001b06 <HAL_RCC_OscConfig+0x246>
 8001ada:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001adc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	6223      	str	r3, [r4, #32]
 8001ae6:	6a23      	ldr	r3, [r4, #32]
 8001ae8:	f023 0304 	bic.w	r3, r3, #4
 8001aec:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001aee:	f7ff f801 	bl	8000af4 <HAL_GetTick>
 8001af2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af4:	6a23      	ldr	r3, [r4, #32]
 8001af6:	0798      	lsls	r0, r3, #30
 8001af8:	d5d3      	bpl.n	8001aa2 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afa:	f7fe fffb 	bl	8000af4 <HAL_GetTick>
 8001afe:	1b80      	subs	r0, r0, r6
 8001b00:	4540      	cmp	r0, r8
 8001b02:	d9f7      	bls.n	8001af4 <HAL_RCC_OscConfig+0x234>
 8001b04:	e71e      	b.n	8001944 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b06:	2b05      	cmp	r3, #5
 8001b08:	6a23      	ldr	r3, [r4, #32]
 8001b0a:	d103      	bne.n	8001b14 <HAL_RCC_OscConfig+0x254>
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	6223      	str	r3, [r4, #32]
 8001b12:	e7ba      	b.n	8001a8a <HAL_RCC_OscConfig+0x1ca>
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	6223      	str	r3, [r4, #32]
 8001b1a:	6a23      	ldr	r3, [r4, #32]
 8001b1c:	f023 0304 	bic.w	r3, r3, #4
 8001b20:	e7b6      	b.n	8001a90 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7fe ffe7 	bl	8000af4 <HAL_GetTick>
 8001b26:	eba0 0008 	sub.w	r0, r0, r8
 8001b2a:	42b0      	cmp	r0, r6
 8001b2c:	d9b6      	bls.n	8001a9c <HAL_RCC_OscConfig+0x1dc>
 8001b2e:	e709      	b.n	8001944 <HAL_RCC_OscConfig+0x84>
 8001b30:	40021000 	.word	0x40021000
 8001b34:	42420000 	.word	0x42420000
 8001b38:	42420480 	.word	0x42420480
 8001b3c:	20000010 	.word	0x20000010
 8001b40:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b44:	4c22      	ldr	r4, [pc, #136]	; (8001bd0 <HAL_RCC_OscConfig+0x310>)
 8001b46:	6863      	ldr	r3, [r4, #4]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	f43f aee2 	beq.w	8001916 <HAL_RCC_OscConfig+0x56>
 8001b52:	2300      	movs	r3, #0
 8001b54:	4e1f      	ldr	r6, [pc, #124]	; (8001bd4 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b56:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001b58:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5a:	d12b      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001b5c:	f7fe ffca 	bl	8000af4 <HAL_GetTick>
 8001b60:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	0199      	lsls	r1, r3, #6
 8001b66:	d41f      	bmi.n	8001ba8 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b68:	6a2b      	ldr	r3, [r5, #32]
 8001b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6e:	d105      	bne.n	8001b7c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b70:	6862      	ldr	r2, [r4, #4]
 8001b72:	68a9      	ldr	r1, [r5, #8]
 8001b74:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b7c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001b7e:	6862      	ldr	r2, [r4, #4]
 8001b80:	430b      	orrs	r3, r1
 8001b82:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001b86:	4313      	orrs	r3, r2
 8001b88:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001b8e:	f7fe ffb1 	bl	8000af4 <HAL_GetTick>
 8001b92:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	019a      	lsls	r2, r3, #6
 8001b98:	f53f aea7 	bmi.w	80018ea <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7fe ffaa 	bl	8000af4 <HAL_GetTick>
 8001ba0:	1b40      	subs	r0, r0, r5
 8001ba2:	2802      	cmp	r0, #2
 8001ba4:	d9f6      	bls.n	8001b94 <HAL_RCC_OscConfig+0x2d4>
 8001ba6:	e6cd      	b.n	8001944 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7fe ffa4 	bl	8000af4 <HAL_GetTick>
 8001bac:	1bc0      	subs	r0, r0, r7
 8001bae:	2802      	cmp	r0, #2
 8001bb0:	d9d7      	bls.n	8001b62 <HAL_RCC_OscConfig+0x2a2>
 8001bb2:	e6c7      	b.n	8001944 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001bb4:	f7fe ff9e 	bl	8000af4 <HAL_GetTick>
 8001bb8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	019b      	lsls	r3, r3, #6
 8001bbe:	f57f ae94 	bpl.w	80018ea <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc2:	f7fe ff97 	bl	8000af4 <HAL_GetTick>
 8001bc6:	1b40      	subs	r0, r0, r5
 8001bc8:	2802      	cmp	r0, #2
 8001bca:	d9f6      	bls.n	8001bba <HAL_RCC_OscConfig+0x2fa>
 8001bcc:	e6ba      	b.n	8001944 <HAL_RCC_OscConfig+0x84>
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	42420060 	.word	0x42420060

08001bd8 <HAL_RCC_GetSysClockFreq>:
{
 8001bd8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001bdc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bde:	ac02      	add	r4, sp, #8
 8001be0:	f103 0510 	add.w	r5, r3, #16
 8001be4:	4622      	mov	r2, r4
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	6859      	ldr	r1, [r3, #4]
 8001bea:	3308      	adds	r3, #8
 8001bec:	c203      	stmia	r2!, {r0, r1}
 8001bee:	42ab      	cmp	r3, r5
 8001bf0:	4614      	mov	r4, r2
 8001bf2:	d1f7      	bne.n	8001be4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f88d 3004 	strb.w	r3, [sp, #4]
 8001bfa:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001bfc:	4911      	ldr	r1, [pc, #68]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bfe:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001c02:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001c04:	f003 020c 	and.w	r2, r3, #12
 8001c08:	2a08      	cmp	r2, #8
 8001c0a:	d117      	bne.n	8001c3c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c0c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001c10:	a806      	add	r0, sp, #24
 8001c12:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c14:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c16:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c1a:	d50c      	bpl.n	8001c36 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c1c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c1e:	480a      	ldr	r0, [pc, #40]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c20:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c24:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c26:	aa06      	add	r2, sp, #24
 8001c28:	4413      	add	r3, r2
 8001c2a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c2e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001c32:	b007      	add	sp, #28
 8001c34:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x74>)
 8001c38:	4350      	muls	r0, r2
 8001c3a:	e7fa      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001c3e:	e7f8      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x5a>
 8001c40:	08003ad0 	.word	0x08003ad0
 8001c44:	40021000 	.word	0x40021000
 8001c48:	007a1200 	.word	0x007a1200
 8001c4c:	003d0900 	.word	0x003d0900

08001c50 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c50:	4a54      	ldr	r2, [pc, #336]	; (8001da4 <HAL_RCC_ClockConfig+0x154>)
{
 8001c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c56:	6813      	ldr	r3, [r2, #0]
{
 8001c58:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	428b      	cmp	r3, r1
{
 8001c60:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c62:	d32a      	bcc.n	8001cba <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c64:	6829      	ldr	r1, [r5, #0]
 8001c66:	078c      	lsls	r4, r1, #30
 8001c68:	d434      	bmi.n	8001cd4 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6a:	07ca      	lsls	r2, r1, #31
 8001c6c:	d447      	bmi.n	8001cfe <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c6e:	4a4d      	ldr	r2, [pc, #308]	; (8001da4 <HAL_RCC_ClockConfig+0x154>)
 8001c70:	6813      	ldr	r3, [r2, #0]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	429e      	cmp	r6, r3
 8001c78:	f0c0 8082 	bcc.w	8001d80 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	682a      	ldr	r2, [r5, #0]
 8001c7e:	4c4a      	ldr	r4, [pc, #296]	; (8001da8 <HAL_RCC_ClockConfig+0x158>)
 8001c80:	f012 0f04 	tst.w	r2, #4
 8001c84:	f040 8087 	bne.w	8001d96 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c88:	0713      	lsls	r3, r2, #28
 8001c8a:	d506      	bpl.n	8001c9a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c8c:	6863      	ldr	r3, [r4, #4]
 8001c8e:	692a      	ldr	r2, [r5, #16]
 8001c90:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c94:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c98:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c9a:	f7ff ff9d 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001c9e:	6863      	ldr	r3, [r4, #4]
 8001ca0:	4a42      	ldr	r2, [pc, #264]	; (8001dac <HAL_RCC_ClockConfig+0x15c>)
 8001ca2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	40d8      	lsrs	r0, r3
 8001caa:	4b41      	ldr	r3, [pc, #260]	; (8001db0 <HAL_RCC_ClockConfig+0x160>)
 8001cac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7fe fede 	bl	8000a70 <HAL_InitTick>
  return HAL_OK;
 8001cb4:	2000      	movs	r0, #0
}
 8001cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	6813      	ldr	r3, [r2, #0]
 8001cbc:	f023 0307 	bic.w	r3, r3, #7
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cc4:	6813      	ldr	r3, [r2, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	4299      	cmp	r1, r3
 8001ccc:	d0ca      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001cce:	2001      	movs	r0, #1
 8001cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cd4:	4b34      	ldr	r3, [pc, #208]	; (8001da8 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cda:	bf1e      	ittt	ne
 8001cdc:	685a      	ldrne	r2, [r3, #4]
 8001cde:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001ce2:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce6:	bf42      	ittt	mi
 8001ce8:	685a      	ldrmi	r2, [r3, #4]
 8001cea:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001cee:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	68a8      	ldr	r0, [r5, #8]
 8001cf4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001cf8:	4302      	orrs	r2, r0
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	e7b5      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cfe:	686a      	ldr	r2, [r5, #4]
 8001d00:	4c29      	ldr	r4, [pc, #164]	; (8001da8 <HAL_RCC_ClockConfig+0x158>)
 8001d02:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d04:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d06:	d11c      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d08:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	d0df      	beq.n	8001cce <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d0e:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d10:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d14:	f023 0303 	bic.w	r3, r3, #3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001d1c:	f7fe feea 	bl	8000af4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d20:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001d22:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d114      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d28:	6863      	ldr	r3, [r4, #4]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d09d      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d32:	f7fe fedf 	bl	8000af4 <HAL_GetTick>
 8001d36:	1bc0      	subs	r0, r0, r7
 8001d38:	4540      	cmp	r0, r8
 8001d3a:	d9f5      	bls.n	8001d28 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d42:	2a02      	cmp	r2, #2
 8001d44:	d102      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d46:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d4a:	e7df      	b.n	8001d0c <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	f013 0f02 	tst.w	r3, #2
 8001d50:	e7dc      	b.n	8001d0c <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d10f      	bne.n	8001d76 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d56:	6863      	ldr	r3, [r4, #4]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d086      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d60:	f7fe fec8 	bl	8000af4 <HAL_GetTick>
 8001d64:	1bc0      	subs	r0, r0, r7
 8001d66:	4540      	cmp	r0, r8
 8001d68:	d9f5      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x106>
 8001d6a:	e7e7      	b.n	8001d3c <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6c:	f7fe fec2 	bl	8000af4 <HAL_GetTick>
 8001d70:	1bc0      	subs	r0, r0, r7
 8001d72:	4540      	cmp	r0, r8
 8001d74:	d8e2      	bhi.n	8001d3c <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d76:	6863      	ldr	r3, [r4, #4]
 8001d78:	f013 0f0c 	tst.w	r3, #12
 8001d7c:	d1f6      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x11c>
 8001d7e:	e776      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d80:	6813      	ldr	r3, [r2, #0]
 8001d82:	f023 0307 	bic.w	r3, r3, #7
 8001d86:	4333      	orrs	r3, r6
 8001d88:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d8a:	6813      	ldr	r3, [r2, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	429e      	cmp	r6, r3
 8001d92:	d19c      	bne.n	8001cce <HAL_RCC_ClockConfig+0x7e>
 8001d94:	e772      	b.n	8001c7c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d96:	6863      	ldr	r3, [r4, #4]
 8001d98:	68e9      	ldr	r1, [r5, #12]
 8001d9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	6063      	str	r3, [r4, #4]
 8001da2:	e771      	b.n	8001c88 <HAL_RCC_ClockConfig+0x38>
 8001da4:	40022000 	.word	0x40022000
 8001da8:	40021000 	.word	0x40021000
 8001dac:	080044e0 	.word	0x080044e0
 8001db0:	20000010 	.word	0x20000010

08001db4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x18>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001dbe:	5cd3      	ldrb	r3, [r2, r3]
 8001dc0:	4a03      	ldr	r2, [pc, #12]	; (8001dd0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001dc2:	6810      	ldr	r0, [r2, #0]
}    
 8001dc4:	40d8      	lsrs	r0, r3
 8001dc6:	4770      	bx	lr
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	080044f0 	.word	0x080044f0
 8001dd0:	20000010 	.word	0x20000010

08001dd4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dd4:	6a03      	ldr	r3, [r0, #32]
{
 8001dd6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dde:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001de0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001de2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001de4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001de6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001dea:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001dec:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001dee:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001df2:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001df4:	4d0a      	ldr	r5, [pc, #40]	; (8001e20 <TIM_OC1_SetConfig+0x4c>)
 8001df6:	42a8      	cmp	r0, r5
 8001df8:	d10b      	bne.n	8001e12 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001dfa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001dfc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001e00:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e02:	698e      	ldr	r6, [r1, #24]
 8001e04:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e06:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e0a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e0c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e10:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e12:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e14:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e16:	684a      	ldr	r2, [r1, #4]
 8001e18:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e1a:	6203      	str	r3, [r0, #32]
 8001e1c:	bd70      	pop	{r4, r5, r6, pc}
 8001e1e:	bf00      	nop
 8001e20:	40012c00 	.word	0x40012c00

08001e24 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e24:	6a03      	ldr	r3, [r0, #32]
{
 8001e26:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e2c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e2e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e30:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e32:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e34:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e36:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e3a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e3c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001e3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e42:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e46:	4d0b      	ldr	r5, [pc, #44]	; (8001e74 <TIM_OC3_SetConfig+0x50>)
 8001e48:	42a8      	cmp	r0, r5
 8001e4a:	d10d      	bne.n	8001e68 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e4c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e52:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e56:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e58:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e5a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e5e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e64:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e68:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e6a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e6c:	684a      	ldr	r2, [r1, #4]
 8001e6e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e70:	6203      	str	r3, [r0, #32]
 8001e72:	bd70      	pop	{r4, r5, r6, pc}
 8001e74:	40012c00 	.word	0x40012c00

08001e78 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e78:	6a03      	ldr	r3, [r0, #32]
{
 8001e7a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e80:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e82:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e84:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e86:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e88:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e8a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e8e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e92:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001e94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e98:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001e9c:	4d06      	ldr	r5, [pc, #24]	; (8001eb8 <TIM_OC4_SetConfig+0x40>)
 8001e9e:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001ea0:	bf02      	ittt	eq
 8001ea2:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ea4:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001ea8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001eac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001eae:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001eb0:	684a      	ldr	r2, [r1, #4]
 8001eb2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eb4:	6203      	str	r3, [r0, #32]
 8001eb6:	bd30      	pop	{r4, r5, pc}
 8001eb8:	40012c00 	.word	0x40012c00

08001ebc <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ebc:	6803      	ldr	r3, [r0, #0]
}
 8001ebe:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
}
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_TIM_PWM_MspInit>:
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001ed4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001ed8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	f04f 0302 	mov.w	r3, #2
 8001ee0:	d01c      	beq.n	8001f1c <HAL_TIM_ConfigClockSource+0x48>
 8001ee2:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001ee8:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001eea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001eee:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ef0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001ef4:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001ef8:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001efa:	680a      	ldr	r2, [r1, #0]
 8001efc:	2a40      	cmp	r2, #64	; 0x40
 8001efe:	d079      	beq.n	8001ff4 <HAL_TIM_ConfigClockSource+0x120>
 8001f00:	d819      	bhi.n	8001f36 <HAL_TIM_ConfigClockSource+0x62>
 8001f02:	2a10      	cmp	r2, #16
 8001f04:	f000 8093 	beq.w	800202e <HAL_TIM_ConfigClockSource+0x15a>
 8001f08:	d80a      	bhi.n	8001f20 <HAL_TIM_ConfigClockSource+0x4c>
 8001f0a:	2a00      	cmp	r2, #0
 8001f0c:	f000 8089 	beq.w	8002022 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001f10:	2301      	movs	r3, #1
 8001f12:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001f16:	2300      	movs	r3, #0
 8001f18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001f1c:	4618      	mov	r0, r3
}
 8001f1e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001f20:	2a20      	cmp	r2, #32
 8001f22:	f000 808a 	beq.w	800203a <HAL_TIM_ConfigClockSource+0x166>
 8001f26:	2a30      	cmp	r2, #48	; 0x30
 8001f28:	d1f2      	bne.n	8001f10 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001f2a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f30:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001f34:	e036      	b.n	8001fa4 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001f36:	2a70      	cmp	r2, #112	; 0x70
 8001f38:	d036      	beq.n	8001fa8 <HAL_TIM_ConfigClockSource+0xd4>
 8001f3a:	d81b      	bhi.n	8001f74 <HAL_TIM_ConfigClockSource+0xa0>
 8001f3c:	2a50      	cmp	r2, #80	; 0x50
 8001f3e:	d042      	beq.n	8001fc6 <HAL_TIM_ConfigClockSource+0xf2>
 8001f40:	2a60      	cmp	r2, #96	; 0x60
 8001f42:	d1e5      	bne.n	8001f10 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f44:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f46:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f48:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f4c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f4e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f50:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001f52:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f54:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f5c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f60:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001f64:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f66:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001f68:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f6e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001f72:	e017      	b.n	8001fa4 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001f74:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001f78:	d011      	beq.n	8001f9e <HAL_TIM_ConfigClockSource+0xca>
 8001f7a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001f7e:	d1c7      	bne.n	8001f10 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f80:	688a      	ldr	r2, [r1, #8]
 8001f82:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001f84:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f86:	68c9      	ldr	r1, [r1, #12]
 8001f88:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f8a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f8e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f92:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f94:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f9c:	e002      	b.n	8001fa4 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	e7b3      	b.n	8001f10 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fa8:	688a      	ldr	r2, [r1, #8]
 8001faa:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001fac:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fae:	68c9      	ldr	r1, [r1, #12]
 8001fb0:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fb2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001fba:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001fbc:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001fbe:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fc0:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001fc4:	e7ee      	b.n	8001fa4 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fc6:	684c      	ldr	r4, [r1, #4]
 8001fc8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001fca:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fcc:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fce:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fd2:	f025 0501 	bic.w	r5, r5, #1
 8001fd6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fd8:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001fda:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fdc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fe0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001fe4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fe6:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001fe8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001fee:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001ff2:	e7d7      	b.n	8001fa4 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ff4:	684c      	ldr	r4, [r1, #4]
 8001ff6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001ff8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ffa:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ffc:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002000:	f025 0501 	bic.w	r5, r5, #1
 8002004:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002006:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002008:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800200a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800200e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002014:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002016:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002018:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800201c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002020:	e7c0      	b.n	8001fa4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002022:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002024:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002028:	f042 0207 	orr.w	r2, r2, #7
 800202c:	e7ba      	b.n	8001fa4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800202e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002030:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002034:	f042 0217 	orr.w	r2, r2, #23
 8002038:	e7b4      	b.n	8001fa4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800203a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800203c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002040:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002044:	e7ae      	b.n	8001fa4 <HAL_TIM_ConfigClockSource+0xd0>

08002046 <HAL_TIM_PeriodElapsedCallback>:
 8002046:	4770      	bx	lr

08002048 <HAL_TIM_OC_DelayElapsedCallback>:
 8002048:	4770      	bx	lr

0800204a <HAL_TIM_IC_CaptureCallback>:
 800204a:	4770      	bx	lr

0800204c <HAL_TIM_PWM_PulseFinishedCallback>:
 800204c:	4770      	bx	lr

0800204e <HAL_TIM_TriggerCallback>:
 800204e:	4770      	bx	lr

08002050 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002050:	6803      	ldr	r3, [r0, #0]
{
 8002052:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002054:	691a      	ldr	r2, [r3, #16]
{
 8002056:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002058:	0791      	lsls	r1, r2, #30
 800205a:	d50e      	bpl.n	800207a <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	0792      	lsls	r2, r2, #30
 8002060:	d50b      	bpl.n	800207a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002062:	f06f 0202 	mvn.w	r2, #2
 8002066:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002068:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800206a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800206c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800206e:	079b      	lsls	r3, r3, #30
 8002070:	d077      	beq.n	8002162 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002072:	f7ff ffea 	bl	800204a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	2300      	movs	r3, #0
 8002078:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	0750      	lsls	r0, r2, #29
 8002080:	d510      	bpl.n	80020a4 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	0751      	lsls	r1, r2, #29
 8002086:	d50d      	bpl.n	80020a4 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002088:	f06f 0204 	mvn.w	r2, #4
 800208c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800208e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002090:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002092:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002094:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002098:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800209a:	d068      	beq.n	800216e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800209c:	f7ff ffd5 	bl	800204a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a0:	2300      	movs	r3, #0
 80020a2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	0712      	lsls	r2, r2, #28
 80020aa:	d50f      	bpl.n	80020cc <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	0710      	lsls	r0, r2, #28
 80020b0:	d50c      	bpl.n	80020cc <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020b2:	f06f 0208 	mvn.w	r2, #8
 80020b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020b8:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020ba:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020bc:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020be:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80020c0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020c2:	d05a      	beq.n	800217a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80020c4:	f7ff ffc1 	bl	800204a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c8:	2300      	movs	r3, #0
 80020ca:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	06d2      	lsls	r2, r2, #27
 80020d2:	d510      	bpl.n	80020f6 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	06d0      	lsls	r0, r2, #27
 80020d8:	d50d      	bpl.n	80020f6 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020da:	f06f 0210 	mvn.w	r2, #16
 80020de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020e0:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020e2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020e4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020e6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80020ea:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ec:	d04b      	beq.n	8002186 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80020ee:	f7ff ffac 	bl	800204a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f2:	2300      	movs	r3, #0
 80020f4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	07d1      	lsls	r1, r2, #31
 80020fc:	d508      	bpl.n	8002110 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	07d2      	lsls	r2, r2, #31
 8002102:	d505      	bpl.n	8002110 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002104:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002108:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800210a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800210c:	f7ff ff9b 	bl	8002046 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	0610      	lsls	r0, r2, #24
 8002116:	d508      	bpl.n	800212a <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	0611      	lsls	r1, r2, #24
 800211c:	d505      	bpl.n	800212a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800211e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002122:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002124:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002126:	f000 f974 	bl	8002412 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	0652      	lsls	r2, r2, #25
 8002130:	d508      	bpl.n	8002144 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	0650      	lsls	r0, r2, #25
 8002136:	d505      	bpl.n	8002144 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002138:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800213c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800213e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002140:	f7ff ff85 	bl	800204e <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	0691      	lsls	r1, r2, #26
 800214a:	d522      	bpl.n	8002192 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	0692      	lsls	r2, r2, #26
 8002150:	d51f      	bpl.n	8002192 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002152:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002156:	4620      	mov	r0, r4
}
 8002158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800215c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800215e:	f000 b957 	b.w	8002410 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	f7ff ff71 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002166:	4620      	mov	r0, r4
 8002168:	f7ff ff70 	bl	800204c <HAL_TIM_PWM_PulseFinishedCallback>
 800216c:	e783      	b.n	8002076 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216e:	f7ff ff6b 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002172:	4620      	mov	r0, r4
 8002174:	f7ff ff6a 	bl	800204c <HAL_TIM_PWM_PulseFinishedCallback>
 8002178:	e792      	b.n	80020a0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	f7ff ff65 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217e:	4620      	mov	r0, r4
 8002180:	f7ff ff64 	bl	800204c <HAL_TIM_PWM_PulseFinishedCallback>
 8002184:	e7a0      	b.n	80020c8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	f7ff ff5f 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218a:	4620      	mov	r0, r4
 800218c:	f7ff ff5e 	bl	800204c <HAL_TIM_PWM_PulseFinishedCallback>
 8002190:	e7af      	b.n	80020f2 <HAL_TIM_IRQHandler+0xa2>
 8002192:	bd10      	pop	{r4, pc}

08002194 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002194:	4a1a      	ldr	r2, [pc, #104]	; (8002200 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002196:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002198:	4290      	cmp	r0, r2
 800219a:	d00a      	beq.n	80021b2 <TIM_Base_SetConfig+0x1e>
 800219c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021a0:	d007      	beq.n	80021b2 <TIM_Base_SetConfig+0x1e>
 80021a2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80021a6:	4290      	cmp	r0, r2
 80021a8:	d003      	beq.n	80021b2 <TIM_Base_SetConfig+0x1e>
 80021aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021ae:	4290      	cmp	r0, r2
 80021b0:	d115      	bne.n	80021de <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80021b2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80021b8:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ba:	4a11      	ldr	r2, [pc, #68]	; (8002200 <TIM_Base_SetConfig+0x6c>)
 80021bc:	4290      	cmp	r0, r2
 80021be:	d00a      	beq.n	80021d6 <TIM_Base_SetConfig+0x42>
 80021c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021c4:	d007      	beq.n	80021d6 <TIM_Base_SetConfig+0x42>
 80021c6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80021ca:	4290      	cmp	r0, r2
 80021cc:	d003      	beq.n	80021d6 <TIM_Base_SetConfig+0x42>
 80021ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021d2:	4290      	cmp	r0, r2
 80021d4:	d103      	bne.n	80021de <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021dc:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80021de:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80021e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80021e4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80021e6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e8:	688b      	ldr	r3, [r1, #8]
 80021ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80021ec:	680b      	ldr	r3, [r1, #0]
 80021ee:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <TIM_Base_SetConfig+0x6c>)
 80021f2:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80021f4:	bf04      	itt	eq
 80021f6:	690b      	ldreq	r3, [r1, #16]
 80021f8:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80021fa:	2301      	movs	r3, #1
 80021fc:	6143      	str	r3, [r0, #20]
 80021fe:	4770      	bx	lr
 8002200:	40012c00 	.word	0x40012c00

08002204 <HAL_TIM_Base_Init>:
{
 8002204:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002206:	4604      	mov	r4, r0
 8002208:	b1a0      	cbz	r0, 8002234 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800220a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800220e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002212:	b91b      	cbnz	r3, 800221c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002214:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002218:	f000 ffb4 	bl	8003184 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800221c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800221e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002220:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002224:	1d21      	adds	r1, r4, #4
 8002226:	f7ff ffb5 	bl	8002194 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800222a:	2301      	movs	r3, #1
  return HAL_OK;
 800222c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800222e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002232:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002234:	2001      	movs	r0, #1
}
 8002236:	bd10      	pop	{r4, pc}

08002238 <HAL_TIM_PWM_Init>:
{
 8002238:	b510      	push	{r4, lr}
  if(htim == NULL)
 800223a:	4604      	mov	r4, r0
 800223c:	b1a0      	cbz	r0, 8002268 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800223e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002242:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002246:	b91b      	cbnz	r3, 8002250 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002248:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800224c:	f7ff fe41 	bl	8001ed2 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002250:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002252:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002254:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002258:	1d21      	adds	r1, r4, #4
 800225a:	f7ff ff9b 	bl	8002194 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800225e:	2301      	movs	r3, #1
  return HAL_OK;
 8002260:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002262:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002266:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002268:	2001      	movs	r0, #1
}
 800226a:	bd10      	pop	{r4, pc}

0800226c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800226c:	6a03      	ldr	r3, [r0, #32]
{
 800226e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002270:	f023 0310 	bic.w	r3, r3, #16
 8002274:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002276:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002278:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800227a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800227c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800227e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002282:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002286:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002288:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800228c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002290:	4d0b      	ldr	r5, [pc, #44]	; (80022c0 <TIM_OC2_SetConfig+0x54>)
 8002292:	42a8      	cmp	r0, r5
 8002294:	d10d      	bne.n	80022b2 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002296:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800229c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80022a0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80022a2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022a4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80022a8:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80022aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80022ae:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80022b2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80022b4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80022b6:	684a      	ldr	r2, [r1, #4]
 80022b8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80022ba:	6203      	str	r3, [r0, #32]
 80022bc:	bd70      	pop	{r4, r5, r6, pc}
 80022be:	bf00      	nop
 80022c0:	40012c00 	.word	0x40012c00

080022c4 <HAL_TIM_PWM_ConfigChannel>:
{
 80022c4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80022c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80022ca:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	f04f 0002 	mov.w	r0, #2
 80022d2:	d025      	beq.n	8002320 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80022d4:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80022d6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80022da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80022de:	2a0c      	cmp	r2, #12
 80022e0:	d818      	bhi.n	8002314 <HAL_TIM_PWM_ConfigChannel+0x50>
 80022e2:	e8df f002 	tbb	[pc, r2]
 80022e6:	1707      	.short	0x1707
 80022e8:	171e1717 	.word	0x171e1717
 80022ec:	172f1717 	.word	0x172f1717
 80022f0:	1717      	.short	0x1717
 80022f2:	40          	.byte	0x40
 80022f3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022f4:	6820      	ldr	r0, [r4, #0]
 80022f6:	f7ff fd6d 	bl	8001dd4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022fa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022fc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	f042 0208 	orr.w	r2, r2, #8
 8002304:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002306:	699a      	ldr	r2, [r3, #24]
 8002308:	f022 0204 	bic.w	r2, r2, #4
 800230c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800230e:	699a      	ldr	r2, [r3, #24]
 8002310:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002312:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002314:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002316:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002318:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800231c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002320:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002322:	6820      	ldr	r0, [r4, #0]
 8002324:	f7ff ffa2 	bl	800226c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002328:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800232a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002334:	699a      	ldr	r2, [r3, #24]
 8002336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800233a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002342:	e7e6      	b.n	8002312 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002344:	6820      	ldr	r0, [r4, #0]
 8002346:	f7ff fd6d 	bl	8001e24 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800234a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800234c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800234e:	69da      	ldr	r2, [r3, #28]
 8002350:	f042 0208 	orr.w	r2, r2, #8
 8002354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	f022 0204 	bic.w	r2, r2, #4
 800235c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800235e:	69da      	ldr	r2, [r3, #28]
 8002360:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002362:	61da      	str	r2, [r3, #28]
    break;
 8002364:	e7d6      	b.n	8002314 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002366:	6820      	ldr	r0, [r4, #0]
 8002368:	f7ff fd86 	bl	8001e78 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800236c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800236e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002376:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002378:	69da      	ldr	r2, [r3, #28]
 800237a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800237e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002380:	69da      	ldr	r2, [r3, #28]
 8002382:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002386:	e7ec      	b.n	8002362 <HAL_TIM_PWM_ConfigChannel+0x9e>

08002388 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002388:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800238a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800238c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800238e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002390:	ea23 0304 	bic.w	r3, r3, r4
 8002394:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002396:	6a03      	ldr	r3, [r0, #32]
 8002398:	408a      	lsls	r2, r1
 800239a:	431a      	orrs	r2, r3
 800239c:	6202      	str	r2, [r0, #32]
 800239e:	bd10      	pop	{r4, pc}

080023a0 <HAL_TIM_PWM_Start>:
{
 80023a0:	b510      	push	{r4, lr}
 80023a2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023a4:	2201      	movs	r2, #1
 80023a6:	6800      	ldr	r0, [r0, #0]
 80023a8:	f7ff ffee 	bl	8002388 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	4a06      	ldr	r2, [pc, #24]	; (80023c8 <HAL_TIM_PWM_Start+0x28>)
}
 80023b0:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023b2:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80023b4:	bf02      	ittt	eq
 80023b6:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80023b8:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80023bc:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	f042 0201 	orr.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
}
 80023c6:	bd10      	pop	{r4, pc}
 80023c8:	40012c00 	.word	0x40012c00

080023cc <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80023cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80023d0:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	f04f 0302 	mov.w	r3, #2
 80023d8:	d018      	beq.n	800240c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80023da:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80023de:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80023e0:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80023e2:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80023e4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80023e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023ea:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4322      	orrs	r2, r4
 80023f0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023f8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002400:	2301      	movs	r3, #1
 8002402:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002406:	2300      	movs	r3, #0
 8002408:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800240c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800240e:	bd10      	pop	{r4, pc}

08002410 <HAL_TIMEx_CommutationCallback>:
 8002410:	4770      	bx	lr

08002412 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002412:	4770      	bx	lr

08002414 <Accel_ini>:
void Accel_ini()
{
	uint8_t data[1] =  {0};

	//reset the whole module first
	data[0] =  1<<7;
 8002414:	2380      	movs	r3, #128	; 0x80
{
 8002416:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	status = HAL_I2C_Mem_Write(&hi2c1, (uint16_t)adress, (uint16_t)0x6B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 800241a:	2401      	movs	r4, #1
 800241c:	f44f 3880 	mov.w	r8, #65536	; 0x10000
{
 8002420:	b087      	sub	sp, #28
	data[0] =  1<<7;
 8002422:	ad06      	add	r5, sp, #24
	status = HAL_I2C_Mem_Write(&hi2c1, (uint16_t)adress, (uint16_t)0x6B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 8002424:	4f1f      	ldr	r7, [pc, #124]	; (80024a4 <Accel_ini+0x90>)
	data[0] =  1<<7;
 8002426:	f805 3d04 	strb.w	r3, [r5, #-4]!
	status = HAL_I2C_Mem_Write(&hi2c1, (uint16_t)adress, (uint16_t)0x6B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 800242a:	226b      	movs	r2, #107	; 0x6b
 800242c:	4623      	mov	r3, r4
 800242e:	21d0      	movs	r1, #208	; 0xd0
 8002430:	f8cd 8008 	str.w	r8, [sp, #8]
 8002434:	9401      	str	r4, [sp, #4]
 8002436:	9500      	str	r5, [sp, #0]
 8002438:	4638      	mov	r0, r7
 800243a:	f7fe ffdb 	bl	80013f4 <HAL_I2C_Mem_Write>


	HAL_Delay(50);    //wait for 50ms for the gyro to stable
	data[0] = 0x00;
 800243e:	f04f 0900 	mov.w	r9, #0
	status = HAL_I2C_Mem_Write(&hi2c1, (uint16_t)adress, (uint16_t)0x6B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 8002442:	4e19      	ldr	r6, [pc, #100]	; (80024a8 <Accel_ini+0x94>)
 8002444:	7030      	strb	r0, [r6, #0]
	HAL_Delay(50);    //wait for 50ms for the gyro to stable
 8002446:	2032      	movs	r0, #50	; 0x32
 8002448:	f7fe fb5a 	bl	8000b00 <HAL_Delay>
	status = HAL_I2C_Mem_Write(&hi2c1, adress, 0x6B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 800244c:	4623      	mov	r3, r4
 800244e:	f8cd 8008 	str.w	r8, [sp, #8]
 8002452:	9401      	str	r4, [sp, #4]
 8002454:	9500      	str	r5, [sp, #0]
 8002456:	226b      	movs	r2, #107	; 0x6b
 8002458:	21d0      	movs	r1, #208	; 0xd0
 800245a:	4638      	mov	r0, r7
	data[0] = 0x00;
 800245c:	f88d 9014 	strb.w	r9, [sp, #20]
	status = HAL_I2C_Mem_Write(&hi2c1, adress, 0x6B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 8002460:	f7fe ffc8 	bl	80013f4 <HAL_I2C_Mem_Write>
	//GYRO_CONFIG: FSR 500
	data[0] = 0x08;
 8002464:	2308      	movs	r3, #8
	status = HAL_I2C_Mem_Write(&hi2c1, adress, 0x6B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 8002466:	7030      	strb	r0, [r6, #0]
	data[0] = 0x08;
 8002468:	f88d 3014 	strb.w	r3, [sp, #20]
		status = HAL_I2C_Mem_Write(&hi2c1, adress, 0x1B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 800246c:	f8cd 8008 	str.w	r8, [sp, #8]
 8002470:	4623      	mov	r3, r4
 8002472:	9401      	str	r4, [sp, #4]
 8002474:	9500      	str	r5, [sp, #0]
 8002476:	221b      	movs	r2, #27
 8002478:	21d0      	movs	r1, #208	; 0xd0
 800247a:	4638      	mov	r0, r7
 800247c:	f7fe ffba 	bl	80013f4 <HAL_I2C_Mem_Write>
	//ACCEL_CONFIG: 2g
		data[0] = 0x0;
		status =  HAL_I2C_Mem_Write(&hi2c1, adress, 0x1C, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 8002480:	f8cd 8008 	str.w	r8, [sp, #8]
		status = HAL_I2C_Mem_Write(&hi2c1, adress, 0x1B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 8002484:	7030      	strb	r0, [r6, #0]
		status =  HAL_I2C_Mem_Write(&hi2c1, adress, 0x1C, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 8002486:	9401      	str	r4, [sp, #4]
 8002488:	9500      	str	r5, [sp, #0]
 800248a:	4623      	mov	r3, r4
 800248c:	221c      	movs	r2, #28
 800248e:	21d0      	movs	r1, #208	; 0xd0
 8002490:	4638      	mov	r0, r7
		data[0] = 0x0;
 8002492:	f88d 9014 	strb.w	r9, [sp, #20]
		status =  HAL_I2C_Mem_Write(&hi2c1, adress, 0x1C, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 8002496:	f7fe ffad 	bl	80013f4 <HAL_I2C_Mem_Write>
 800249a:	7030      	strb	r0, [r6, #0]
}
 800249c:	b007      	add	sp, #28
 800249e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024a2:	bf00      	nop
 80024a4:	200004a4 	.word	0x200004a4
 80024a8:	20000592 	.word	0x20000592

080024ac <Accel_GetXYZ>:

void Accel_GetXYZ(int16_t* pData1)

{
 uint8_t buffer1[6] = {0};
 80024ac:	2200      	movs	r2, #0
{
 80024ae:	b510      	push	{r4, lr}
 80024b0:	b086      	sub	sp, #24
 uint8_t buffer1[6] = {0};
 80024b2:	9204      	str	r2, [sp, #16]
 80024b4:	f8ad 2014 	strh.w	r2, [sp, #20]
  /* Read output register X, Y & Z acceleration */
status = HAL_I2C_Mem_Read(&hi2c1, adress, 0x3B, I2C_MEMADD_SIZE_8BIT, buffer1, (uint16_t)0x06, 0x10000);
 80024b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024bc:	9202      	str	r2, [sp, #8]
 80024be:	2206      	movs	r2, #6
 uint8_t buffer1[6] = {0};
 80024c0:	ab04      	add	r3, sp, #16
{
 80024c2:	4604      	mov	r4, r0
status = HAL_I2C_Mem_Read(&hi2c1, adress, 0x3B, I2C_MEMADD_SIZE_8BIT, buffer1, (uint16_t)0x06, 0x10000);
 80024c4:	9201      	str	r2, [sp, #4]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	223b      	movs	r2, #59	; 0x3b
 80024ca:	2301      	movs	r3, #1
 80024cc:	21d0      	movs	r1, #208	; 0xd0
 80024ce:	480e      	ldr	r0, [pc, #56]	; (8002508 <Accel_GetXYZ+0x5c>)
 80024d0:	f7ff f826 	bl	8001520 <HAL_I2C_Mem_Read>
 80024d4:	4b0d      	ldr	r3, [pc, #52]	; (800250c <Accel_GetXYZ+0x60>)

for(uint8_t i=0; i<3; i++)
    {
      pData1[i]=(int16_t)(((uint16_t)buffer1[2*i] << 8) + buffer1[2*i+1]);
 80024d6:	f89d 2010 	ldrb.w	r2, [sp, #16]
status = HAL_I2C_Mem_Read(&hi2c1, adress, 0x3B, I2C_MEMADD_SIZE_8BIT, buffer1, (uint16_t)0x06, 0x10000);
 80024da:	7018      	strb	r0, [r3, #0]
      pData1[i]=(int16_t)(((uint16_t)buffer1[2*i] << 8) + buffer1[2*i+1]);
 80024dc:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80024e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80024e4:	8023      	strh	r3, [r4, #0]
 80024e6:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80024ea:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80024ee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80024f2:	8063      	strh	r3, [r4, #2]
 80024f4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80024f8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80024fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002500:	80a3      	strh	r3, [r4, #4]
    }
}
 8002502:	b006      	add	sp, #24
 8002504:	bd10      	pop	{r4, pc}
 8002506:	bf00      	nop
 8002508:	200004a4 	.word	0x200004a4
 800250c:	20000592 	.word	0x20000592

08002510 <Gyro_GetXYZ>:

void Gyro_GetXYZ(int16_t* pData2)

{
 uint8_t buffer2[6] = {0};
 8002510:	2200      	movs	r2, #0
{
 8002512:	b510      	push	{r4, lr}
 8002514:	b086      	sub	sp, #24
 uint8_t buffer2[6] = {0};
 8002516:	9204      	str	r2, [sp, #16]
 8002518:	f8ad 2014 	strh.w	r2, [sp, #20]
  /* Read output register X, Y & Z gyroscope */
status = HAL_I2C_Mem_Read(&hi2c1, adress, 0x43, I2C_MEMADD_SIZE_8BIT, buffer2, (uint16_t)0x06, 0x10000);
 800251c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002520:	9202      	str	r2, [sp, #8]
 8002522:	2206      	movs	r2, #6
 uint8_t buffer2[6] = {0};
 8002524:	ab04      	add	r3, sp, #16
{
 8002526:	4604      	mov	r4, r0
status = HAL_I2C_Mem_Read(&hi2c1, adress, 0x43, I2C_MEMADD_SIZE_8BIT, buffer2, (uint16_t)0x06, 0x10000);
 8002528:	9201      	str	r2, [sp, #4]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	2243      	movs	r2, #67	; 0x43
 800252e:	2301      	movs	r3, #1
 8002530:	21d0      	movs	r1, #208	; 0xd0
 8002532:	480e      	ldr	r0, [pc, #56]	; (800256c <Gyro_GetXYZ+0x5c>)
 8002534:	f7fe fff4 	bl	8001520 <HAL_I2C_Mem_Read>
 8002538:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <Gyro_GetXYZ+0x60>)

for(uint8_t i=0; i<3; i++)
    {
      pData2[i]=(int16_t)(((uint16_t)buffer2[2*i] << 8) + buffer2[2*i+1]);
 800253a:	f89d 2010 	ldrb.w	r2, [sp, #16]
status = HAL_I2C_Mem_Read(&hi2c1, adress, 0x43, I2C_MEMADD_SIZE_8BIT, buffer2, (uint16_t)0x06, 0x10000);
 800253e:	7018      	strb	r0, [r3, #0]
      pData2[i]=(int16_t)(((uint16_t)buffer2[2*i] << 8) + buffer2[2*i+1]);
 8002540:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002544:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002548:	8023      	strh	r3, [r4, #0]
 800254a:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800254e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8002552:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002556:	8063      	strh	r3, [r4, #2]
 8002558:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800255c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002560:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002564:	80a3      	strh	r3, [r4, #4]
    }

}
 8002566:	b006      	add	sp, #24
 8002568:	bd10      	pop	{r4, pc}
 800256a:	bf00      	nop
 800256c:	200004a4 	.word	0x200004a4
 8002570:	20000592 	.word	0x20000592
 8002574:	00000000 	.word	0x00000000

08002578 <Accel_ReadAcc>:
void Accel_ReadAcc(void)
{
int16_t buffer[3] = {0};
 8002578:	2300      	movs	r3, #0
{
 800257a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 xval = yval = zval = 0x00;
 800257e:	4a6a      	ldr	r2, [pc, #424]	; (8002728 <Accel_ReadAcc+0x1b0>)
{
 8002580:	b085      	sub	sp, #20
 xval = yval = zval = 0x00;
 8002582:	4c6a      	ldr	r4, [pc, #424]	; (800272c <Accel_ReadAcc+0x1b4>)
 8002584:	4d6a      	ldr	r5, [pc, #424]	; (8002730 <Accel_ReadAcc+0x1b8>)

 Accel_GetXYZ(buffer);
 8002586:	a802      	add	r0, sp, #8
int16_t buffer[3] = {0};
 8002588:	9302      	str	r3, [sp, #8]
 800258a:	f8ad 300c 	strh.w	r3, [sp, #12]
 xval = yval = zval = 0x00;
 800258e:	8013      	strh	r3, [r2, #0]
 8002590:	8023      	strh	r3, [r4, #0]
 8002592:	802b      	strh	r3, [r5, #0]
 Accel_GetXYZ(buffer);
 8002594:	f7ff ff8a 	bl	80024ac <Accel_GetXYZ>

 /*xval = buffer[0];
 yval = buffer[1];
 zval = buffer[2];*/
 ydata = atan2(buffer[1], sqrt(pow(buffer[0], 2) + pow(buffer[2], 2))) * R2DEG;
 8002598:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 800259c:	f7fd ff2a 	bl	80003f4 <__aeabi_i2d>
 80025a0:	4606      	mov	r6, r0
 80025a2:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80025a6:	460f      	mov	r7, r1
 80025a8:	f7fd ff24 	bl	80003f4 <__aeabi_i2d>
 80025ac:	4680      	mov	r8, r0
 80025ae:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80025b2:	4689      	mov	r9, r1
 80025b4:	f7fd ff1e 	bl	80003f4 <__aeabi_i2d>
 80025b8:	4642      	mov	r2, r8
 80025ba:	4682      	mov	sl, r0
 80025bc:	468b      	mov	fp, r1
 80025be:	464b      	mov	r3, r9
 80025c0:	4640      	mov	r0, r8
 80025c2:	4649      	mov	r1, r9
 80025c4:	f7fd ff7c 	bl	80004c0 <__aeabi_dmul>
 80025c8:	4652      	mov	r2, sl
 80025ca:	4680      	mov	r8, r0
 80025cc:	4689      	mov	r9, r1
 80025ce:	465b      	mov	r3, fp
 80025d0:	4650      	mov	r0, sl
 80025d2:	4659      	mov	r1, fp
 80025d4:	f7fd ff74 	bl	80004c0 <__aeabi_dmul>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4640      	mov	r0, r8
 80025de:	4649      	mov	r1, r9
 80025e0:	f7fd fdbc 	bl	800015c <__adddf3>
 80025e4:	f000 feec 	bl	80033c0 <sqrt>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4630      	mov	r0, r6
 80025ee:	4639      	mov	r1, r7
 80025f0:	f000 fee4 	bl	80033bc <atan2>
 80025f4:	a346      	add	r3, pc, #280	; (adr r3, 8002710 <Accel_ReadAcc+0x198>)
 80025f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fa:	f7fd ff61 	bl	80004c0 <__aeabi_dmul>
 80025fe:	f7fe fa0f 	bl	8000a20 <__aeabi_d2iz>
 8002602:	f8df a148 	ldr.w	sl, [pc, #328]	; 800274c <Accel_ReadAcc+0x1d4>
 8002606:	f8aa 0000 	strh.w	r0, [sl]
 xdata = atan2(buffer[0], sqrt(pow(buffer[1], 2) + pow(buffer[2], 2))) * R2DEG;
 800260a:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 800260e:	f7fd fef1 	bl	80003f4 <__aeabi_i2d>
 8002612:	4680      	mov	r8, r0
 8002614:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 8002618:	4689      	mov	r9, r1
 800261a:	f7fd feeb 	bl	80003f4 <__aeabi_i2d>
 800261e:	4606      	mov	r6, r0
 8002620:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8002624:	460f      	mov	r7, r1
 8002626:	f7fd fee5 	bl	80003f4 <__aeabi_i2d>
 800262a:	4632      	mov	r2, r6
 800262c:	e9cd 0100 	strd	r0, r1, [sp]
 8002630:	463b      	mov	r3, r7
 8002632:	4630      	mov	r0, r6
 8002634:	4639      	mov	r1, r7
 8002636:	f7fd ff43 	bl	80004c0 <__aeabi_dmul>
 800263a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800263e:	4606      	mov	r6, r0
 8002640:	460f      	mov	r7, r1
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	f7fd ff3b 	bl	80004c0 <__aeabi_dmul>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4630      	mov	r0, r6
 8002650:	4639      	mov	r1, r7
 8002652:	f7fd fd83 	bl	800015c <__adddf3>
 8002656:	f000 feb3 	bl	80033c0 <sqrt>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4640      	mov	r0, r8
 8002660:	4649      	mov	r1, r9
 8002662:	f000 feab 	bl	80033bc <atan2>
 8002666:	a32a      	add	r3, pc, #168	; (adr r3, 8002710 <Accel_ReadAcc+0x198>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fd ff28 	bl	80004c0 <__aeabi_dmul>
 8002670:	f7fe f9d6 	bl	8000a20 <__aeabi_d2iz>
 8002674:	4b2f      	ldr	r3, [pc, #188]	; (8002734 <Accel_ReadAcc+0x1bc>)
 8002676:	b206      	sxth	r6, r0
 8002678:	801e      	strh	r6, [r3, #0]
 zdata = buffer[2];
 800267a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800267e:	4b2e      	ldr	r3, [pc, #184]	; (8002738 <Accel_ReadAcc+0x1c0>)

 xtemp = XGf + xdata;
 ytemp = YGf + ydata;
 8002680:	f9ba 7000 	ldrsh.w	r7, [sl]
 zdata = buffer[2];
 8002684:	801a      	strh	r2, [r3, #0]
 xtemp = XGf + xdata;
 8002686:	4b2d      	ldr	r3, [pc, #180]	; (800273c <Accel_ReadAcc+0x1c4>)
 8002688:	f9b3 0000 	ldrsh.w	r0, [r3]
 800268c:	4b2c      	ldr	r3, [pc, #176]	; (8002740 <Accel_ReadAcc+0x1c8>)
 800268e:	1832      	adds	r2, r6, r0
 8002690:	801a      	strh	r2, [r3, #0]
 ytemp = YGf + ydata;
 8002692:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <Accel_ReadAcc+0x1cc>)
 8002694:	f9b3 b000 	ldrsh.w	fp, [r3]
 8002698:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <Accel_ReadAcc+0x1d0>)
 800269a:	eb0b 0207 	add.w	r2, fp, r7
 800269e:	801a      	strh	r2, [r3, #0]

xval = XGf * (1 - KOEF_COMPL) + xdata*KOEF_COMPL;
 80026a0:	f7fd fea8 	bl	80003f4 <__aeabi_i2d>
 80026a4:	a31c      	add	r3, pc, #112	; (adr r3, 8002718 <Accel_ReadAcc+0x1a0>)
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	f7fd ff09 	bl	80004c0 <__aeabi_dmul>
 80026ae:	4680      	mov	r8, r0
 80026b0:	4630      	mov	r0, r6
 80026b2:	4689      	mov	r9, r1
 80026b4:	f7fd fe9e 	bl	80003f4 <__aeabi_i2d>
 80026b8:	a319      	add	r3, pc, #100	; (adr r3, 8002720 <Accel_ReadAcc+0x1a8>)
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	f7fd feff 	bl	80004c0 <__aeabi_dmul>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4640      	mov	r0, r8
 80026c8:	4649      	mov	r1, r9
 80026ca:	f7fd fd47 	bl	800015c <__adddf3>
 80026ce:	f7fe f9a7 	bl	8000a20 <__aeabi_d2iz>
 80026d2:	8028      	strh	r0, [r5, #0]
yval = YGf * (1-KOEF_COMPL) + ydata*KOEF_COMPL;
 80026d4:	4658      	mov	r0, fp
 80026d6:	f7fd fe8d 	bl	80003f4 <__aeabi_i2d>
 80026da:	a30f      	add	r3, pc, #60	; (adr r3, 8002718 <Accel_ReadAcc+0x1a0>)
 80026dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e0:	f7fd feee 	bl	80004c0 <__aeabi_dmul>
 80026e4:	4680      	mov	r8, r0
 80026e6:	4638      	mov	r0, r7
 80026e8:	4689      	mov	r9, r1
 80026ea:	f7fd fe83 	bl	80003f4 <__aeabi_i2d>
 80026ee:	a30c      	add	r3, pc, #48	; (adr r3, 8002720 <Accel_ReadAcc+0x1a8>)
 80026f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f4:	f7fd fee4 	bl	80004c0 <__aeabi_dmul>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4640      	mov	r0, r8
 80026fe:	4649      	mov	r1, r9
 8002700:	f7fd fd2c 	bl	800015c <__adddf3>
 8002704:	f7fe f98c 	bl	8000a20 <__aeabi_d2iz>
 8002708:	8020      	strh	r0, [r4, #0]
}
 800270a:	b005      	add	sp, #20
 800270c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002710:	20000000 	.word	0x20000000
 8002714:	404ca5dc 	.word	0x404ca5dc
 8002718:	9999999a 	.word	0x9999999a
 800271c:	3fe99999 	.word	0x3fe99999
 8002720:	9999999a 	.word	0x9999999a
 8002724:	3fc99999 	.word	0x3fc99999
 8002728:	2000057e 	.word	0x2000057e
 800272c:	20000554 	.word	0x20000554
 8002730:	20000576 	.word	0x20000576
 8002734:	2000057a 	.word	0x2000057a
 8002738:	20000556 	.word	0x20000556
 800273c:	20000580 	.word	0x20000580
 8002740:	20000578 	.word	0x20000578
 8002744:	20000558 	.word	0x20000558
 8002748:	2000054c 	.word	0x2000054c
 800274c:	2000057c 	.word	0x2000057c

08002750 <ReadGyro>:

void ReadGyro(void)
{
int16_t buffer[3] = {0};
 8002750:	2300      	movs	r3, #0
{
 8002752:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 xGyro = yGyro = zGyro = 0x00;
 8002756:	4e44      	ldr	r6, [pc, #272]	; (8002868 <ReadGyro+0x118>)
 8002758:	4c44      	ldr	r4, [pc, #272]	; (800286c <ReadGyro+0x11c>)
 800275a:	4d45      	ldr	r5, [pc, #276]	; (8002870 <ReadGyro+0x120>)

 Gyro_GetXYZ(buffer);
 800275c:	4668      	mov	r0, sp
int16_t buffer[3] = {0};
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	f8ad 3004 	strh.w	r3, [sp, #4]
 xGyro = yGyro = zGyro = 0x00;
 8002764:	8033      	strh	r3, [r6, #0]
 8002766:	8023      	strh	r3, [r4, #0]
 8002768:	802b      	strh	r3, [r5, #0]
 Gyro_GetXYZ(buffer);
 800276a:	f7ff fed1 	bl	8002510 <Gyro_GetXYZ>

 xGyro = buffer[0];
 yGyro = buffer[1];
 zGyro = buffer[2];

 XG = (xGyro - fGX_Cal);
 800276e:	4b41      	ldr	r3, [pc, #260]	; (8002874 <ReadGyro+0x124>)
 xGyro = buffer[0];
 8002770:	f9bd 0000 	ldrsh.w	r0, [sp]
 XG = (xGyro - fGX_Cal);
 8002774:	681b      	ldr	r3, [r3, #0]
 xGyro = buffer[0];
 8002776:	8028      	strh	r0, [r5, #0]
 XG = (xGyro - fGX_Cal);
 8002778:	1ac0      	subs	r0, r0, r3
 800277a:	4b3f      	ldr	r3, [pc, #252]	; (8002878 <ReadGyro+0x128>)
 800277c:	b200      	sxth	r0, r0
 800277e:	8018      	strh	r0, [r3, #0]
 YG = (yGyro - fGY_Cal);
 8002780:	4b3e      	ldr	r3, [pc, #248]	; (800287c <ReadGyro+0x12c>)
 yGyro = buffer[1];
 8002782:	f9bd 5002 	ldrsh.w	r5, [sp, #2]
 YG = (yGyro - fGY_Cal);
 8002786:	681b      	ldr	r3, [r3, #0]
 yGyro = buffer[1];
 8002788:	8025      	strh	r5, [r4, #0]
 YG = (yGyro - fGY_Cal);
 800278a:	1aed      	subs	r5, r5, r3
 800278c:	4b3c      	ldr	r3, [pc, #240]	; (8002880 <ReadGyro+0x130>)
 800278e:	b22d      	sxth	r5, r5
 8002790:	801d      	strh	r5, [r3, #0]
 ZG = (zGyro - fGZ_Cal);
 8002792:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <ReadGyro+0x134>)
 zGyro = buffer[2];
 8002794:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 ZG = (zGyro - fGZ_Cal);
 8002798:	681b      	ldr	r3, [r3, #0]
 zGyro = buffer[2];
 800279a:	8034      	strh	r4, [r6, #0]
 ZG = (zGyro - fGZ_Cal);
 800279c:	1ae4      	subs	r4, r4, r3
 800279e:	4b3a      	ldr	r3, [pc, #232]	; (8002888 <ReadGyro+0x138>)
 80027a0:	b224      	sxth	r4, r4
 80027a2:	801c      	strh	r4, [r3, #0]
 /*if((XG < 20 && XG > 0)|| (XG > -20 && XG < 0))
	 XGf += 0;
 else*/
	 XGf += XG/65.5 * 0.1;
 80027a4:	f7fd fe26 	bl	80003f4 <__aeabi_i2d>
 80027a8:	a32b      	add	r3, pc, #172	; (adr r3, 8002858 <ReadGyro+0x108>)
 80027aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ae:	f7fd ffb1 	bl	8000714 <__aeabi_ddiv>
 80027b2:	a32b      	add	r3, pc, #172	; (adr r3, 8002860 <ReadGyro+0x110>)
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	f7fd fe82 	bl	80004c0 <__aeabi_dmul>
 80027bc:	4e33      	ldr	r6, [pc, #204]	; (800288c <ReadGyro+0x13c>)
 80027be:	4680      	mov	r8, r0
 80027c0:	f9b6 0000 	ldrsh.w	r0, [r6]
 80027c4:	4689      	mov	r9, r1
 80027c6:	f7fd fe15 	bl	80003f4 <__aeabi_i2d>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4640      	mov	r0, r8
 80027d0:	4649      	mov	r1, r9
 80027d2:	f7fd fcc3 	bl	800015c <__adddf3>
 80027d6:	f7fe f923 	bl	8000a20 <__aeabi_d2iz>
 80027da:	8030      	strh	r0, [r6, #0]
/* if((YG < 20 && YG > 0)|| (YG > -20 && YG < 0))
	 YGf += 0;
 else*/
	 YGf += YG/65.5 * 0.1;
 80027dc:	4628      	mov	r0, r5
 80027de:	f7fd fe09 	bl	80003f4 <__aeabi_i2d>
 80027e2:	a31d      	add	r3, pc, #116	; (adr r3, 8002858 <ReadGyro+0x108>)
 80027e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e8:	f7fd ff94 	bl	8000714 <__aeabi_ddiv>
 80027ec:	a31c      	add	r3, pc, #112	; (adr r3, 8002860 <ReadGyro+0x110>)
 80027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f2:	f7fd fe65 	bl	80004c0 <__aeabi_dmul>
 80027f6:	4e26      	ldr	r6, [pc, #152]	; (8002890 <ReadGyro+0x140>)
 80027f8:	4680      	mov	r8, r0
 80027fa:	f9b6 0000 	ldrsh.w	r0, [r6]
 80027fe:	4689      	mov	r9, r1
 8002800:	f7fd fdf8 	bl	80003f4 <__aeabi_i2d>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4640      	mov	r0, r8
 800280a:	4649      	mov	r1, r9
 800280c:	f7fd fca6 	bl	800015c <__adddf3>
 8002810:	f7fe f906 	bl	8000a20 <__aeabi_d2iz>
 8002814:	8030      	strh	r0, [r6, #0]
 /*if((ZG < 20 && ZG > 0)|| (ZG > -20 && ZG < 0))
	 ZGf += 0;
 else*/
	 ZGf += ZG/65.5* 0.1;
 8002816:	4620      	mov	r0, r4
 8002818:	f7fd fdec 	bl	80003f4 <__aeabi_i2d>
 800281c:	a30e      	add	r3, pc, #56	; (adr r3, 8002858 <ReadGyro+0x108>)
 800281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002822:	f7fd ff77 	bl	8000714 <__aeabi_ddiv>
 8002826:	a30e      	add	r3, pc, #56	; (adr r3, 8002860 <ReadGyro+0x110>)
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f7fd fe48 	bl	80004c0 <__aeabi_dmul>
 8002830:	4d18      	ldr	r5, [pc, #96]	; (8002894 <ReadGyro+0x144>)
 8002832:	4606      	mov	r6, r0
 8002834:	f9b5 0000 	ldrsh.w	r0, [r5]
 8002838:	460f      	mov	r7, r1
 800283a:	f7fd fddb 	bl	80003f4 <__aeabi_i2d>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4630      	mov	r0, r6
 8002844:	4639      	mov	r1, r7
 8002846:	f7fd fc89 	bl	800015c <__adddf3>
 800284a:	f7fe f8e9 	bl	8000a20 <__aeabi_d2iz>
 800284e:	8028      	strh	r0, [r5, #0]
}
 8002850:	b003      	add	sp, #12
 8002852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002856:	bf00      	nop
 8002858:	00000000 	.word	0x00000000
 800285c:	40506000 	.word	0x40506000
 8002860:	9999999a 	.word	0x9999999a
 8002864:	3fb99999 	.word	0x3fb99999
 8002868:	20000590 	.word	0x20000590
 800286c:	20000570 	.word	0x20000570
 8002870:	2000054e 	.word	0x2000054e
 8002874:	20000560 	.word	0x20000560
 8002878:	2000056a 	.word	0x2000056a
 800287c:	20000564 	.word	0x20000564
 8002880:	20000584 	.word	0x20000584
 8002884:	2000055c 	.word	0x2000055c
 8002888:	20000582 	.word	0x20000582
 800288c:	20000580 	.word	0x20000580
 8002890:	20000558 	.word	0x20000558
 8002894:	2000056e 	.word	0x2000056e

08002898 <GyroCalibrate>:

void GyroCalibrate()
{
 8002898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289a:	f242 7410 	movw	r4, #10000	; 0x2710
	//int16_t Gyrodata[6];
	  uint16_t iNumCM = 10000;
	  for (int i = 0; i < iNumCM ; i++)
	  {
		  ReadGyro();
	    fGX_Cal += xGyro;
 800289e:	4e0d      	ldr	r6, [pc, #52]	; (80028d4 <GyroCalibrate+0x3c>)
 80028a0:	4f0d      	ldr	r7, [pc, #52]	; (80028d8 <GyroCalibrate+0x40>)
	    fGY_Cal += yGyro;
 80028a2:	4d0e      	ldr	r5, [pc, #56]	; (80028dc <GyroCalibrate+0x44>)
		  ReadGyro();
 80028a4:	f7ff ff54 	bl	8002750 <ReadGyro>
	    fGX_Cal += xGyro;
 80028a8:	6832      	ldr	r2, [r6, #0]
 80028aa:	f9b7 3000 	ldrsh.w	r3, [r7]
	  for (int i = 0; i < iNumCM ; i++)
 80028ae:	3c01      	subs	r4, #1
	    fGX_Cal += xGyro;
 80028b0:	4413      	add	r3, r2
 80028b2:	6033      	str	r3, [r6, #0]
	    fGY_Cal += yGyro;
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <GyroCalibrate+0x48>)
 80028b6:	682a      	ldr	r2, [r5, #0]
 80028b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028bc:	4413      	add	r3, r2
 80028be:	602b      	str	r3, [r5, #0]
	    fGZ_Cal += zGyro;
 80028c0:	4a08      	ldr	r2, [pc, #32]	; (80028e4 <GyroCalibrate+0x4c>)
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <GyroCalibrate+0x50>)
 80028c4:	6811      	ldr	r1, [r2, #0]
 80028c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ca:	440b      	add	r3, r1
 80028cc:	6013      	str	r3, [r2, #0]
	  for (int i = 0; i < iNumCM ; i++)
 80028ce:	d1e9      	bne.n	80028a4 <GyroCalibrate+0xc>
	    //HAL_Delay(3);
	  }
	 //  isinitialized = 1;
}
 80028d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000560 	.word	0x20000560
 80028d8:	2000054e 	.word	0x2000054e
 80028dc:	20000564 	.word	0x20000564
 80028e0:	20000570 	.word	0x20000570
 80028e4:	2000055c 	.word	0x2000055c
 80028e8:	20000590 	.word	0x20000590

080028ec <deriveGyro>:

void deriveGyro()
{
	  uint16_t iNumCM = 10000;
	fGX_Cal /= iNumCM;
 80028ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80028f0:	4907      	ldr	r1, [pc, #28]	; (8002910 <deriveGyro+0x24>)
 80028f2:	680b      	ldr	r3, [r1, #0]
 80028f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
		  fGY_Cal /= iNumCM;
 80028fa:	4906      	ldr	r1, [pc, #24]	; (8002914 <deriveGyro+0x28>)
 80028fc:	680b      	ldr	r3, [r1, #0]
 80028fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8002902:	600b      	str	r3, [r1, #0]
		  fGZ_Cal /= iNumCM;
 8002904:	4904      	ldr	r1, [pc, #16]	; (8002918 <deriveGyro+0x2c>)
 8002906:	680b      	ldr	r3, [r1, #0]
 8002908:	fb93 f3f2 	sdiv	r3, r3, r2
 800290c:	600b      	str	r3, [r1, #0]
 800290e:	4770      	bx	lr
 8002910:	20000560 	.word	0x20000560
 8002914:	20000564 	.word	0x20000564
 8002918:	2000055c 	.word	0x2000055c

0800291c <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <MX_GPIO_Init+0x40>)
{
 800291e:	b084      	sub	sp, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	f042 0220 	orr.w	r2, r2, #32
 8002926:	619a      	str	r2, [r3, #24]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	f002 0220 	and.w	r2, r2, #32
 800292e:	9201      	str	r2, [sp, #4]
 8002930:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002932:	699a      	ldr	r2, [r3, #24]
 8002934:	f042 0204 	orr.w	r2, r2, #4
 8002938:	619a      	str	r2, [r3, #24]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	f002 0204 	and.w	r2, r2, #4
 8002940:	9202      	str	r2, [sp, #8]
 8002942:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	f042 0208 	orr.w	r2, r2, #8
 800294a:	619a      	str	r2, [r3, #24]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	9303      	str	r3, [sp, #12]
 8002954:	9b03      	ldr	r3, [sp, #12]

}
 8002956:	b004      	add	sp, #16
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000

08002960 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002960:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8002962:	480c      	ldr	r0, [pc, #48]	; (8002994 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <MX_I2C1_Init+0x38>)
 8002966:	f8df e034 	ldr.w	lr, [pc, #52]	; 800299c <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800296a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 800296e:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002972:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002974:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002976:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002978:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800297a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800297c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800297e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002980:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002982:	f7fe fbe1 	bl	8001148 <HAL_I2C_Init>
 8002986:	b118      	cbz	r0, 8002990 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8002988:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800298c:	f000 b94e 	b.w	8002c2c <Error_Handler>
 8002990:	bd08      	pop	{r3, pc}
 8002992:	bf00      	nop
 8002994:	200004a4 	.word	0x200004a4
 8002998:	40005400 	.word	0x40005400
 800299c:	00061a80 	.word	0x00061a80

080029a0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80029a0:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80029a2:	480c      	ldr	r0, [pc, #48]	; (80029d4 <MX_I2C2_Init+0x34>)
  hi2c2.Init.ClockSpeed = 100000;
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <MX_I2C2_Init+0x38>)
 80029a6:	f8df e034 	ldr.w	lr, [pc, #52]	; 80029dc <MX_I2C2_Init+0x3c>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 100000;
 80029ae:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029b2:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029b4:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029b6:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80029b8:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029ba:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80029bc:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029be:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029c0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80029c2:	f7fe fbc1 	bl	8001148 <HAL_I2C_Init>
 80029c6:	b118      	cbz	r0, 80029d0 <MX_I2C2_Init+0x30>
  {
    Error_Handler();
  }

}
 80029c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80029cc:	f000 b92e 	b.w	8002c2c <Error_Handler>
 80029d0:	bd08      	pop	{r3, pc}
 80029d2:	bf00      	nop
 80029d4:	200004f8 	.word	0x200004f8
 80029d8:	40005800 	.word	0x40005800
 80029dc:	000186a0 	.word	0x000186a0

080029e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	2210      	movs	r2, #16
{
 80029e2:	b510      	push	{r4, lr}
 80029e4:	4604      	mov	r4, r0
 80029e6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	eb0d 0002 	add.w	r0, sp, r2
 80029ec:	2100      	movs	r1, #0
 80029ee:	f000 fcdd 	bl	80033ac <memset>
  if(i2cHandle->Instance==I2C1)
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	4a21      	ldr	r2, [pc, #132]	; (8002a7c <HAL_I2C_MspInit+0x9c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d11e      	bne.n	8002a38 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	4c21      	ldr	r4, [pc, #132]	; (8002a80 <HAL_I2C_MspInit+0xa0>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fc:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a00:	4820      	ldr	r0, [pc, #128]	; (8002a84 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a02:	f043 0308 	orr.w	r3, r3, #8
 8002a06:	61a3      	str	r3, [r4, #24]
 8002a08:	69a3      	ldr	r3, [r4, #24]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a12:	23c0      	movs	r3, #192	; 0xc0
 8002a14:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a16:	2312      	movs	r3, #18
 8002a18:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1e:	f7fe f8e9 	bl	8000bf4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a22:	69e3      	ldr	r3, [r4, #28]
 8002a24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a28:	61e3      	str	r3, [r4, #28]
 8002a2a:	69e3      	ldr	r3, [r4, #28]
 8002a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002a34:	b008      	add	sp, #32
 8002a36:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 8002a38:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <HAL_I2C_MspInit+0xa8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d1fa      	bne.n	8002a34 <HAL_I2C_MspInit+0x54>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3e:	4c10      	ldr	r4, [pc, #64]	; (8002a80 <HAL_I2C_MspInit+0xa0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a40:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a44:	480f      	ldr	r0, [pc, #60]	; (8002a84 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a46:	f043 0308 	orr.w	r3, r3, #8
 8002a4a:	61a3      	str	r3, [r4, #24]
 8002a4c:	69a3      	ldr	r3, [r4, #24]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	9302      	str	r3, [sp, #8]
 8002a54:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a5a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a5c:	2312      	movs	r3, #18
 8002a5e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a64:	f7fe f8c6 	bl	8000bf4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a68:	69e3      	ldr	r3, [r4, #28]
 8002a6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a6e:	61e3      	str	r3, [r4, #28]
 8002a70:	69e3      	ldr	r3, [r4, #28]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	9303      	str	r3, [sp, #12]
 8002a78:	9b03      	ldr	r3, [sp, #12]
}
 8002a7a:	e7db      	b.n	8002a34 <HAL_I2C_MspInit+0x54>
 8002a7c:	40005400 	.word	0x40005400
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40010c00 	.word	0x40010c00
 8002a88:	40005800 	.word	0x40005800

08002a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a8c:	b510      	push	{r4, lr}
 8002a8e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a90:	2228      	movs	r2, #40	; 0x28
 8002a92:	2100      	movs	r1, #0
 8002a94:	a806      	add	r0, sp, #24
 8002a96:	f000 fc89 	bl	80033ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	2214      	movs	r2, #20
 8002a9e:	a801      	add	r0, sp, #4
 8002aa0:	f000 fc84 	bl	80033ac <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002aa8:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aaa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002aac:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002aae:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ab0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ab6:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ab8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002aba:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002abc:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002abe:	f7fe feff 	bl	80018c0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ac2:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ac8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aca:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002acc:	4621      	mov	r1, r4
 8002ace:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ad0:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ad2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ad4:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ad6:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ad8:	f7ff f8ba 	bl	8001c50 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002adc:	b010      	add	sp, #64	; 0x40
 8002ade:	bd10      	pop	{r4, pc}

08002ae0 <convertToChar>:
/* USER CODE BEGIN 4 */
void convertToChar(int16_t data)
{
	int16_t number = data;
	uint8_t neg = 0;
	if(number < 0)
 8002ae0:	2800      	cmp	r0, #0
	{
		number = -number;
		neg = 1;
 8002ae2:	bfb4      	ite	lt
 8002ae4:	2201      	movlt	r2, #1
	uint8_t neg = 0;
 8002ae6:	2200      	movge	r2, #0
	}
	for(uint8_t i = 6; i --> 0 ;)
 8002ae8:	f04f 0306 	mov.w	r3, #6
	{
		str[i] = (number % 10) + (unsigned char)'0';
 8002aec:	f04f 010a 	mov.w	r1, #10
{
 8002af0:	b530      	push	{r4, r5, lr}
		number = -number;
 8002af2:	bfb8      	it	lt
 8002af4:	4240      	neglt	r0, r0
		str[i] = (number % 10) + (unsigned char)'0';
 8002af6:	4d0b      	ldr	r5, [pc, #44]	; (8002b24 <convertToChar+0x44>)
		number = -number;
 8002af8:	bfb8      	it	lt
 8002afa:	b200      	sxthlt	r0, r0
	for(uint8_t i = 6; i --> 0 ;)
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2bff      	cmp	r3, #255	; 0xff
 8002b02:	d106      	bne.n	8002b12 <convertToChar+0x32>
		number /= 10;
	}
	if(neg)
 8002b04:	b122      	cbz	r2, 8002b10 <convertToChar+0x30>
	{
for(uint8_t j = 0; j < 6; j++)
{
	if(str[j + 1] != 0)
 8002b06:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <convertToChar+0x44>)
 8002b08:	785a      	ldrb	r2, [r3, #1]
 8002b0a:	b10a      	cbz	r2, 8002b10 <convertToChar+0x30>
	str[j] = '-';
 8002b0c:	222d      	movs	r2, #45	; 0x2d
 8002b0e:	701a      	strb	r2, [r3, #0]
 8002b10:	bd30      	pop	{r4, r5, pc}
		str[i] = (number % 10) + (unsigned char)'0';
 8002b12:	fb90 f4f1 	sdiv	r4, r0, r1
 8002b16:	fb01 0014 	mls	r0, r1, r4, r0
 8002b1a:	3030      	adds	r0, #48	; 0x30
 8002b1c:	54e8      	strb	r0, [r5, r3]
		number /= 10;
 8002b1e:	b220      	sxth	r0, r4
 8002b20:	e7ec      	b.n	8002afc <convertToChar+0x1c>
 8002b22:	bf00      	nop
 8002b24:	20000586 	.word	0x20000586

08002b28 <main>:
{
 8002b28:	b580      	push	{r7, lr}
  HAL_Init();
 8002b2a:	f7fd ffc5 	bl	8000ab8 <HAL_Init>
  SystemClock_Config();
 8002b2e:	f7ff ffad 	bl	8002a8c <SystemClock_Config>
  MX_GPIO_Init();
 8002b32:	f7ff fef3 	bl	800291c <MX_GPIO_Init>
  MX_TIM2_Init();
 8002b36:	f000 fb8d 	bl	8003254 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002b3a:	f000 fab7 	bl	80030ac <MX_TIM3_Init>
  MX_I2C1_Init();
 8002b3e:	f7ff ff0f 	bl	8002960 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002b42:	f000 fae9 	bl	8003118 <MX_TIM4_Init>
  MX_I2C2_Init();
 8002b46:	f7ff ff2b 	bl	80029a0 <MX_I2C2_Init>
  Accel_ini();
 8002b4a:	f7ff fc63 	bl	8002414 <Accel_ini>
  GyroCalibrate();
 8002b4e:	f7ff fea3 	bl	8002898 <GyroCalibrate>
   deriveGyro();
 8002b52:	f7ff fecb 	bl	80028ec <deriveGyro>
  Accel_ReadAcc();
 8002b56:	f7ff fd0f 	bl	8002578 <Accel_ReadAcc>
  SSD1306_Init();
 8002b5a:	f000 f911 	bl	8002d80 <SSD1306_Init>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_1);
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4827      	ldr	r0, [pc, #156]	; (8002c00 <main+0xd8>)
 8002b62:	f7ff fc1d 	bl	80023a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_2);
 8002b66:	2104      	movs	r1, #4
 8002b68:	4825      	ldr	r0, [pc, #148]	; (8002c00 <main+0xd8>)
 8002b6a:	f7ff fc19 	bl	80023a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_3);
 8002b6e:	2108      	movs	r1, #8
 8002b70:	4823      	ldr	r0, [pc, #140]	; (8002c00 <main+0xd8>)
 8002b72:	f7ff fc15 	bl	80023a0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8002b76:	4823      	ldr	r0, [pc, #140]	; (8002c04 <main+0xdc>)
 8002b78:	f7ff f9a0 	bl	8001ebc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8002b7c:	4822      	ldr	r0, [pc, #136]	; (8002c08 <main+0xe0>)
 8002b7e:	f7ff f99d 	bl	8001ebc <HAL_TIM_Base_Start_IT>
XGf = YGf = ZGf = 0;
 8002b82:	2200      	movs	r2, #0
 8002b84:	4921      	ldr	r1, [pc, #132]	; (8002c0c <main+0xe4>)
 8002b86:	4c22      	ldr	r4, [pc, #136]	; (8002c10 <main+0xe8>)
 8002b88:	800a      	strh	r2, [r1, #0]
 8002b8a:	4922      	ldr	r1, [pc, #136]	; (8002c14 <main+0xec>)
		 SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 8002b8c:	4e22      	ldr	r6, [pc, #136]	; (8002c18 <main+0xf0>)
 8002b8e:	4d23      	ldr	r5, [pc, #140]	; (8002c1c <main+0xf4>)
XGf = YGf = ZGf = 0;
 8002b90:	8022      	strh	r2, [r4, #0]
 8002b92:	800a      	strh	r2, [r1, #0]
	  if(flag)
 8002b94:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <main+0xf8>)
 8002b96:	781a      	ldrb	r2, [r3, #0]
 8002b98:	b902      	cbnz	r2, 8002b9c <main+0x74>
 8002b9a:	e7fe      	b.n	8002b9a <main+0x72>
	  flag = 0;
 8002b9c:	2700      	movs	r7, #0
 8002b9e:	701f      	strb	r7, [r3, #0]
		  ReadGyro();
 8002ba0:	f7ff fdd6 	bl	8002750 <ReadGyro>
		  Accel_ReadAcc();
 8002ba4:	f7ff fce8 	bl	8002578 <Accel_ReadAcc>
		  convertToChar(xval);
 8002ba8:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <main+0xfc>)
 8002baa:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002bae:	f7ff ff97 	bl	8002ae0 <convertToChar>
		 SSD1306_GotoXY(0, 20);
 8002bb2:	4638      	mov	r0, r7
 8002bb4:	2114      	movs	r1, #20
 8002bb6:	f000 f87f 	bl	8002cb8 <SSD1306_GotoXY>
		 SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4631      	mov	r1, r6
 8002bbe:	4628      	mov	r0, r5
 8002bc0:	f000 f8ba 	bl	8002d38 <SSD1306_Puts>
		 convertToChar(yval);
 8002bc4:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <main+0x100>)
 8002bc6:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002bca:	f7ff ff89 	bl	8002ae0 <convertToChar>
		 SSD1306_GotoXY(80, 20);
 8002bce:	2114      	movs	r1, #20
 8002bd0:	2050      	movs	r0, #80	; 0x50
 8002bd2:	f000 f871 	bl	8002cb8 <SSD1306_GotoXY>
		 SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4631      	mov	r1, r6
 8002bda:	4628      	mov	r0, r5
 8002bdc:	f000 f8ac 	bl	8002d38 <SSD1306_Puts>
		 convertToChar(ZGf);
 8002be0:	f9b4 0000 	ldrsh.w	r0, [r4]
 8002be4:	f7ff ff7c 	bl	8002ae0 <convertToChar>
		 SSD1306_GotoXY(45, 30);
 8002be8:	211e      	movs	r1, #30
 8002bea:	202d      	movs	r0, #45	; 0x2d
 8002bec:	f000 f864 	bl	8002cb8 <SSD1306_GotoXY>
		 SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4631      	mov	r1, r6
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	f000 f89f 	bl	8002d38 <SSD1306_Puts>
		 SSD1306_UpdateScreen();
 8002bfa:	f000 f819 	bl	8002c30 <SSD1306_UpdateScreen>
 8002bfe:	e7c9      	b.n	8002b94 <main+0x6c>
 8002c00:	20000614 	.word	0x20000614
 8002c04:	200005d4 	.word	0x200005d4
 8002c08:	20000594 	.word	0x20000594
 8002c0c:	20000558 	.word	0x20000558
 8002c10:	2000056e 	.word	0x2000056e
 8002c14:	20000580 	.word	0x20000580
 8002c18:	20000008 	.word	0x20000008
 8002c1c:	20000586 	.word	0x20000586
 8002c20:	20000550 	.word	0x20000550
 8002c24:	20000576 	.word	0x20000576
 8002c28:	20000554 	.word	0x20000554

08002c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c2c:	4770      	bx	lr
	...

08002c30 <SSD1306_UpdateScreen>:
	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {
	SSD1306_Buffer_all[0] = 0x40;
 8002c30:	2340      	movs	r3, #64	; 0x40
void SSD1306_UpdateScreen(void) {
 8002c32:	b507      	push	{r0, r1, r2, lr}
	SSD1306_Buffer_all[0] = 0x40;
 8002c34:	4a06      	ldr	r2, [pc, #24]	; (8002c50 <SSD1306_UpdateScreen+0x20>)
	HAL_I2C_Master_Transmit(&hi2c2, SSD1306_I2C_ADDR, SSD1306_Buffer_all, SSD1306_WIDTH * SSD1306_HEIGHT / 8 + 1, 1000);
 8002c36:	2178      	movs	r1, #120	; 0x78
	SSD1306_Buffer_all[0] = 0x40;
 8002c38:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2, SSD1306_I2C_ADDR, SSD1306_Buffer_all, SSD1306_WIDTH * SSD1306_HEIGHT / 8 + 1, 1000);
 8002c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c3e:	4805      	ldr	r0, [pc, #20]	; (8002c54 <SSD1306_UpdateScreen+0x24>)
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	f240 4301 	movw	r3, #1025	; 0x401
 8002c46:	f7fe faff 	bl	8001248 <HAL_I2C_Master_Transmit>
}
 8002c4a:	b003      	add	sp, #12
 8002c4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c50:	2000009e 	.word	0x2000009e
 8002c54:	200004f8 	.word	0x200004f8

08002c58 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(uint8_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, SSD1306_WIDTH * SSD1306_HEIGHT / 8);
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c5e:	bf14      	ite	ne
 8002c60:	21ff      	movne	r1, #255	; 0xff
 8002c62:	2100      	moveq	r1, #0
 8002c64:	4801      	ldr	r0, [pc, #4]	; (8002c6c <SSD1306_Fill+0x14>)
 8002c66:	f000 bba1 	b.w	80033ac <memset>
 8002c6a:	bf00      	nop
 8002c6c:	2000009f 	.word	0x2000009f

08002c70 <SSD1306_DrawPixel>:
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, uint8_t color) {
	if (
 8002c70:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawPixel(uint16_t x, uint16_t y, uint8_t color) {
 8002c72:	b510      	push	{r4, lr}
	if (
 8002c74:	d81a      	bhi.n	8002cac <SSD1306_DrawPixel+0x3c>
		x >= SSD1306_WIDTH ||
 8002c76:	293f      	cmp	r1, #63	; 0x3f
 8002c78:	d818      	bhi.n	8002cac <SSD1306_DrawPixel+0x3c>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <SSD1306_DrawPixel+0x40>)
 8002c7c:	791b      	ldrb	r3, [r3, #4]
 8002c7e:	b113      	cbz	r3, 8002c86 <SSD1306_DrawPixel+0x16>
		color = (uint8_t)!color;
 8002c80:	fab2 f282 	clz	r2, r2
 8002c84:	0952      	lsrs	r2, r2, #5
 8002c86:	08cc      	lsrs	r4, r1, #3
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002c88:	2a01      	cmp	r2, #1
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <SSD1306_DrawPixel+0x44>)
 8002c8c:	f001 0107 	and.w	r1, r1, #7
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002c90:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
	if (color == SSD1306_COLOR_WHITE) {
 8002c94:	d104      	bne.n	8002ca0 <SSD1306_DrawPixel+0x30>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002c96:	408a      	lsls	r2, r1
 8002c98:	5c19      	ldrb	r1, [r3, r0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	541a      	strb	r2, [r3, r0]
 8002c9e:	bd10      	pop	{r4, pc}
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	408a      	lsls	r2, r1
 8002ca4:	5c19      	ldrb	r1, [r3, r0]
 8002ca6:	ea21 0102 	bic.w	r1, r1, r2
 8002caa:	5419      	strb	r1, [r3, r0]
 8002cac:	bd10      	pop	{r4, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000098 	.word	0x20000098
 8002cb4:	2000009f 	.word	0x2000009f

08002cb8 <SSD1306_GotoXY>:
	}
}

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002cb8:	4b01      	ldr	r3, [pc, #4]	; (8002cc0 <SSD1306_GotoXY+0x8>)
 8002cba:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8002cbc:	8059      	strh	r1, [r3, #2]
 8002cbe:	4770      	bx	lr
 8002cc0:	20000098 	.word	0x20000098

08002cc4 <SSD1306_Putc>:
}

char SSD1306_Putc(char ch, FontDef_t* Font, uint8_t color) {
 8002cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t i, b, j;

	b = 0;
 8002cc8:	f04f 0a00 	mov.w	sl, #0
char SSD1306_Putc(char ch, FontDef_t* Font, uint8_t color) {
 8002ccc:	4680      	mov	r8, r0
 8002cce:	460d      	mov	r5, r1
 8002cd0:	4691      	mov	r9, r2
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002cd2:	4656      	mov	r6, sl
 8002cd4:	4f17      	ldr	r7, [pc, #92]	; (8002d34 <SSD1306_Putc+0x70>)
 8002cd6:	786b      	ldrb	r3, [r5, #1]
 8002cd8:	429e      	cmp	r6, r3
 8002cda:	d223      	bcs.n	8002d24 <SSD1306_Putc+0x60>
 8002cdc:	2400      	movs	r4, #0
 8002cde:	e019      	b.n	8002d14 <SSD1306_Putc+0x50>
		for (j = 0; j < Font->FontWidth; j++) {
			if ((Font->data[ch*Font->CharBytes + b/8] >> b%8) & 1) {
 8002ce0:	6869      	ldr	r1, [r5, #4]
 8002ce2:	78aa      	ldrb	r2, [r5, #2]
 8002ce4:	08d8      	lsrs	r0, r3, #3
 8002ce6:	fb08 1202 	mla	r2, r8, r2, r1
 8002cea:	5c12      	ldrb	r2, [r2, r0]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	fa42 f303 	asr.w	r3, r2, r3
 8002cf4:	07db      	lsls	r3, r3, #31
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (uint8_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (uint8_t)!color);
 8002cf6:	bf58      	it	pl
 8002cf8:	fab9 f289 	clzpl	r2, r9
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (uint8_t) color);
 8002cfc:	8879      	ldrh	r1, [r7, #2]
 8002cfe:	8838      	ldrh	r0, [r7, #0]
 8002d00:	4431      	add	r1, r6
 8002d02:	4420      	add	r0, r4
 8002d04:	bf4c      	ite	mi
 8002d06:	464a      	movmi	r2, r9
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (uint8_t)!color);
 8002d08:	0952      	lsrpl	r2, r2, #5
 8002d0a:	b289      	uxth	r1, r1
 8002d0c:	b280      	uxth	r0, r0
 8002d0e:	f7ff ffaf 	bl	8002c70 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002d12:	3401      	adds	r4, #1
 8002d14:	782a      	ldrb	r2, [r5, #0]
 8002d16:	eb0a 0304 	add.w	r3, sl, r4
 8002d1a:	4294      	cmp	r4, r2
 8002d1c:	d3e0      	bcc.n	8002ce0 <SSD1306_Putc+0x1c>
	for (i = 0; i < Font->FontHeight; i++) {
 8002d1e:	3601      	adds	r6, #1
 8002d20:	469a      	mov	sl, r3
 8002d22:	e7d8      	b.n	8002cd6 <SSD1306_Putc+0x12>
			b++;
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002d24:	4a03      	ldr	r2, [pc, #12]	; (8002d34 <SSD1306_Putc+0x70>)
 8002d26:	782b      	ldrb	r3, [r5, #0]
 8002d28:	8811      	ldrh	r1, [r2, #0]

	/* Return character written */
	return ch;
}
 8002d2a:	4640      	mov	r0, r8
	SSD1306.CurrentX += Font->FontWidth;
 8002d2c:	440b      	add	r3, r1
 8002d2e:	8013      	strh	r3, [r2, #0]
}
 8002d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d34:	20000098 	.word	0x20000098

08002d38 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, uint8_t color) {
 8002d38:	b570      	push	{r4, r5, r6, lr}
 8002d3a:	460d      	mov	r5, r1
 8002d3c:	4616      	mov	r6, r2
 8002d3e:	1e44      	subs	r4, r0, #1
	/* Write characters */
	while (*str) {
 8002d40:	7863      	ldrb	r3, [r4, #1]
 8002d42:	b143      	cbz	r3, 8002d56 <SSD1306_Puts+0x1e>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002d44:	4618      	mov	r0, r3
 8002d46:	4632      	mov	r2, r6
 8002d48:	4629      	mov	r1, r5
 8002d4a:	f7ff ffbb 	bl	8002cc4 <SSD1306_Putc>
 8002d4e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002d52:	4298      	cmp	r0, r3
 8002d54:	d0f4      	beq.n	8002d40 <SSD1306_Puts+0x8>
		str++;
	}

	/* Everything OK, zero should be returned */
	return *str;
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d5c <ssd1306_I2C_Write>:
	HAL_I2C_Master_Transmit(&hi2c2, address, &reg, 1, 100);
	HAL_I2C_Master_Transmit_DMA(&hi2c2, address, data, count);
}


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
	dt[1] = data;
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8002d5e:	230a      	movs	r3, #10
	dt[0] = reg;
 8002d60:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8002d64:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	4601      	mov	r1, r0
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	aa03      	add	r2, sp, #12
 8002d70:	4802      	ldr	r0, [pc, #8]	; (8002d7c <ssd1306_I2C_Write+0x20>)
 8002d72:	f7fe fa69 	bl	8001248 <HAL_I2C_Master_Transmit>
}
 8002d76:	b005      	add	sp, #20
 8002d78:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d7c:	200004f8 	.word	0x200004f8

08002d80 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8002d80:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002d82:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002d86:	2201      	movs	r2, #1
 8002d88:	2178      	movs	r1, #120	; 0x78
 8002d8a:	4850      	ldr	r0, [pc, #320]	; (8002ecc <SSD1306_Init+0x14c>)
 8002d8c:	f7fe fce8 	bl	8001760 <HAL_I2C_IsDeviceReady>
 8002d90:	4604      	mov	r4, r0
 8002d92:	2800      	cmp	r0, #0
 8002d94:	f040 8097 	bne.w	8002ec6 <SSD1306_Init+0x146>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002d98:	4601      	mov	r1, r0
 8002d9a:	22ae      	movs	r2, #174	; 0xae
 8002d9c:	2078      	movs	r0, #120	; 0x78
 8002d9e:	f7ff ffdd 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002da2:	4621      	mov	r1, r4
 8002da4:	2220      	movs	r2, #32
 8002da6:	2078      	movs	r0, #120	; 0x78
 8002da8:	f7ff ffd8 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002dac:	4621      	mov	r1, r4
 8002dae:	2210      	movs	r2, #16
 8002db0:	2078      	movs	r0, #120	; 0x78
 8002db2:	f7ff ffd3 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002db6:	4621      	mov	r1, r4
 8002db8:	22b0      	movs	r2, #176	; 0xb0
 8002dba:	2078      	movs	r0, #120	; 0x78
 8002dbc:	f7ff ffce 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	22c8      	movs	r2, #200	; 0xc8
 8002dc4:	2078      	movs	r0, #120	; 0x78
 8002dc6:	f7ff ffc9 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002dca:	4622      	mov	r2, r4
 8002dcc:	4621      	mov	r1, r4
 8002dce:	2078      	movs	r0, #120	; 0x78
 8002dd0:	f7ff ffc4 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	2210      	movs	r2, #16
 8002dd8:	2078      	movs	r0, #120	; 0x78
 8002dda:	f7ff ffbf 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002dde:	4621      	mov	r1, r4
 8002de0:	2240      	movs	r2, #64	; 0x40
 8002de2:	2078      	movs	r0, #120	; 0x78
 8002de4:	f7ff ffba 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002de8:	4621      	mov	r1, r4
 8002dea:	2281      	movs	r2, #129	; 0x81
 8002dec:	2078      	movs	r0, #120	; 0x78
 8002dee:	f7ff ffb5 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002df2:	4621      	mov	r1, r4
 8002df4:	22ff      	movs	r2, #255	; 0xff
 8002df6:	2078      	movs	r0, #120	; 0x78
 8002df8:	f7ff ffb0 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	22a1      	movs	r2, #161	; 0xa1
 8002e00:	2078      	movs	r0, #120	; 0x78
 8002e02:	f7ff ffab 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002e06:	4621      	mov	r1, r4
 8002e08:	22a6      	movs	r2, #166	; 0xa6
 8002e0a:	2078      	movs	r0, #120	; 0x78
 8002e0c:	f7ff ffa6 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002e10:	4621      	mov	r1, r4
 8002e12:	22a8      	movs	r2, #168	; 0xa8
 8002e14:	2078      	movs	r0, #120	; 0x78
 8002e16:	f7ff ffa1 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	223f      	movs	r2, #63	; 0x3f
 8002e1e:	2078      	movs	r0, #120	; 0x78
 8002e20:	f7ff ff9c 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002e24:	4621      	mov	r1, r4
 8002e26:	22a4      	movs	r2, #164	; 0xa4
 8002e28:	2078      	movs	r0, #120	; 0x78
 8002e2a:	f7ff ff97 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002e2e:	4621      	mov	r1, r4
 8002e30:	22d3      	movs	r2, #211	; 0xd3
 8002e32:	2078      	movs	r0, #120	; 0x78
 8002e34:	f7ff ff92 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002e38:	4622      	mov	r2, r4
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	2078      	movs	r0, #120	; 0x78
 8002e3e:	f7ff ff8d 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002e42:	4621      	mov	r1, r4
 8002e44:	22d5      	movs	r2, #213	; 0xd5
 8002e46:	2078      	movs	r0, #120	; 0x78
 8002e48:	f7ff ff88 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	22f0      	movs	r2, #240	; 0xf0
 8002e50:	2078      	movs	r0, #120	; 0x78
 8002e52:	f7ff ff83 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002e56:	4621      	mov	r1, r4
 8002e58:	22d9      	movs	r2, #217	; 0xd9
 8002e5a:	2078      	movs	r0, #120	; 0x78
 8002e5c:	f7ff ff7e 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002e60:	4621      	mov	r1, r4
 8002e62:	2222      	movs	r2, #34	; 0x22
 8002e64:	2078      	movs	r0, #120	; 0x78
 8002e66:	f7ff ff79 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	22da      	movs	r2, #218	; 0xda
 8002e6e:	2078      	movs	r0, #120	; 0x78
 8002e70:	f7ff ff74 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002e74:	4621      	mov	r1, r4
 8002e76:	2212      	movs	r2, #18
 8002e78:	2078      	movs	r0, #120	; 0x78
 8002e7a:	f7ff ff6f 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002e7e:	4621      	mov	r1, r4
 8002e80:	22db      	movs	r2, #219	; 0xdb
 8002e82:	2078      	movs	r0, #120	; 0x78
 8002e84:	f7ff ff6a 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002e88:	4621      	mov	r1, r4
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	2078      	movs	r0, #120	; 0x78
 8002e8e:	f7ff ff65 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002e92:	4621      	mov	r1, r4
 8002e94:	228d      	movs	r2, #141	; 0x8d
 8002e96:	2078      	movs	r0, #120	; 0x78
 8002e98:	f7ff ff60 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	2214      	movs	r2, #20
 8002ea0:	2078      	movs	r0, #120	; 0x78
 8002ea2:	f7ff ff5b 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002ea6:	22af      	movs	r2, #175	; 0xaf
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	2078      	movs	r0, #120	; 0x78
 8002eac:	f7ff ff56 	bl	8002d5c <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f7ff fed1 	bl	8002c58 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002eb6:	f7ff febb 	bl	8002c30 <SSD1306_UpdateScreen>
	SSD1306.Initialized = 1;
 8002eba:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <SSD1306_Init+0x150>)
	SSD1306.Initialized = 1;
 8002ebe:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 8002ec0:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 8002ec2:	805c      	strh	r4, [r3, #2]
	return 1;
 8002ec4:	bd10      	pop	{r4, pc}
		return 0;
 8002ec6:	2000      	movs	r0, #0
}
 8002ec8:	bd10      	pop	{r4, pc}
 8002eca:	bf00      	nop
 8002ecc:	200004f8 	.word	0x200004f8
 8002ed0:	20000098 	.word	0x20000098

08002ed4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <HAL_MspInit+0x3c>)
{
 8002ed6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	f042 0201 	orr.w	r2, r2, #1
 8002ede:	619a      	str	r2, [r3, #24]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	f002 0201 	and.w	r2, r2, #1
 8002ee6:	9200      	str	r2, [sp, #0]
 8002ee8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ef0:	61da      	str	r2, [r3, #28]
 8002ef2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ef4:	4a07      	ldr	r2, [pc, #28]	; (8002f14 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002efe:	6853      	ldr	r3, [r2, #4]
 8002f00:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f0a:	b002      	add	sp, #8
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40010000 	.word	0x40010000

08002f18 <NMI_Handler>:
 8002f18:	4770      	bx	lr

08002f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f1a:	e7fe      	b.n	8002f1a <HardFault_Handler>

08002f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f1c:	e7fe      	b.n	8002f1c <MemManage_Handler>

08002f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f1e:	e7fe      	b.n	8002f1e <BusFault_Handler>

08002f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f20:	e7fe      	b.n	8002f20 <UsageFault_Handler>

08002f22 <SVC_Handler>:
 8002f22:	4770      	bx	lr

08002f24 <DebugMon_Handler>:
 8002f24:	4770      	bx	lr

08002f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f26:	4770      	bx	lr

08002f28 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f28:	f7fd bdd8 	b.w	8000adc <HAL_IncTick>

08002f2c <TIM3_IRQHandler>:
	/*counter++;
	val1 = yval/40 + 1500;
	val2 = xval/40 + 1500;
	val3 = zval/40 + 1500;*/
val = 0;
	if(ZGf != 0)
 8002f2c:	4b3f      	ldr	r3, [pc, #252]	; (800302c <TIM3_IRQHandler+0x100>)
{
 8002f2e:	b470      	push	{r4, r5, r6}
	if(ZGf != 0)
 8002f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f34:	4a3e      	ldr	r2, [pc, #248]	; (8003030 <TIM3_IRQHandler+0x104>)
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d049      	beq.n	8002fce <TIM3_IRQHandler+0xa2>
			val = ZGf*5 + 1500;
 8002f3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f3e:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
	else
		val = 1500;
 8002f42:	8013      	strh	r3, [r2, #0]

	val1 = val2 = val3 = val;;

	if(XGf != 0)
 8002f44:	4b3b      	ldr	r3, [pc, #236]	; (8003034 <TIM3_IRQHandler+0x108>)
	val1 = val2 = val3 = val;;
 8002f46:	8811      	ldrh	r1, [r2, #0]
 8002f48:	483b      	ldr	r0, [pc, #236]	; (8003038 <TIM3_IRQHandler+0x10c>)
 8002f4a:	4a3c      	ldr	r2, [pc, #240]	; (800303c <TIM3_IRQHandler+0x110>)
 8002f4c:	4c3c      	ldr	r4, [pc, #240]	; (8003040 <TIM3_IRQHandler+0x114>)
	if(XGf != 0)
 8002f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
	val1 = val2 = val3 = val;;
 8002f52:	8001      	strh	r1, [r0, #0]
 8002f54:	8011      	strh	r1, [r2, #0]
 8002f56:	8021      	strh	r1, [r4, #0]
	if(XGf != 0)
 8002f58:	b153      	cbz	r3, 8002f70 <TIM3_IRQHandler+0x44>
	{
		val1 += XGf * 5;
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8002f60:	440d      	add	r5, r1
 8002f62:	8025      	strh	r5, [r4, #0]
		val2 += (-1 * XGf) * 5;
 8002f64:	ebc3 3583 	rsb	r5, r3, r3, lsl #14
 8002f68:	ebc3 0385 	rsb	r3, r3, r5, lsl #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	8013      	strh	r3, [r2, #0]
	}
	if(YGf != 0)
 8002f70:	4b34      	ldr	r3, [pc, #208]	; (8003044 <TIM3_IRQHandler+0x118>)
 8002f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f76:	b15b      	cbz	r3, 8002f90 <TIM3_IRQHandler+0x64>
	{
		val2 += YGf * 5;
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	8816      	ldrh	r6, [r2, #0]
 8002f7c:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8002f80:	4435      	add	r5, r6
 8002f82:	8015      	strh	r5, [r2, #0]
		val3 += (-1 * YGf) * 5;
 8002f84:	ebc3 3583 	rsb	r5, r3, r3, lsl #14
 8002f88:	ebc3 0385 	rsb	r3, r3, r5, lsl #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	8003      	strh	r3, [r0, #0]
	}
	if(val1 > 2000)
 8002f90:	8823      	ldrh	r3, [r4, #0]
 8002f92:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		val1 = 2000;
 8002f96:	bf84      	itt	hi
 8002f98:	f44f 63fa 	movhi.w	r3, #2000	; 0x7d0
 8002f9c:	8023      	strhhi	r3, [r4, #0]
	if(val2 > 2000)
 8002f9e:	8813      	ldrh	r3, [r2, #0]
		val2 = 2000;
	if(val3 > 2000)
		val3 = 2000;

	if(val1 < TIM2->CCR1)
 8002fa0:	8821      	ldrh	r1, [r4, #0]
	if(val2 > 2000)
 8002fa2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		val2 = 2000;
 8002fa6:	bf84      	itt	hi
 8002fa8:	f44f 63fa 	movhi.w	r3, #2000	; 0x7d0
 8002fac:	8013      	strhhi	r3, [r2, #0]
	if(val3 > 2000)
 8002fae:	8803      	ldrh	r3, [r0, #0]
 8002fb0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		val3 = 2000;
 8002fb4:	bf84      	itt	hi
 8002fb6:	f44f 63fa 	movhi.w	r3, #2000	; 0x7d0
 8002fba:	8003      	strhhi	r3, [r0, #0]
	if(val1 < TIM2->CCR1)
 8002fbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fc0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002fc2:	42a1      	cmp	r1, r4
 8002fc4:	d206      	bcs.n	8002fd4 <TIM3_IRQHandler+0xa8>
		TIM2->CCR1 = TIM2->CCR1 - 5;
 8002fc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fc8:	3905      	subs	r1, #5
	else if(val1 > TIM2->CCR1)
		TIM2->CCR1 = TIM2->CCR1 + 5;
	else if(val1 == TIM2->CCR1)
	TIM2->CCR1 = val1;
 8002fca:	6359      	str	r1, [r3, #52]	; 0x34
 8002fcc:	e00b      	b.n	8002fe6 <TIM3_IRQHandler+0xba>
		val = 1500;
 8002fce:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002fd2:	e7b6      	b.n	8002f42 <TIM3_IRQHandler+0x16>
	else if(val1 > TIM2->CCR1)
 8002fd4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002fd6:	42a1      	cmp	r1, r4
 8002fd8:	d902      	bls.n	8002fe0 <TIM3_IRQHandler+0xb4>
		TIM2->CCR1 = TIM2->CCR1 + 5;
 8002fda:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fdc:	3105      	adds	r1, #5
 8002fde:	e7f4      	b.n	8002fca <TIM3_IRQHandler+0x9e>
	else if(val1 == TIM2->CCR1)
 8002fe0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002fe2:	42a1      	cmp	r1, r4
 8002fe4:	d0f1      	beq.n	8002fca <TIM3_IRQHandler+0x9e>

	if(val2 < TIM2->CCR2)
 8002fe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fea:	8812      	ldrh	r2, [r2, #0]
 8002fec:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002fee:	428a      	cmp	r2, r1
 8002ff0:	d20f      	bcs.n	8003012 <TIM3_IRQHandler+0xe6>
			TIM2->CCR2 = TIM2->CCR2 - 5;
 8002ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ff4:	3a05      	subs	r2, #5
		else if(val2 > TIM2->CCR2)
			TIM2->CCR2 = TIM2->CCR2 + 5;
		else
		TIM2->CCR2 = val2;
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38

	if(val3 < TIM2->CCR3)
 8002ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ffc:	8802      	ldrh	r2, [r0, #0]
 8002ffe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003000:	428a      	cmp	r2, r1
 8003002:	d20c      	bcs.n	800301e <TIM3_IRQHandler+0xf2>
				TIM2->CCR3 = TIM2->CCR3 - 5;
 8003004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003006:	3a05      	subs	r2, #5
			else if(val3 > TIM2->CCR3)
				TIM2->CCR3 = TIM2->CCR3 + 5;
			else
			TIM2->CCR3 = val3;
 8003008:	63da      	str	r2, [r3, #60]	; 0x3c
		stop = 1;
	}*/
	//TIM2->CCR1 ^= (1 << 2);
	//TIM2->CCR1 ^= (1 << 4);
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800300a:	480f      	ldr	r0, [pc, #60]	; (8003048 <TIM3_IRQHandler+0x11c>)
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800300c:	bc70      	pop	{r4, r5, r6}
  HAL_TIM_IRQHandler(&htim3);
 800300e:	f7ff b81f 	b.w	8002050 <HAL_TIM_IRQHandler>
		else if(val2 > TIM2->CCR2)
 8003012:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003014:	428a      	cmp	r2, r1
			TIM2->CCR2 = TIM2->CCR2 + 5;
 8003016:	bf84      	itt	hi
 8003018:	6b9a      	ldrhi	r2, [r3, #56]	; 0x38
 800301a:	3205      	addhi	r2, #5
 800301c:	e7eb      	b.n	8002ff6 <TIM3_IRQHandler+0xca>
			else if(val3 > TIM2->CCR3)
 800301e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003020:	428a      	cmp	r2, r1
				TIM2->CCR3 = TIM2->CCR3 + 5;
 8003022:	bf84      	itt	hi
 8003024:	6bda      	ldrhi	r2, [r3, #60]	; 0x3c
 8003026:	3205      	addhi	r2, #5
 8003028:	e7ee      	b.n	8003008 <TIM3_IRQHandler+0xdc>
 800302a:	bf00      	nop
 800302c:	2000056e 	.word	0x2000056e
 8003030:	20000568 	.word	0x20000568
 8003034:	20000580 	.word	0x20000580
 8003038:	20000572 	.word	0x20000572
 800303c:	2000056c 	.word	0x2000056c
 8003040:	2000058e 	.word	0x2000058e
 8003044:	20000558 	.word	0x20000558
 8003048:	200005d4 	.word	0x200005d4

0800304c <TIM4_IRQHandler>:
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */
	flag = 1;
 800304c:	2201      	movs	r2, #1
 800304e:	4b02      	ldr	r3, [pc, #8]	; (8003058 <TIM4_IRQHandler+0xc>)
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003050:	4802      	ldr	r0, [pc, #8]	; (800305c <TIM4_IRQHandler+0x10>)
	flag = 1;
 8003052:	701a      	strb	r2, [r3, #0]
  HAL_TIM_IRQHandler(&htim4);
 8003054:	f7fe bffc 	b.w	8002050 <HAL_TIM_IRQHandler>
 8003058:	20000550 	.word	0x20000550
 800305c:	20000594 	.word	0x20000594

08003060 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <SystemInit+0x40>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	f042 0201 	orr.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	4a0d      	ldr	r2, [pc, #52]	; (80030a4 <SystemInit+0x44>)
 800306e:	400a      	ands	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003078:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800307c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003084:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800308c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800308e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003092:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003094:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <SystemInit+0x48>)
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000
 80030a4:	f8ff0000 	.word	0xf8ff0000
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80030ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ae:	2210      	movs	r2, #16
 80030b0:	2100      	movs	r1, #0
 80030b2:	a802      	add	r0, sp, #8
 80030b4:	f000 f97a 	bl	80033ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 720-1;
 80030b8:	f240 22cf 	movw	r2, #719	; 0x2cf
  htim3.Instance = TIM3;
 80030bc:	4814      	ldr	r0, [pc, #80]	; (8003110 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 720-1;
 80030be:	4915      	ldr	r1, [pc, #84]	; (8003114 <MX_TIM3_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030c0:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 720-1;
 80030c2:	e880 0006 	stmia.w	r0, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000-1;
 80030c6:	f240 32e7 	movw	r2, #999	; 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ce:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000-1;
 80030d0:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030d2:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030d4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030d6:	f7ff f895 	bl	8002204 <HAL_TIM_Base_Init>
 80030da:	b108      	cbz	r0, 80030e0 <MX_TIM3_Init+0x34>
  {
    Error_Handler();
 80030dc:	f7ff fda6 	bl	8002c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030e4:	a902      	add	r1, sp, #8
 80030e6:	480a      	ldr	r0, [pc, #40]	; (8003110 <MX_TIM3_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030e8:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030ea:	f7fe fef3 	bl	8001ed4 <HAL_TIM_ConfigClockSource>
 80030ee:	b108      	cbz	r0, 80030f4 <MX_TIM3_Init+0x48>
  {
    Error_Handler();
 80030f0:	f7ff fd9c 	bl	8002c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030f4:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030f6:	4669      	mov	r1, sp
 80030f8:	4805      	ldr	r0, [pc, #20]	; (8003110 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030fa:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030fc:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030fe:	f7ff f965 	bl	80023cc <HAL_TIMEx_MasterConfigSynchronization>
 8003102:	b108      	cbz	r0, 8003108 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8003104:	f7ff fd92 	bl	8002c2c <Error_Handler>
  }

}
 8003108:	b007      	add	sp, #28
 800310a:	f85d fb04 	ldr.w	pc, [sp], #4
 800310e:	bf00      	nop
 8003110:	200005d4 	.word	0x200005d4
 8003114:	40000400 	.word	0x40000400

08003118 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003118:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800311a:	2210      	movs	r2, #16
 800311c:	2100      	movs	r1, #0
 800311e:	a802      	add	r0, sp, #8
 8003120:	f000 f944 	bl	80033ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 720-1;
 8003124:	f240 22cf 	movw	r2, #719	; 0x2cf
  htim4.Instance = TIM4;
 8003128:	4814      	ldr	r0, [pc, #80]	; (800317c <MX_TIM4_Init+0x64>)
  htim4.Init.Prescaler = 720-1;
 800312a:	4915      	ldr	r1, [pc, #84]	; (8003180 <MX_TIM4_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800312c:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 720-1;
 800312e:	e880 0006 	stmia.w	r0, {r1, r2}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 1000-1;
 8003132:	f240 32e7 	movw	r2, #999	; 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	9301      	str	r3, [sp, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800313a:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 1000-1;
 800313c:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800313e:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003140:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003142:	f7ff f85f 	bl	8002204 <HAL_TIM_Base_Init>
 8003146:	b108      	cbz	r0, 800314c <MX_TIM4_Init+0x34>
  {
    Error_Handler();
 8003148:	f7ff fd70 	bl	8002c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800314c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003150:	a902      	add	r1, sp, #8
 8003152:	480a      	ldr	r0, [pc, #40]	; (800317c <MX_TIM4_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003154:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003156:	f7fe febd 	bl	8001ed4 <HAL_TIM_ConfigClockSource>
 800315a:	b108      	cbz	r0, 8003160 <MX_TIM4_Init+0x48>
  {
    Error_Handler();
 800315c:	f7ff fd66 	bl	8002c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003160:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003162:	4669      	mov	r1, sp
 8003164:	4805      	ldr	r0, [pc, #20]	; (800317c <MX_TIM4_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003166:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003168:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800316a:	f7ff f92f 	bl	80023cc <HAL_TIMEx_MasterConfigSynchronization>
 800316e:	b108      	cbz	r0, 8003174 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8003170:	f7ff fd5c 	bl	8002c2c <Error_Handler>
  }

}
 8003174:	b007      	add	sp, #28
 8003176:	f85d fb04 	ldr.w	pc, [sp], #4
 800317a:	bf00      	nop
 800317c:	20000594 	.word	0x20000594
 8003180:	40000800 	.word	0x40000800

08003184 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003184:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM2)
 8003186:	6803      	ldr	r3, [r0, #0]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318c:	d10d      	bne.n	80031aa <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800318e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003192:	69da      	ldr	r2, [r3, #28]
 8003194:	f042 0201 	orr.w	r2, r2, #1
 8003198:	61da      	str	r2, [r3, #28]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80031a4:	b005      	add	sp, #20
 80031a6:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM3)
 80031aa:	4a15      	ldr	r2, [pc, #84]	; (8003200 <HAL_TIM_Base_MspInit+0x7c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d112      	bne.n	80031d6 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <HAL_TIM_Base_MspInit+0x80>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031b2:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	f042 0202 	orr.w	r2, r2, #2
 80031ba:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031bc:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031be:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031c0:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	9302      	str	r3, [sp, #8]
 80031c8:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031ca:	f7fd fcbd 	bl	8000b48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031ce:	201d      	movs	r0, #29
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031d0:	f7fd fcee 	bl	8000bb0 <HAL_NVIC_EnableIRQ>
}
 80031d4:	e7e6      	b.n	80031a4 <HAL_TIM_Base_MspInit+0x20>
  else if(tim_baseHandle->Instance==TIM4)
 80031d6:	4a0c      	ldr	r2, [pc, #48]	; (8003208 <HAL_TIM_Base_MspInit+0x84>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d1e3      	bne.n	80031a4 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_TIM_Base_MspInit+0x80>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031de:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031e0:	69da      	ldr	r2, [r3, #28]
 80031e2:	f042 0204 	orr.w	r2, r2, #4
 80031e6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031e8:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031ea:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031ec:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	9303      	str	r3, [sp, #12]
 80031f4:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031f6:	f7fd fca7 	bl	8000b48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031fa:	201e      	movs	r0, #30
 80031fc:	e7e8      	b.n	80031d0 <HAL_TIM_Base_MspInit+0x4c>
 80031fe:	bf00      	nop
 8003200:	40000400 	.word	0x40000400
 8003204:	40021000 	.word	0x40021000
 8003208:	40000800 	.word	0x40000800

0800320c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800320c:	b510      	push	{r4, lr}
 800320e:	4604      	mov	r4, r0
 8003210:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003212:	2210      	movs	r2, #16
 8003214:	2100      	movs	r1, #0
 8003216:	a802      	add	r0, sp, #8
 8003218:	f000 f8c8 	bl	80033ac <memset>
  if(timHandle->Instance==TIM2)
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003222:	d113      	bne.n	800324c <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003224:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003228:	699a      	ldr	r2, [r3, #24]
    PA2     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322c:	f042 0204 	orr.w	r2, r2, #4
 8003230:	619a      	str	r2, [r3, #24]
 8003232:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003234:	4806      	ldr	r0, [pc, #24]	; (8003250 <HAL_TIM_MspPostInit+0x44>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800323e:	2307      	movs	r3, #7
 8003240:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003246:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003248:	f7fd fcd4 	bl	8000bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800324c:	b006      	add	sp, #24
 800324e:	bd10      	pop	{r4, pc}
 8003250:	40010800 	.word	0x40010800

08003254 <MX_TIM2_Init>:
{
 8003254:	b510      	push	{r4, lr}
 8003256:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003258:	2210      	movs	r2, #16
 800325a:	2100      	movs	r1, #0
 800325c:	a803      	add	r0, sp, #12
 800325e:	f000 f8a5 	bl	80033ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003262:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003264:	221c      	movs	r2, #28
 8003266:	4621      	mov	r1, r4
 8003268:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800326c:	9401      	str	r4, [sp, #4]
 800326e:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003270:	f000 f89c 	bl	80033ac <memset>
  htim2.Init.Prescaler = 72-1;
 8003274:	2347      	movs	r3, #71	; 0x47
 8003276:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 800327a:	4826      	ldr	r0, [pc, #152]	; (8003314 <MX_TIM2_Init+0xc0>)
  htim2.Init.Prescaler = 72-1;
 800327c:	e880 000c 	stmia.w	r0, {r2, r3}
  htim2.Init.Period = 20000-1;
 8003280:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8003284:	60c3      	str	r3, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003286:	2380      	movs	r3, #128	; 0x80
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003288:	6084      	str	r4, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800328a:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800328c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800328e:	f7fe ffb9 	bl	8002204 <HAL_TIM_Base_Init>
 8003292:	b108      	cbz	r0, 8003298 <MX_TIM2_Init+0x44>
    Error_Handler();
 8003294:	f7ff fcca 	bl	8002c2c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800329c:	a903      	add	r1, sp, #12
 800329e:	481d      	ldr	r0, [pc, #116]	; (8003314 <MX_TIM2_Init+0xc0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032a0:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032a2:	f7fe fe17 	bl	8001ed4 <HAL_TIM_ConfigClockSource>
 80032a6:	b108      	cbz	r0, 80032ac <MX_TIM2_Init+0x58>
    Error_Handler();
 80032a8:	f7ff fcc0 	bl	8002c2c <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032ac:	4819      	ldr	r0, [pc, #100]	; (8003314 <MX_TIM2_Init+0xc0>)
 80032ae:	f7fe ffc3 	bl	8002238 <HAL_TIM_PWM_Init>
 80032b2:	b108      	cbz	r0, 80032b8 <MX_TIM2_Init+0x64>
    Error_Handler();
 80032b4:	f7ff fcba 	bl	8002c2c <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032b8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032ba:	a901      	add	r1, sp, #4
 80032bc:	4815      	ldr	r0, [pc, #84]	; (8003314 <MX_TIM2_Init+0xc0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032be:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c0:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032c2:	f7ff f883 	bl	80023cc <HAL_TIMEx_MasterConfigSynchronization>
 80032c6:	b108      	cbz	r0, 80032cc <MX_TIM2_Init+0x78>
    Error_Handler();
 80032c8:	f7ff fcb0 	bl	8002c2c <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032cc:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032ce:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032d0:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 1500;
 80032d2:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032d6:	a907      	add	r1, sp, #28
 80032d8:	480e      	ldr	r0, [pc, #56]	; (8003314 <MX_TIM2_Init+0xc0>)
  sConfigOC.Pulse = 1500;
 80032da:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032dc:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032de:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032e0:	f7fe fff0 	bl	80022c4 <HAL_TIM_PWM_ConfigChannel>
 80032e4:	b108      	cbz	r0, 80032ea <MX_TIM2_Init+0x96>
    Error_Handler();
 80032e6:	f7ff fca1 	bl	8002c2c <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032ea:	2204      	movs	r2, #4
 80032ec:	a907      	add	r1, sp, #28
 80032ee:	4809      	ldr	r0, [pc, #36]	; (8003314 <MX_TIM2_Init+0xc0>)
 80032f0:	f7fe ffe8 	bl	80022c4 <HAL_TIM_PWM_ConfigChannel>
 80032f4:	b108      	cbz	r0, 80032fa <MX_TIM2_Init+0xa6>
    Error_Handler();
 80032f6:	f7ff fc99 	bl	8002c2c <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032fa:	2208      	movs	r2, #8
 80032fc:	a907      	add	r1, sp, #28
 80032fe:	4805      	ldr	r0, [pc, #20]	; (8003314 <MX_TIM2_Init+0xc0>)
 8003300:	f7fe ffe0 	bl	80022c4 <HAL_TIM_PWM_ConfigChannel>
 8003304:	b108      	cbz	r0, 800330a <MX_TIM2_Init+0xb6>
    Error_Handler();
 8003306:	f7ff fc91 	bl	8002c2c <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 800330a:	4802      	ldr	r0, [pc, #8]	; (8003314 <MX_TIM2_Init+0xc0>)
 800330c:	f7ff ff7e 	bl	800320c <HAL_TIM_MspPostInit>
}
 8003310:	b00e      	add	sp, #56	; 0x38
 8003312:	bd10      	pop	{r4, pc}
 8003314:	20000614 	.word	0x20000614

08003318 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003318:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800331a:	e003      	b.n	8003324 <LoopCopyDataInit>

0800331c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800331e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003320:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003322:	3104      	adds	r1, #4

08003324 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003324:	480a      	ldr	r0, [pc, #40]	; (8003350 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003328:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800332a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800332c:	d3f6      	bcc.n	800331c <CopyDataInit>
  ldr r2, =_sbss
 800332e:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003330:	e002      	b.n	8003338 <LoopFillZerobss>

08003332 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003332:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003334:	f842 3b04 	str.w	r3, [r2], #4

08003338 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003338:	4b08      	ldr	r3, [pc, #32]	; (800335c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800333a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800333c:	d3f9      	bcc.n	8003332 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800333e:	f7ff fe8f 	bl	8003060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003342:	f000 f80f 	bl	8003364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003346:	f7ff fbef 	bl	8002b28 <main>
  bx lr
 800334a:	4770      	bx	lr
  ldr r3, =_sidata
 800334c:	08004548 	.word	0x08004548
  ldr r0, =_sdata
 8003350:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003354:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8003358:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 800335c:	20000654 	.word	0x20000654

08003360 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003360:	e7fe      	b.n	8003360 <ADC1_2_IRQHandler>
	...

08003364 <__libc_init_array>:
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	2500      	movs	r5, #0
 8003368:	4e0c      	ldr	r6, [pc, #48]	; (800339c <__libc_init_array+0x38>)
 800336a:	4c0d      	ldr	r4, [pc, #52]	; (80033a0 <__libc_init_array+0x3c>)
 800336c:	1ba4      	subs	r4, r4, r6
 800336e:	10a4      	asrs	r4, r4, #2
 8003370:	42a5      	cmp	r5, r4
 8003372:	d109      	bne.n	8003388 <__libc_init_array+0x24>
 8003374:	f000 fb9e 	bl	8003ab4 <_init>
 8003378:	2500      	movs	r5, #0
 800337a:	4e0a      	ldr	r6, [pc, #40]	; (80033a4 <__libc_init_array+0x40>)
 800337c:	4c0a      	ldr	r4, [pc, #40]	; (80033a8 <__libc_init_array+0x44>)
 800337e:	1ba4      	subs	r4, r4, r6
 8003380:	10a4      	asrs	r4, r4, #2
 8003382:	42a5      	cmp	r5, r4
 8003384:	d105      	bne.n	8003392 <__libc_init_array+0x2e>
 8003386:	bd70      	pop	{r4, r5, r6, pc}
 8003388:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800338c:	4798      	blx	r3
 800338e:	3501      	adds	r5, #1
 8003390:	e7ee      	b.n	8003370 <__libc_init_array+0xc>
 8003392:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003396:	4798      	blx	r3
 8003398:	3501      	adds	r5, #1
 800339a:	e7f2      	b.n	8003382 <__libc_init_array+0x1e>
 800339c:	08004540 	.word	0x08004540
 80033a0:	08004540 	.word	0x08004540
 80033a4:	08004540 	.word	0x08004540
 80033a8:	08004544 	.word	0x08004544

080033ac <memset>:
 80033ac:	4603      	mov	r3, r0
 80033ae:	4402      	add	r2, r0
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d100      	bne.n	80033b6 <memset+0xa>
 80033b4:	4770      	bx	lr
 80033b6:	f803 1b01 	strb.w	r1, [r3], #1
 80033ba:	e7f9      	b.n	80033b0 <memset+0x4>

080033bc <atan2>:
 80033bc:	f000 b854 	b.w	8003468 <__ieee754_atan2>

080033c0 <sqrt>:
 80033c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c4:	b08b      	sub	sp, #44	; 0x2c
 80033c6:	4604      	mov	r4, r0
 80033c8:	460d      	mov	r5, r1
 80033ca:	f000 f927 	bl	800361c <__ieee754_sqrt>
 80033ce:	4b24      	ldr	r3, [pc, #144]	; (8003460 <sqrt+0xa0>)
 80033d0:	4680      	mov	r8, r0
 80033d2:	f993 a000 	ldrsb.w	sl, [r3]
 80033d6:	4689      	mov	r9, r1
 80033d8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80033dc:	d02b      	beq.n	8003436 <sqrt+0x76>
 80033de:	4622      	mov	r2, r4
 80033e0:	462b      	mov	r3, r5
 80033e2:	4620      	mov	r0, r4
 80033e4:	4629      	mov	r1, r5
 80033e6:	f7fd fb05 	bl	80009f4 <__aeabi_dcmpun>
 80033ea:	4683      	mov	fp, r0
 80033ec:	bb18      	cbnz	r0, 8003436 <sqrt+0x76>
 80033ee:	2600      	movs	r6, #0
 80033f0:	2700      	movs	r7, #0
 80033f2:	4632      	mov	r2, r6
 80033f4:	463b      	mov	r3, r7
 80033f6:	4620      	mov	r0, r4
 80033f8:	4629      	mov	r1, r5
 80033fa:	f7fd fad3 	bl	80009a4 <__aeabi_dcmplt>
 80033fe:	b1d0      	cbz	r0, 8003436 <sqrt+0x76>
 8003400:	2301      	movs	r3, #1
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	4b17      	ldr	r3, [pc, #92]	; (8003464 <sqrt+0xa4>)
 8003406:	f8cd b020 	str.w	fp, [sp, #32]
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003410:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003414:	f1ba 0f00 	cmp.w	sl, #0
 8003418:	d112      	bne.n	8003440 <sqrt+0x80>
 800341a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800341e:	4668      	mov	r0, sp
 8003420:	f000 fb3f 	bl	8003aa2 <matherr>
 8003424:	b1b8      	cbz	r0, 8003456 <sqrt+0x96>
 8003426:	9b08      	ldr	r3, [sp, #32]
 8003428:	b11b      	cbz	r3, 8003432 <sqrt+0x72>
 800342a:	f000 fb3d 	bl	8003aa8 <__errno>
 800342e:	9b08      	ldr	r3, [sp, #32]
 8003430:	6003      	str	r3, [r0, #0]
 8003432:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8003436:	4640      	mov	r0, r8
 8003438:	4649      	mov	r1, r9
 800343a:	b00b      	add	sp, #44	; 0x2c
 800343c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003440:	4632      	mov	r2, r6
 8003442:	463b      	mov	r3, r7
 8003444:	4630      	mov	r0, r6
 8003446:	4639      	mov	r1, r7
 8003448:	f7fd f964 	bl	8000714 <__aeabi_ddiv>
 800344c:	f1ba 0f02 	cmp.w	sl, #2
 8003450:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003454:	d1e3      	bne.n	800341e <sqrt+0x5e>
 8003456:	f000 fb27 	bl	8003aa8 <__errno>
 800345a:	2321      	movs	r3, #33	; 0x21
 800345c:	6003      	str	r3, [r0, #0]
 800345e:	e7e2      	b.n	8003426 <sqrt+0x66>
 8003460:	20000014 	.word	0x20000014
 8003464:	080044f8 	.word	0x080044f8

08003468 <__ieee754_atan2>:
 8003468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800346c:	4256      	negs	r6, r2
 800346e:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8003472:	4316      	orrs	r6, r2
 8003474:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8003618 <__ieee754_atan2+0x1b0>
 8003478:	ea4e 76d6 	orr.w	r6, lr, r6, lsr #31
 800347c:	454e      	cmp	r6, r9
 800347e:	4604      	mov	r4, r0
 8003480:	460d      	mov	r5, r1
 8003482:	4688      	mov	r8, r1
 8003484:	d807      	bhi.n	8003496 <__ieee754_atan2+0x2e>
 8003486:	4246      	negs	r6, r0
 8003488:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800348c:	4306      	orrs	r6, r0
 800348e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8003492:	454e      	cmp	r6, r9
 8003494:	d906      	bls.n	80034a4 <__ieee754_atan2+0x3c>
 8003496:	4620      	mov	r0, r4
 8003498:	4629      	mov	r1, r5
 800349a:	f7fc fe5f 	bl	800015c <__adddf3>
 800349e:	4604      	mov	r4, r0
 80034a0:	460d      	mov	r5, r1
 80034a2:	e015      	b.n	80034d0 <__ieee754_atan2+0x68>
 80034a4:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 80034a8:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80034ac:	4316      	orrs	r6, r2
 80034ae:	d103      	bne.n	80034b8 <__ieee754_atan2+0x50>
 80034b0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b4:	f000 b960 	b.w	8003778 <atan>
 80034b8:	179e      	asrs	r6, r3, #30
 80034ba:	f006 0602 	and.w	r6, r6, #2
 80034be:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80034c2:	ea50 0107 	orrs.w	r1, r0, r7
 80034c6:	d107      	bne.n	80034d8 <__ieee754_atan2+0x70>
 80034c8:	2e02      	cmp	r6, #2
 80034ca:	d030      	beq.n	800352e <__ieee754_atan2+0xc6>
 80034cc:	2e03      	cmp	r6, #3
 80034ce:	d032      	beq.n	8003536 <__ieee754_atan2+0xce>
 80034d0:	4620      	mov	r0, r4
 80034d2:	4629      	mov	r1, r5
 80034d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034d8:	ea52 010e 	orrs.w	r1, r2, lr
 80034dc:	d106      	bne.n	80034ec <__ieee754_atan2+0x84>
 80034de:	f1b8 0f00 	cmp.w	r8, #0
 80034e2:	da71      	bge.n	80035c8 <__ieee754_atan2+0x160>
 80034e4:	a53a      	add	r5, pc, #232	; (adr r5, 80035d0 <__ieee754_atan2+0x168>)
 80034e6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80034ea:	e7f1      	b.n	80034d0 <__ieee754_atan2+0x68>
 80034ec:	45ce      	cmp	lr, r9
 80034ee:	d126      	bne.n	800353e <__ieee754_atan2+0xd6>
 80034f0:	4577      	cmp	r7, lr
 80034f2:	d111      	bne.n	8003518 <__ieee754_atan2+0xb0>
 80034f4:	2e02      	cmp	r6, #2
 80034f6:	d007      	beq.n	8003508 <__ieee754_atan2+0xa0>
 80034f8:	2e03      	cmp	r6, #3
 80034fa:	d009      	beq.n	8003510 <__ieee754_atan2+0xa8>
 80034fc:	2e01      	cmp	r6, #1
 80034fe:	d15d      	bne.n	80035bc <__ieee754_atan2+0x154>
 8003500:	a535      	add	r5, pc, #212	; (adr r5, 80035d8 <__ieee754_atan2+0x170>)
 8003502:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003506:	e7e3      	b.n	80034d0 <__ieee754_atan2+0x68>
 8003508:	a535      	add	r5, pc, #212	; (adr r5, 80035e0 <__ieee754_atan2+0x178>)
 800350a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800350e:	e7df      	b.n	80034d0 <__ieee754_atan2+0x68>
 8003510:	a535      	add	r5, pc, #212	; (adr r5, 80035e8 <__ieee754_atan2+0x180>)
 8003512:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003516:	e7db      	b.n	80034d0 <__ieee754_atan2+0x68>
 8003518:	2e02      	cmp	r6, #2
 800351a:	d008      	beq.n	800352e <__ieee754_atan2+0xc6>
 800351c:	2e03      	cmp	r6, #3
 800351e:	d00a      	beq.n	8003536 <__ieee754_atan2+0xce>
 8003520:	2e01      	cmp	r6, #1
 8003522:	f04f 0400 	mov.w	r4, #0
 8003526:	d14d      	bne.n	80035c4 <__ieee754_atan2+0x15c>
 8003528:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800352c:	e7d0      	b.n	80034d0 <__ieee754_atan2+0x68>
 800352e:	a530      	add	r5, pc, #192	; (adr r5, 80035f0 <__ieee754_atan2+0x188>)
 8003530:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003534:	e7cc      	b.n	80034d0 <__ieee754_atan2+0x68>
 8003536:	a530      	add	r5, pc, #192	; (adr r5, 80035f8 <__ieee754_atan2+0x190>)
 8003538:	e9d5 4500 	ldrd	r4, r5, [r5]
 800353c:	e7c8      	b.n	80034d0 <__ieee754_atan2+0x68>
 800353e:	454f      	cmp	r7, r9
 8003540:	d0cd      	beq.n	80034de <__ieee754_atan2+0x76>
 8003542:	eba7 070e 	sub.w	r7, r7, lr
 8003546:	153f      	asrs	r7, r7, #20
 8003548:	2f3c      	cmp	r7, #60	; 0x3c
 800354a:	dc1e      	bgt.n	800358a <__ieee754_atan2+0x122>
 800354c:	2b00      	cmp	r3, #0
 800354e:	da01      	bge.n	8003554 <__ieee754_atan2+0xec>
 8003550:	373c      	adds	r7, #60	; 0x3c
 8003552:	db1e      	blt.n	8003592 <__ieee754_atan2+0x12a>
 8003554:	4620      	mov	r0, r4
 8003556:	4629      	mov	r1, r5
 8003558:	f7fd f8dc 	bl	8000714 <__aeabi_ddiv>
 800355c:	f000 fa9e 	bl	8003a9c <fabs>
 8003560:	f000 f90a 	bl	8003778 <atan>
 8003564:	4604      	mov	r4, r0
 8003566:	460d      	mov	r5, r1
 8003568:	2e01      	cmp	r6, #1
 800356a:	d015      	beq.n	8003598 <__ieee754_atan2+0x130>
 800356c:	2e02      	cmp	r6, #2
 800356e:	d016      	beq.n	800359e <__ieee754_atan2+0x136>
 8003570:	2e00      	cmp	r6, #0
 8003572:	d0ad      	beq.n	80034d0 <__ieee754_atan2+0x68>
 8003574:	a322      	add	r3, pc, #136	; (adr r3, 8003600 <__ieee754_atan2+0x198>)
 8003576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357a:	4620      	mov	r0, r4
 800357c:	4629      	mov	r1, r5
 800357e:	f7fc fdeb 	bl	8000158 <__aeabi_dsub>
 8003582:	a31b      	add	r3, pc, #108	; (adr r3, 80035f0 <__ieee754_atan2+0x188>)
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	e015      	b.n	80035b6 <__ieee754_atan2+0x14e>
 800358a:	a51f      	add	r5, pc, #124	; (adr r5, 8003608 <__ieee754_atan2+0x1a0>)
 800358c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003590:	e7ea      	b.n	8003568 <__ieee754_atan2+0x100>
 8003592:	2400      	movs	r4, #0
 8003594:	2500      	movs	r5, #0
 8003596:	e7e7      	b.n	8003568 <__ieee754_atan2+0x100>
 8003598:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800359c:	e798      	b.n	80034d0 <__ieee754_atan2+0x68>
 800359e:	a318      	add	r3, pc, #96	; (adr r3, 8003600 <__ieee754_atan2+0x198>)
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	4620      	mov	r0, r4
 80035a6:	4629      	mov	r1, r5
 80035a8:	f7fc fdd6 	bl	8000158 <__aeabi_dsub>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	a10f      	add	r1, pc, #60	; (adr r1, 80035f0 <__ieee754_atan2+0x188>)
 80035b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035b6:	f7fc fdcf 	bl	8000158 <__aeabi_dsub>
 80035ba:	e770      	b.n	800349e <__ieee754_atan2+0x36>
 80035bc:	a514      	add	r5, pc, #80	; (adr r5, 8003610 <__ieee754_atan2+0x1a8>)
 80035be:	e9d5 4500 	ldrd	r4, r5, [r5]
 80035c2:	e785      	b.n	80034d0 <__ieee754_atan2+0x68>
 80035c4:	2500      	movs	r5, #0
 80035c6:	e783      	b.n	80034d0 <__ieee754_atan2+0x68>
 80035c8:	a50f      	add	r5, pc, #60	; (adr r5, 8003608 <__ieee754_atan2+0x1a0>)
 80035ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80035ce:	e77f      	b.n	80034d0 <__ieee754_atan2+0x68>
 80035d0:	54442d18 	.word	0x54442d18
 80035d4:	bff921fb 	.word	0xbff921fb
 80035d8:	54442d18 	.word	0x54442d18
 80035dc:	bfe921fb 	.word	0xbfe921fb
 80035e0:	7f3321d2 	.word	0x7f3321d2
 80035e4:	4002d97c 	.word	0x4002d97c
 80035e8:	7f3321d2 	.word	0x7f3321d2
 80035ec:	c002d97c 	.word	0xc002d97c
 80035f0:	54442d18 	.word	0x54442d18
 80035f4:	400921fb 	.word	0x400921fb
 80035f8:	54442d18 	.word	0x54442d18
 80035fc:	c00921fb 	.word	0xc00921fb
 8003600:	33145c07 	.word	0x33145c07
 8003604:	3ca1a626 	.word	0x3ca1a626
 8003608:	54442d18 	.word	0x54442d18
 800360c:	3ff921fb 	.word	0x3ff921fb
 8003610:	54442d18 	.word	0x54442d18
 8003614:	3fe921fb 	.word	0x3fe921fb
 8003618:	7ff00000 	.word	0x7ff00000

0800361c <__ieee754_sqrt>:
 800361c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003620:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8003770 <__ieee754_sqrt+0x154>
 8003624:	4606      	mov	r6, r0
 8003626:	ea3e 0e01 	bics.w	lr, lr, r1
 800362a:	460d      	mov	r5, r1
 800362c:	4607      	mov	r7, r0
 800362e:	460a      	mov	r2, r1
 8003630:	460c      	mov	r4, r1
 8003632:	4603      	mov	r3, r0
 8003634:	d10f      	bne.n	8003656 <__ieee754_sqrt+0x3a>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	f7fc ff41 	bl	80004c0 <__aeabi_dmul>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4630      	mov	r0, r6
 8003644:	4629      	mov	r1, r5
 8003646:	f7fc fd89 	bl	800015c <__adddf3>
 800364a:	4606      	mov	r6, r0
 800364c:	460d      	mov	r5, r1
 800364e:	4630      	mov	r0, r6
 8003650:	4629      	mov	r1, r5
 8003652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003656:	2900      	cmp	r1, #0
 8003658:	dc0e      	bgt.n	8003678 <__ieee754_sqrt+0x5c>
 800365a:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800365e:	ea5e 0707 	orrs.w	r7, lr, r7
 8003662:	d0f4      	beq.n	800364e <__ieee754_sqrt+0x32>
 8003664:	b141      	cbz	r1, 8003678 <__ieee754_sqrt+0x5c>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	f7fc fd75 	bl	8000158 <__aeabi_dsub>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	f7fd f84f 	bl	8000714 <__aeabi_ddiv>
 8003676:	e7e8      	b.n	800364a <__ieee754_sqrt+0x2e>
 8003678:	1512      	asrs	r2, r2, #20
 800367a:	d10c      	bne.n	8003696 <__ieee754_sqrt+0x7a>
 800367c:	2c00      	cmp	r4, #0
 800367e:	d06e      	beq.n	800375e <__ieee754_sqrt+0x142>
 8003680:	2100      	movs	r1, #0
 8003682:	02e6      	lsls	r6, r4, #11
 8003684:	d56f      	bpl.n	8003766 <__ieee754_sqrt+0x14a>
 8003686:	1e48      	subs	r0, r1, #1
 8003688:	1a12      	subs	r2, r2, r0
 800368a:	f1c1 0020 	rsb	r0, r1, #32
 800368e:	fa23 f000 	lsr.w	r0, r3, r0
 8003692:	4304      	orrs	r4, r0
 8003694:	408b      	lsls	r3, r1
 8003696:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800369a:	07d5      	lsls	r5, r2, #31
 800369c:	f04f 0500 	mov.w	r5, #0
 80036a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80036a4:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80036a8:	bf42      	ittt	mi
 80036aa:	0064      	lslmi	r4, r4, #1
 80036ac:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 80036b0:	005b      	lslmi	r3, r3, #1
 80036b2:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 80036b6:	1050      	asrs	r0, r2, #1
 80036b8:	4421      	add	r1, r4
 80036ba:	2216      	movs	r2, #22
 80036bc:	462c      	mov	r4, r5
 80036be:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	19a7      	adds	r7, r4, r6
 80036c6:	428f      	cmp	r7, r1
 80036c8:	bfde      	ittt	le
 80036ca:	1bc9      	suble	r1, r1, r7
 80036cc:	19bc      	addle	r4, r7, r6
 80036ce:	19ad      	addle	r5, r5, r6
 80036d0:	0049      	lsls	r1, r1, #1
 80036d2:	3a01      	subs	r2, #1
 80036d4:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80036d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80036dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80036e0:	d1f0      	bne.n	80036c4 <__ieee754_sqrt+0xa8>
 80036e2:	f04f 0e20 	mov.w	lr, #32
 80036e6:	4694      	mov	ip, r2
 80036e8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80036ec:	42a1      	cmp	r1, r4
 80036ee:	eb06 070c 	add.w	r7, r6, ip
 80036f2:	dc02      	bgt.n	80036fa <__ieee754_sqrt+0xde>
 80036f4:	d112      	bne.n	800371c <__ieee754_sqrt+0x100>
 80036f6:	429f      	cmp	r7, r3
 80036f8:	d810      	bhi.n	800371c <__ieee754_sqrt+0x100>
 80036fa:	2f00      	cmp	r7, #0
 80036fc:	eb07 0c06 	add.w	ip, r7, r6
 8003700:	da34      	bge.n	800376c <__ieee754_sqrt+0x150>
 8003702:	f1bc 0f00 	cmp.w	ip, #0
 8003706:	db31      	blt.n	800376c <__ieee754_sqrt+0x150>
 8003708:	f104 0801 	add.w	r8, r4, #1
 800370c:	1b09      	subs	r1, r1, r4
 800370e:	4644      	mov	r4, r8
 8003710:	429f      	cmp	r7, r3
 8003712:	bf88      	it	hi
 8003714:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8003718:	1bdb      	subs	r3, r3, r7
 800371a:	4432      	add	r2, r6
 800371c:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8003720:	f1be 0e01 	subs.w	lr, lr, #1
 8003724:	4439      	add	r1, r7
 8003726:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800372a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800372e:	d1dd      	bne.n	80036ec <__ieee754_sqrt+0xd0>
 8003730:	430b      	orrs	r3, r1
 8003732:	d006      	beq.n	8003742 <__ieee754_sqrt+0x126>
 8003734:	1c54      	adds	r4, r2, #1
 8003736:	bf0b      	itete	eq
 8003738:	4672      	moveq	r2, lr
 800373a:	3201      	addne	r2, #1
 800373c:	3501      	addeq	r5, #1
 800373e:	f022 0201 	bicne.w	r2, r2, #1
 8003742:	106b      	asrs	r3, r5, #1
 8003744:	0852      	lsrs	r2, r2, #1
 8003746:	07e9      	lsls	r1, r5, #31
 8003748:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800374c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003750:	bf48      	it	mi
 8003752:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003756:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 800375a:	4616      	mov	r6, r2
 800375c:	e777      	b.n	800364e <__ieee754_sqrt+0x32>
 800375e:	0adc      	lsrs	r4, r3, #11
 8003760:	3a15      	subs	r2, #21
 8003762:	055b      	lsls	r3, r3, #21
 8003764:	e78a      	b.n	800367c <__ieee754_sqrt+0x60>
 8003766:	0064      	lsls	r4, r4, #1
 8003768:	3101      	adds	r1, #1
 800376a:	e78a      	b.n	8003682 <__ieee754_sqrt+0x66>
 800376c:	46a0      	mov	r8, r4
 800376e:	e7cd      	b.n	800370c <__ieee754_sqrt+0xf0>
 8003770:	7ff00000 	.word	0x7ff00000
 8003774:	00000000 	.word	0x00000000

08003778 <atan>:
 8003778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800377c:	4bba      	ldr	r3, [pc, #744]	; (8003a68 <atan+0x2f0>)
 800377e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003782:	429e      	cmp	r6, r3
 8003784:	4604      	mov	r4, r0
 8003786:	460d      	mov	r5, r1
 8003788:	468b      	mov	fp, r1
 800378a:	dd17      	ble.n	80037bc <atan+0x44>
 800378c:	4ab7      	ldr	r2, [pc, #732]	; (8003a6c <atan+0x2f4>)
 800378e:	4296      	cmp	r6, r2
 8003790:	dc01      	bgt.n	8003796 <atan+0x1e>
 8003792:	d109      	bne.n	80037a8 <atan+0x30>
 8003794:	b140      	cbz	r0, 80037a8 <atan+0x30>
 8003796:	4622      	mov	r2, r4
 8003798:	462b      	mov	r3, r5
 800379a:	4620      	mov	r0, r4
 800379c:	4629      	mov	r1, r5
 800379e:	f7fc fcdd 	bl	800015c <__adddf3>
 80037a2:	4604      	mov	r4, r0
 80037a4:	460d      	mov	r5, r1
 80037a6:	e005      	b.n	80037b4 <atan+0x3c>
 80037a8:	f1bb 0f00 	cmp.w	fp, #0
 80037ac:	4cb0      	ldr	r4, [pc, #704]	; (8003a70 <atan+0x2f8>)
 80037ae:	f300 8129 	bgt.w	8003a04 <atan+0x28c>
 80037b2:	4db0      	ldr	r5, [pc, #704]	; (8003a74 <atan+0x2fc>)
 80037b4:	4620      	mov	r0, r4
 80037b6:	4629      	mov	r1, r5
 80037b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037bc:	4bae      	ldr	r3, [pc, #696]	; (8003a78 <atan+0x300>)
 80037be:	429e      	cmp	r6, r3
 80037c0:	dc11      	bgt.n	80037e6 <atan+0x6e>
 80037c2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80037c6:	429e      	cmp	r6, r3
 80037c8:	dc0a      	bgt.n	80037e0 <atan+0x68>
 80037ca:	a38f      	add	r3, pc, #572	; (adr r3, 8003a08 <atan+0x290>)
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f7fc fcc4 	bl	800015c <__adddf3>
 80037d4:	2200      	movs	r2, #0
 80037d6:	4ba9      	ldr	r3, [pc, #676]	; (8003a7c <atan+0x304>)
 80037d8:	f7fd f902 	bl	80009e0 <__aeabi_dcmpgt>
 80037dc:	2800      	cmp	r0, #0
 80037de:	d1e9      	bne.n	80037b4 <atan+0x3c>
 80037e0:	f04f 3aff 	mov.w	sl, #4294967295
 80037e4:	e027      	b.n	8003836 <atan+0xbe>
 80037e6:	f000 f959 	bl	8003a9c <fabs>
 80037ea:	4ba5      	ldr	r3, [pc, #660]	; (8003a80 <atan+0x308>)
 80037ec:	4604      	mov	r4, r0
 80037ee:	429e      	cmp	r6, r3
 80037f0:	460d      	mov	r5, r1
 80037f2:	f300 80b8 	bgt.w	8003966 <atan+0x1ee>
 80037f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80037fa:	429e      	cmp	r6, r3
 80037fc:	f300 809c 	bgt.w	8003938 <atan+0x1c0>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	f7fc fcaa 	bl	800015c <__adddf3>
 8003808:	2200      	movs	r2, #0
 800380a:	4b9c      	ldr	r3, [pc, #624]	; (8003a7c <atan+0x304>)
 800380c:	f7fc fca4 	bl	8000158 <__aeabi_dsub>
 8003810:	2200      	movs	r2, #0
 8003812:	4606      	mov	r6, r0
 8003814:	460f      	mov	r7, r1
 8003816:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800381a:	4620      	mov	r0, r4
 800381c:	4629      	mov	r1, r5
 800381e:	f7fc fc9d 	bl	800015c <__adddf3>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4630      	mov	r0, r6
 8003828:	4639      	mov	r1, r7
 800382a:	f7fc ff73 	bl	8000714 <__aeabi_ddiv>
 800382e:	f04f 0a00 	mov.w	sl, #0
 8003832:	4604      	mov	r4, r0
 8003834:	460d      	mov	r5, r1
 8003836:	4622      	mov	r2, r4
 8003838:	462b      	mov	r3, r5
 800383a:	4620      	mov	r0, r4
 800383c:	4629      	mov	r1, r5
 800383e:	f7fc fe3f 	bl	80004c0 <__aeabi_dmul>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4680      	mov	r8, r0
 8003848:	4689      	mov	r9, r1
 800384a:	f7fc fe39 	bl	80004c0 <__aeabi_dmul>
 800384e:	a370      	add	r3, pc, #448	; (adr r3, 8003a10 <atan+0x298>)
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	4606      	mov	r6, r0
 8003856:	460f      	mov	r7, r1
 8003858:	f7fc fe32 	bl	80004c0 <__aeabi_dmul>
 800385c:	a36e      	add	r3, pc, #440	; (adr r3, 8003a18 <atan+0x2a0>)
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	f7fc fc7b 	bl	800015c <__adddf3>
 8003866:	4632      	mov	r2, r6
 8003868:	463b      	mov	r3, r7
 800386a:	f7fc fe29 	bl	80004c0 <__aeabi_dmul>
 800386e:	a36c      	add	r3, pc, #432	; (adr r3, 8003a20 <atan+0x2a8>)
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f7fc fc72 	bl	800015c <__adddf3>
 8003878:	4632      	mov	r2, r6
 800387a:	463b      	mov	r3, r7
 800387c:	f7fc fe20 	bl	80004c0 <__aeabi_dmul>
 8003880:	a369      	add	r3, pc, #420	; (adr r3, 8003a28 <atan+0x2b0>)
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	f7fc fc69 	bl	800015c <__adddf3>
 800388a:	4632      	mov	r2, r6
 800388c:	463b      	mov	r3, r7
 800388e:	f7fc fe17 	bl	80004c0 <__aeabi_dmul>
 8003892:	a367      	add	r3, pc, #412	; (adr r3, 8003a30 <atan+0x2b8>)
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	f7fc fc60 	bl	800015c <__adddf3>
 800389c:	4632      	mov	r2, r6
 800389e:	463b      	mov	r3, r7
 80038a0:	f7fc fe0e 	bl	80004c0 <__aeabi_dmul>
 80038a4:	a364      	add	r3, pc, #400	; (adr r3, 8003a38 <atan+0x2c0>)
 80038a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038aa:	f7fc fc57 	bl	800015c <__adddf3>
 80038ae:	4642      	mov	r2, r8
 80038b0:	464b      	mov	r3, r9
 80038b2:	f7fc fe05 	bl	80004c0 <__aeabi_dmul>
 80038b6:	a362      	add	r3, pc, #392	; (adr r3, 8003a40 <atan+0x2c8>)
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	4680      	mov	r8, r0
 80038be:	4689      	mov	r9, r1
 80038c0:	4630      	mov	r0, r6
 80038c2:	4639      	mov	r1, r7
 80038c4:	f7fc fdfc 	bl	80004c0 <__aeabi_dmul>
 80038c8:	a35f      	add	r3, pc, #380	; (adr r3, 8003a48 <atan+0x2d0>)
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	f7fc fc43 	bl	8000158 <__aeabi_dsub>
 80038d2:	4632      	mov	r2, r6
 80038d4:	463b      	mov	r3, r7
 80038d6:	f7fc fdf3 	bl	80004c0 <__aeabi_dmul>
 80038da:	a35d      	add	r3, pc, #372	; (adr r3, 8003a50 <atan+0x2d8>)
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	f7fc fc3a 	bl	8000158 <__aeabi_dsub>
 80038e4:	4632      	mov	r2, r6
 80038e6:	463b      	mov	r3, r7
 80038e8:	f7fc fdea 	bl	80004c0 <__aeabi_dmul>
 80038ec:	a35a      	add	r3, pc, #360	; (adr r3, 8003a58 <atan+0x2e0>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f7fc fc31 	bl	8000158 <__aeabi_dsub>
 80038f6:	4632      	mov	r2, r6
 80038f8:	463b      	mov	r3, r7
 80038fa:	f7fc fde1 	bl	80004c0 <__aeabi_dmul>
 80038fe:	a358      	add	r3, pc, #352	; (adr r3, 8003a60 <atan+0x2e8>)
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f7fc fc28 	bl	8000158 <__aeabi_dsub>
 8003908:	4632      	mov	r2, r6
 800390a:	463b      	mov	r3, r7
 800390c:	f7fc fdd8 	bl	80004c0 <__aeabi_dmul>
 8003910:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	d14e      	bne.n	80039b8 <atan+0x240>
 800391a:	4640      	mov	r0, r8
 800391c:	4649      	mov	r1, r9
 800391e:	f7fc fc1d 	bl	800015c <__adddf3>
 8003922:	4622      	mov	r2, r4
 8003924:	462b      	mov	r3, r5
 8003926:	f7fc fdcb 	bl	80004c0 <__aeabi_dmul>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4620      	mov	r0, r4
 8003930:	4629      	mov	r1, r5
 8003932:	f7fc fc11 	bl	8000158 <__aeabi_dsub>
 8003936:	e734      	b.n	80037a2 <atan+0x2a>
 8003938:	2200      	movs	r2, #0
 800393a:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <atan+0x304>)
 800393c:	f7fc fc0c 	bl	8000158 <__aeabi_dsub>
 8003940:	2200      	movs	r2, #0
 8003942:	4606      	mov	r6, r0
 8003944:	460f      	mov	r7, r1
 8003946:	4b4d      	ldr	r3, [pc, #308]	; (8003a7c <atan+0x304>)
 8003948:	4620      	mov	r0, r4
 800394a:	4629      	mov	r1, r5
 800394c:	f7fc fc06 	bl	800015c <__adddf3>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4630      	mov	r0, r6
 8003956:	4639      	mov	r1, r7
 8003958:	f7fc fedc 	bl	8000714 <__aeabi_ddiv>
 800395c:	f04f 0a01 	mov.w	sl, #1
 8003960:	4604      	mov	r4, r0
 8003962:	460d      	mov	r5, r1
 8003964:	e767      	b.n	8003836 <atan+0xbe>
 8003966:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <atan+0x30c>)
 8003968:	429e      	cmp	r6, r3
 800396a:	dc1a      	bgt.n	80039a2 <atan+0x22a>
 800396c:	2200      	movs	r2, #0
 800396e:	4b46      	ldr	r3, [pc, #280]	; (8003a88 <atan+0x310>)
 8003970:	f7fc fbf2 	bl	8000158 <__aeabi_dsub>
 8003974:	2200      	movs	r2, #0
 8003976:	4606      	mov	r6, r0
 8003978:	460f      	mov	r7, r1
 800397a:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <atan+0x310>)
 800397c:	4620      	mov	r0, r4
 800397e:	4629      	mov	r1, r5
 8003980:	f7fc fd9e 	bl	80004c0 <__aeabi_dmul>
 8003984:	2200      	movs	r2, #0
 8003986:	4b3d      	ldr	r3, [pc, #244]	; (8003a7c <atan+0x304>)
 8003988:	f7fc fbe8 	bl	800015c <__adddf3>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4630      	mov	r0, r6
 8003992:	4639      	mov	r1, r7
 8003994:	f7fc febe 	bl	8000714 <__aeabi_ddiv>
 8003998:	f04f 0a02 	mov.w	sl, #2
 800399c:	4604      	mov	r4, r0
 800399e:	460d      	mov	r5, r1
 80039a0:	e749      	b.n	8003836 <atan+0xbe>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	2000      	movs	r0, #0
 80039a8:	4938      	ldr	r1, [pc, #224]	; (8003a8c <atan+0x314>)
 80039aa:	f7fc feb3 	bl	8000714 <__aeabi_ddiv>
 80039ae:	f04f 0a03 	mov.w	sl, #3
 80039b2:	4604      	mov	r4, r0
 80039b4:	460d      	mov	r5, r1
 80039b6:	e73e      	b.n	8003836 <atan+0xbe>
 80039b8:	4640      	mov	r0, r8
 80039ba:	4649      	mov	r1, r9
 80039bc:	f7fc fbce 	bl	800015c <__adddf3>
 80039c0:	4622      	mov	r2, r4
 80039c2:	462b      	mov	r3, r5
 80039c4:	f7fc fd7c 	bl	80004c0 <__aeabi_dmul>
 80039c8:	4e31      	ldr	r6, [pc, #196]	; (8003a90 <atan+0x318>)
 80039ca:	4b32      	ldr	r3, [pc, #200]	; (8003a94 <atan+0x31c>)
 80039cc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80039d0:	4456      	add	r6, sl
 80039d2:	449a      	add	sl, r3
 80039d4:	e9da 2300 	ldrd	r2, r3, [sl]
 80039d8:	f7fc fbbe 	bl	8000158 <__aeabi_dsub>
 80039dc:	4622      	mov	r2, r4
 80039de:	462b      	mov	r3, r5
 80039e0:	f7fc fbba 	bl	8000158 <__aeabi_dsub>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80039ec:	f7fc fbb4 	bl	8000158 <__aeabi_dsub>
 80039f0:	f1bb 0f00 	cmp.w	fp, #0
 80039f4:	4604      	mov	r4, r0
 80039f6:	460d      	mov	r5, r1
 80039f8:	f6bf aedc 	bge.w	80037b4 <atan+0x3c>
 80039fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003a00:	461d      	mov	r5, r3
 8003a02:	e6d7      	b.n	80037b4 <atan+0x3c>
 8003a04:	4d24      	ldr	r5, [pc, #144]	; (8003a98 <atan+0x320>)
 8003a06:	e6d5      	b.n	80037b4 <atan+0x3c>
 8003a08:	8800759c 	.word	0x8800759c
 8003a0c:	7e37e43c 	.word	0x7e37e43c
 8003a10:	e322da11 	.word	0xe322da11
 8003a14:	3f90ad3a 	.word	0x3f90ad3a
 8003a18:	24760deb 	.word	0x24760deb
 8003a1c:	3fa97b4b 	.word	0x3fa97b4b
 8003a20:	a0d03d51 	.word	0xa0d03d51
 8003a24:	3fb10d66 	.word	0x3fb10d66
 8003a28:	c54c206e 	.word	0xc54c206e
 8003a2c:	3fb745cd 	.word	0x3fb745cd
 8003a30:	920083ff 	.word	0x920083ff
 8003a34:	3fc24924 	.word	0x3fc24924
 8003a38:	5555550d 	.word	0x5555550d
 8003a3c:	3fd55555 	.word	0x3fd55555
 8003a40:	2c6a6c2f 	.word	0x2c6a6c2f
 8003a44:	bfa2b444 	.word	0xbfa2b444
 8003a48:	52defd9a 	.word	0x52defd9a
 8003a4c:	3fadde2d 	.word	0x3fadde2d
 8003a50:	af749a6d 	.word	0xaf749a6d
 8003a54:	3fb3b0f2 	.word	0x3fb3b0f2
 8003a58:	fe231671 	.word	0xfe231671
 8003a5c:	3fbc71c6 	.word	0x3fbc71c6
 8003a60:	9998ebc4 	.word	0x9998ebc4
 8003a64:	3fc99999 	.word	0x3fc99999
 8003a68:	440fffff 	.word	0x440fffff
 8003a6c:	7ff00000 	.word	0x7ff00000
 8003a70:	54442d18 	.word	0x54442d18
 8003a74:	bff921fb 	.word	0xbff921fb
 8003a78:	3fdbffff 	.word	0x3fdbffff
 8003a7c:	3ff00000 	.word	0x3ff00000
 8003a80:	3ff2ffff 	.word	0x3ff2ffff
 8003a84:	40037fff 	.word	0x40037fff
 8003a88:	3ff80000 	.word	0x3ff80000
 8003a8c:	bff00000 	.word	0xbff00000
 8003a90:	08004500 	.word	0x08004500
 8003a94:	08004520 	.word	0x08004520
 8003a98:	3ff921fb 	.word	0x3ff921fb

08003a9c <fabs>:
 8003a9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003aa0:	4770      	bx	lr

08003aa2 <matherr>:
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	4770      	bx	lr
	...

08003aa8 <__errno>:
 8003aa8:	4b01      	ldr	r3, [pc, #4]	; (8003ab0 <__errno+0x8>)
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000018 	.word	0x20000018

08003ab4 <_init>:
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab6:	bf00      	nop
 8003ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aba:	bc08      	pop	{r3}
 8003abc:	469e      	mov	lr, r3
 8003abe:	4770      	bx	lr

08003ac0 <_fini>:
 8003ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac2:	bf00      	nop
 8003ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac6:	bc08      	pop	{r3}
 8003ac8:	469e      	mov	lr, r3
 8003aca:	4770      	bx	lr
