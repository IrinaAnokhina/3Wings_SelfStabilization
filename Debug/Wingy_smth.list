
Wingy_smth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004354  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  08004468  08004468  00014468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004ed8  08004ed8  00014ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004edc  08004edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  08004ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000640  2000007c  08004f5c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200006bc  08004f5c  000206bc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001a99d  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003461  00000000  00000000  0003aa42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008c44  00000000  00000000  0003dea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a58  00000000  00000000  00046ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f68  00000000  00000000  00047540  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000073fb  00000000  00000000  000484a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003c69  00000000  00000000  0004f8a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005350c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000023c4  00000000  00000000  00053588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800444c 	.word	0x0800444c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	0800444c 	.word	0x0800444c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpun>:
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__aeabi_dcmpun+0x10>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d10a      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x20>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d102      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	f04f 0001 	mov.w	r0, #1
 8000a1e:	4770      	bx	lr

08000a20 <__aeabi_d2iz>:
 8000a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d215      	bcs.n	8000a56 <__aeabi_d2iz+0x36>
 8000a2a:	d511      	bpl.n	8000a50 <__aeabi_d2iz+0x30>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d912      	bls.n	8000a5c <__aeabi_d2iz+0x3c>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	bf18      	it	ne
 8000a4c:	4240      	negne	r0, r0
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_d2iz+0x48>
 8000a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	bf08      	it	eq
 8000a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_d2uiz>:
 8000a70:	004a      	lsls	r2, r1, #1
 8000a72:	d211      	bcs.n	8000a98 <__aeabi_d2uiz+0x28>
 8000a74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a78:	d211      	bcs.n	8000a9e <__aeabi_d2uiz+0x2e>
 8000a7a:	d50d      	bpl.n	8000a98 <__aeabi_d2uiz+0x28>
 8000a7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a84:	d40e      	bmi.n	8000aa4 <__aeabi_d2uiz+0x34>
 8000a86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_d2uiz+0x3a>
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_frsub>:
 8000ab0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab4:	e002      	b.n	8000abc <__addsf3>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_fsub>:
 8000ab8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000abc <__addsf3>:
 8000abc:	0042      	lsls	r2, r0, #1
 8000abe:	bf1f      	itttt	ne
 8000ac0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac4:	ea92 0f03 	teqne	r2, r3
 8000ac8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000acc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad0:	d06a      	beq.n	8000ba8 <__addsf3+0xec>
 8000ad2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ada:	bfc1      	itttt	gt
 8000adc:	18d2      	addgt	r2, r2, r3
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	4048      	eorgt	r0, r1
 8000ae2:	4041      	eorgt	r1, r0
 8000ae4:	bfb8      	it	lt
 8000ae6:	425b      	neglt	r3, r3
 8000ae8:	2b19      	cmp	r3, #25
 8000aea:	bf88      	it	hi
 8000aec:	4770      	bxhi	lr
 8000aee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000af2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000afa:	bf18      	it	ne
 8000afc:	4240      	negne	r0, r0
 8000afe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b02:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b06:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b0a:	bf18      	it	ne
 8000b0c:	4249      	negne	r1, r1
 8000b0e:	ea92 0f03 	teq	r2, r3
 8000b12:	d03f      	beq.n	8000b94 <__addsf3+0xd8>
 8000b14:	f1a2 0201 	sub.w	r2, r2, #1
 8000b18:	fa41 fc03 	asr.w	ip, r1, r3
 8000b1c:	eb10 000c 	adds.w	r0, r0, ip
 8000b20:	f1c3 0320 	rsb	r3, r3, #32
 8000b24:	fa01 f103 	lsl.w	r1, r1, r3
 8000b28:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b2c:	d502      	bpl.n	8000b34 <__addsf3+0x78>
 8000b2e:	4249      	negs	r1, r1
 8000b30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b38:	d313      	bcc.n	8000b62 <__addsf3+0xa6>
 8000b3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3e:	d306      	bcc.n	8000b4e <__addsf3+0x92>
 8000b40:	0840      	lsrs	r0, r0, #1
 8000b42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b46:	f102 0201 	add.w	r2, r2, #1
 8000b4a:	2afe      	cmp	r2, #254	; 0xfe
 8000b4c:	d251      	bcs.n	8000bf2 <__addsf3+0x136>
 8000b4e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b56:	bf08      	it	eq
 8000b58:	f020 0001 	biceq.w	r0, r0, #1
 8000b5c:	ea40 0003 	orr.w	r0, r0, r3
 8000b60:	4770      	bx	lr
 8000b62:	0049      	lsls	r1, r1, #1
 8000b64:	eb40 0000 	adc.w	r0, r0, r0
 8000b68:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	d1ed      	bne.n	8000b4e <__addsf3+0x92>
 8000b72:	fab0 fc80 	clz	ip, r0
 8000b76:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b7a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b82:	bfaa      	itet	ge
 8000b84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b88:	4252      	neglt	r2, r2
 8000b8a:	4318      	orrge	r0, r3
 8000b8c:	bfbc      	itt	lt
 8000b8e:	40d0      	lsrlt	r0, r2
 8000b90:	4318      	orrlt	r0, r3
 8000b92:	4770      	bx	lr
 8000b94:	f092 0f00 	teq	r2, #0
 8000b98:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b9c:	bf06      	itte	eq
 8000b9e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ba2:	3201      	addeq	r2, #1
 8000ba4:	3b01      	subne	r3, #1
 8000ba6:	e7b5      	b.n	8000b14 <__addsf3+0x58>
 8000ba8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb0:	bf18      	it	ne
 8000bb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb6:	d021      	beq.n	8000bfc <__addsf3+0x140>
 8000bb8:	ea92 0f03 	teq	r2, r3
 8000bbc:	d004      	beq.n	8000bc8 <__addsf3+0x10c>
 8000bbe:	f092 0f00 	teq	r2, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	4608      	moveq	r0, r1
 8000bc6:	4770      	bx	lr
 8000bc8:	ea90 0f01 	teq	r0, r1
 8000bcc:	bf1c      	itt	ne
 8000bce:	2000      	movne	r0, #0
 8000bd0:	4770      	bxne	lr
 8000bd2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd6:	d104      	bne.n	8000be2 <__addsf3+0x126>
 8000bd8:	0040      	lsls	r0, r0, #1
 8000bda:	bf28      	it	cs
 8000bdc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be0:	4770      	bx	lr
 8000be2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be6:	bf3c      	itt	cc
 8000be8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bec:	4770      	bxcc	lr
 8000bee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfa:	4770      	bx	lr
 8000bfc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c00:	bf16      	itet	ne
 8000c02:	4608      	movne	r0, r1
 8000c04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c08:	4601      	movne	r1, r0
 8000c0a:	0242      	lsls	r2, r0, #9
 8000c0c:	bf06      	itte	eq
 8000c0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c12:	ea90 0f01 	teqeq	r0, r1
 8000c16:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_ui2f>:
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	e004      	b.n	8000c2c <__aeabi_i2f+0x8>
 8000c22:	bf00      	nop

08000c24 <__aeabi_i2f>:
 8000c24:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c28:	bf48      	it	mi
 8000c2a:	4240      	negmi	r0, r0
 8000c2c:	ea5f 0c00 	movs.w	ip, r0
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c38:	4601      	mov	r1, r0
 8000c3a:	f04f 0000 	mov.w	r0, #0
 8000c3e:	e01c      	b.n	8000c7a <__aeabi_l2f+0x2a>

08000c40 <__aeabi_ul2f>:
 8000c40:	ea50 0201 	orrs.w	r2, r0, r1
 8000c44:	bf08      	it	eq
 8000c46:	4770      	bxeq	lr
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e00a      	b.n	8000c64 <__aeabi_l2f+0x14>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_l2f>:
 8000c50:	ea50 0201 	orrs.w	r2, r0, r1
 8000c54:	bf08      	it	eq
 8000c56:	4770      	bxeq	lr
 8000c58:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c5c:	d502      	bpl.n	8000c64 <__aeabi_l2f+0x14>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	ea5f 0c01 	movs.w	ip, r1
 8000c68:	bf02      	ittt	eq
 8000c6a:	4684      	moveq	ip, r0
 8000c6c:	4601      	moveq	r1, r0
 8000c6e:	2000      	moveq	r0, #0
 8000c70:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c74:	bf08      	it	eq
 8000c76:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7e:	fabc f28c 	clz	r2, ip
 8000c82:	3a08      	subs	r2, #8
 8000c84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c88:	db10      	blt.n	8000cac <__aeabi_l2f+0x5c>
 8000c8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8e:	4463      	add	r3, ip
 8000c90:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c94:	f1c2 0220 	rsb	r2, r2, #32
 8000c98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca0:	eb43 0002 	adc.w	r0, r3, r2
 8000ca4:	bf08      	it	eq
 8000ca6:	f020 0001 	biceq.w	r0, r0, #1
 8000caa:	4770      	bx	lr
 8000cac:	f102 0220 	add.w	r2, r2, #32
 8000cb0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb4:	f1c2 0220 	rsb	r2, r2, #32
 8000cb8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cbc:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc0:	eb43 0002 	adc.w	r0, r3, r2
 8000cc4:	bf08      	it	eq
 8000cc6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_fmul>:
 8000ccc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd4:	bf1e      	ittt	ne
 8000cd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cda:	ea92 0f0c 	teqne	r2, ip
 8000cde:	ea93 0f0c 	teqne	r3, ip
 8000ce2:	d06f      	beq.n	8000dc4 <__aeabi_fmul+0xf8>
 8000ce4:	441a      	add	r2, r3
 8000ce6:	ea80 0c01 	eor.w	ip, r0, r1
 8000cea:	0240      	lsls	r0, r0, #9
 8000cec:	bf18      	it	ne
 8000cee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cf2:	d01e      	beq.n	8000d32 <__aeabi_fmul+0x66>
 8000cf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cf8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cfc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d00:	fba0 3101 	umull	r3, r1, r0, r1
 8000d04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d08:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d0c:	bf3e      	ittt	cc
 8000d0e:	0049      	lslcc	r1, r1, #1
 8000d10:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d14:	005b      	lslcc	r3, r3, #1
 8000d16:	ea40 0001 	orr.w	r0, r0, r1
 8000d1a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d1e:	2afd      	cmp	r2, #253	; 0xfd
 8000d20:	d81d      	bhi.n	8000d5e <__aeabi_fmul+0x92>
 8000d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2a:	bf08      	it	eq
 8000d2c:	f020 0001 	biceq.w	r0, r0, #1
 8000d30:	4770      	bx	lr
 8000d32:	f090 0f00 	teq	r0, #0
 8000d36:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d3a:	bf08      	it	eq
 8000d3c:	0249      	lsleq	r1, r1, #9
 8000d3e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d42:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d46:	3a7f      	subs	r2, #127	; 0x7f
 8000d48:	bfc2      	ittt	gt
 8000d4a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d4e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d52:	4770      	bxgt	lr
 8000d54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d58:	f04f 0300 	mov.w	r3, #0
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	dc5d      	bgt.n	8000e1c <__aeabi_fmul+0x150>
 8000d60:	f112 0f19 	cmn.w	r2, #25
 8000d64:	bfdc      	itt	le
 8000d66:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d6a:	4770      	bxle	lr
 8000d6c:	f1c2 0200 	rsb	r2, r2, #0
 8000d70:	0041      	lsls	r1, r0, #1
 8000d72:	fa21 f102 	lsr.w	r1, r1, r2
 8000d76:	f1c2 0220 	rsb	r2, r2, #32
 8000d7a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d82:	f140 0000 	adc.w	r0, r0, #0
 8000d86:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d8a:	bf08      	it	eq
 8000d8c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d90:	4770      	bx	lr
 8000d92:	f092 0f00 	teq	r2, #0
 8000d96:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d9a:	bf02      	ittt	eq
 8000d9c:	0040      	lsleq	r0, r0, #1
 8000d9e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000da2:	3a01      	subeq	r2, #1
 8000da4:	d0f9      	beq.n	8000d9a <__aeabi_fmul+0xce>
 8000da6:	ea40 000c 	orr.w	r0, r0, ip
 8000daa:	f093 0f00 	teq	r3, #0
 8000dae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0049      	lsleq	r1, r1, #1
 8000db6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dba:	3b01      	subeq	r3, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xe6>
 8000dbe:	ea41 010c 	orr.w	r1, r1, ip
 8000dc2:	e78f      	b.n	8000ce4 <__aeabi_fmul+0x18>
 8000dc4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc8:	ea92 0f0c 	teq	r2, ip
 8000dcc:	bf18      	it	ne
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d00a      	beq.n	8000dea <__aeabi_fmul+0x11e>
 8000dd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd8:	bf18      	it	ne
 8000dda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	d1d8      	bne.n	8000d92 <__aeabi_fmul+0xc6>
 8000de0:	ea80 0001 	eor.w	r0, r0, r1
 8000de4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	bf17      	itett	ne
 8000df0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000df4:	4608      	moveq	r0, r1
 8000df6:	f091 0f00 	teqne	r1, #0
 8000dfa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dfe:	d014      	beq.n	8000e2a <__aeabi_fmul+0x15e>
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d101      	bne.n	8000e0a <__aeabi_fmul+0x13e>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	d10f      	bne.n	8000e2a <__aeabi_fmul+0x15e>
 8000e0a:	ea93 0f0c 	teq	r3, ip
 8000e0e:	d103      	bne.n	8000e18 <__aeabi_fmul+0x14c>
 8000e10:	024b      	lsls	r3, r1, #9
 8000e12:	bf18      	it	ne
 8000e14:	4608      	movne	r0, r1
 8000e16:	d108      	bne.n	8000e2a <__aeabi_fmul+0x15e>
 8000e18:	ea80 0001 	eor.w	r0, r0, r1
 8000e1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e28:	4770      	bx	lr
 8000e2a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_fdiv>:
 8000e34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e3c:	bf1e      	ittt	ne
 8000e3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e42:	ea92 0f0c 	teqne	r2, ip
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d069      	beq.n	8000f20 <__aeabi_fdiv+0xec>
 8000e4c:	eba2 0203 	sub.w	r2, r2, r3
 8000e50:	ea80 0c01 	eor.w	ip, r0, r1
 8000e54:	0249      	lsls	r1, r1, #9
 8000e56:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e5a:	d037      	beq.n	8000ecc <__aeabi_fdiv+0x98>
 8000e5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e60:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e64:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	bf38      	it	cc
 8000e70:	005b      	lslcc	r3, r3, #1
 8000e72:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e76:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	bf24      	itt	cs
 8000e7e:	1a5b      	subcs	r3, r3, r1
 8000e80:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e84:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e88:	bf24      	itt	cs
 8000e8a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e8e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e92:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e96:	bf24      	itt	cs
 8000e98:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ea4:	bf24      	itt	cs
 8000ea6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eaa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eae:	011b      	lsls	r3, r3, #4
 8000eb0:	bf18      	it	ne
 8000eb2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eb6:	d1e0      	bne.n	8000e7a <__aeabi_fdiv+0x46>
 8000eb8:	2afd      	cmp	r2, #253	; 0xfd
 8000eba:	f63f af50 	bhi.w	8000d5e <__aeabi_fmul+0x92>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed4:	327f      	adds	r2, #127	; 0x7f
 8000ed6:	bfc2      	ittt	gt
 8000ed8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000edc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee0:	4770      	bxgt	lr
 8000ee2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee6:	f04f 0300 	mov.w	r3, #0
 8000eea:	3a01      	subs	r2, #1
 8000eec:	e737      	b.n	8000d5e <__aeabi_fmul+0x92>
 8000eee:	f092 0f00 	teq	r2, #0
 8000ef2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ef6:	bf02      	ittt	eq
 8000ef8:	0040      	lsleq	r0, r0, #1
 8000efa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000efe:	3a01      	subeq	r2, #1
 8000f00:	d0f9      	beq.n	8000ef6 <__aeabi_fdiv+0xc2>
 8000f02:	ea40 000c 	orr.w	r0, r0, ip
 8000f06:	f093 0f00 	teq	r3, #0
 8000f0a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0049      	lsleq	r1, r1, #1
 8000f12:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f16:	3b01      	subeq	r3, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xda>
 8000f1a:	ea41 010c 	orr.w	r1, r1, ip
 8000f1e:	e795      	b.n	8000e4c <__aeabi_fdiv+0x18>
 8000f20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f24:	ea92 0f0c 	teq	r2, ip
 8000f28:	d108      	bne.n	8000f3c <__aeabi_fdiv+0x108>
 8000f2a:	0242      	lsls	r2, r0, #9
 8000f2c:	f47f af7d 	bne.w	8000e2a <__aeabi_fmul+0x15e>
 8000f30:	ea93 0f0c 	teq	r3, ip
 8000f34:	f47f af70 	bne.w	8000e18 <__aeabi_fmul+0x14c>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e776      	b.n	8000e2a <__aeabi_fmul+0x15e>
 8000f3c:	ea93 0f0c 	teq	r3, ip
 8000f40:	d104      	bne.n	8000f4c <__aeabi_fdiv+0x118>
 8000f42:	024b      	lsls	r3, r1, #9
 8000f44:	f43f af4c 	beq.w	8000de0 <__aeabi_fmul+0x114>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e76e      	b.n	8000e2a <__aeabi_fmul+0x15e>
 8000f4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f50:	bf18      	it	ne
 8000f52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f56:	d1ca      	bne.n	8000eee <__aeabi_fdiv+0xba>
 8000f58:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f5c:	f47f af5c 	bne.w	8000e18 <__aeabi_fmul+0x14c>
 8000f60:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f64:	f47f af3c 	bne.w	8000de0 <__aeabi_fmul+0x114>
 8000f68:	e75f      	b.n	8000e2a <__aeabi_fmul+0x15e>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_f2iz>:
 8000f6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f70:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f74:	d30f      	bcc.n	8000f96 <__aeabi_f2iz+0x2a>
 8000f76:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f7a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f7e:	d90d      	bls.n	8000f9c <__aeabi_f2iz+0x30>
 8000f80:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f88:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f8c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f90:	bf18      	it	ne
 8000f92:	4240      	negne	r0, r0
 8000f94:	4770      	bx	lr
 8000f96:	f04f 0000 	mov.w	r0, #0
 8000f9a:	4770      	bx	lr
 8000f9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fa0:	d101      	bne.n	8000fa6 <__aeabi_f2iz+0x3a>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	d105      	bne.n	8000fb2 <__aeabi_f2iz+0x46>
 8000fa6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000faa:	bf08      	it	eq
 8000fac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fb0:	4770      	bx	lr
 8000fb2:	f04f 0000 	mov.w	r0, #0
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_InitTick+0x3c>)
{
 8000fbc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fbe:	7818      	ldrb	r0, [r3, #0]
 8000fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <HAL_InitTick+0x40>)
 8000fca:	6810      	ldr	r0, [r2, #0]
 8000fcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fd0:	f000 f89e 	bl	8001110 <HAL_SYSTICK_Config>
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	b958      	cbnz	r0, 8000ff0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd8:	2d0f      	cmp	r5, #15
 8000fda:	d809      	bhi.n	8000ff0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fdc:	4602      	mov	r2, r0
 8000fde:	4629      	mov	r1, r5
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f000 f854 	bl	8001090 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <HAL_InitTick+0x44>)
 8000fea:	4620      	mov	r0, r4
 8000fec:	601d      	str	r5, [r3, #0]
 8000fee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ff0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ff2:	bd38      	pop	{r3, r4, r5, pc}
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000010 	.word	0x20000010
 8000ffc:	20000004 	.word	0x20000004

08001000 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_Init+0x20>)
{
 8001002:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001006:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100e:	f000 f82d 	bl	800106c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff ffd0 	bl	8000fb8 <HAL_InitTick>
  HAL_MspInit();
 8001018:	f002 fbf0 	bl	80037fc <HAL_MspInit>
}
 800101c:	2000      	movs	r0, #0
 800101e:	bd08      	pop	{r3, pc}
 8001020:	40022000 	.word	0x40022000

08001024 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001024:	4a03      	ldr	r2, [pc, #12]	; (8001034 <HAL_IncTick+0x10>)
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <HAL_IncTick+0x14>)
 8001028:	6811      	ldr	r1, [r2, #0]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	440b      	add	r3, r1
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200004a0 	.word	0x200004a0
 8001038:	20000000 	.word	0x20000000

0800103c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800103c:	4b01      	ldr	r3, [pc, #4]	; (8001044 <HAL_GetTick+0x8>)
 800103e:	6818      	ldr	r0, [r3, #0]
}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	200004a0 	.word	0x200004a0

08001048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001048:	b538      	push	{r3, r4, r5, lr}
 800104a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff fff6 	bl	800103c <HAL_GetTick>
 8001050:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001054:	bf1e      	ittt	ne
 8001056:	4b04      	ldrne	r3, [pc, #16]	; (8001068 <HAL_Delay+0x20>)
 8001058:	781b      	ldrbne	r3, [r3, #0]
 800105a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800105c:	f7ff ffee 	bl	800103c <HAL_GetTick>
 8001060:	1b40      	subs	r0, r0, r5
 8001062:	4284      	cmp	r4, r0
 8001064:	d8fa      	bhi.n	800105c <HAL_Delay+0x14>
  {
  }
}
 8001066:	bd38      	pop	{r3, r4, r5, pc}
 8001068:	20000000 	.word	0x20000000

0800106c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800106e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001072:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800107a:	041b      	lsls	r3, r3, #16
 800107c:	0c1b      	lsrs	r3, r3, #16
 800107e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001086:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001088:	60d3      	str	r3, [r2, #12]
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001092:	b530      	push	{r4, r5, lr}
 8001094:	68dc      	ldr	r4, [r3, #12]
 8001096:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	bf28      	it	cs
 80010a4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ac:	bf98      	it	ls
 80010ae:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	fa05 f303 	lsl.w	r3, r5, r3
 80010b4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b8:	bf88      	it	hi
 80010ba:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4019      	ands	r1, r3
 80010be:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	fa05 f404 	lsl.w	r4, r5, r4
 80010c4:	3c01      	subs	r4, #1
 80010c6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80010c8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ca:	ea42 0201 	orr.w	r2, r2, r1
 80010ce:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	bfaf      	iteee	ge
 80010d4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	4b06      	ldrlt	r3, [pc, #24]	; (80010f4 <HAL_NVIC_SetPriority+0x64>)
 80010da:	f000 000f 	andlt.w	r0, r0, #15
 80010de:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	bfa5      	ittet	ge
 80010e2:	b2d2      	uxtbge	r2, r2
 80010e4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80010ee:	bd30      	pop	{r4, r5, pc}
 80010f0:	e000ed00 	.word	0xe000ed00
 80010f4:	e000ed14 	.word	0xe000ed14

080010f8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80010f8:	2301      	movs	r3, #1
 80010fa:	0942      	lsrs	r2, r0, #5
 80010fc:	f000 001f 	and.w	r0, r0, #31
 8001100:	fa03 f000 	lsl.w	r0, r3, r0
 8001104:	4b01      	ldr	r3, [pc, #4]	; (800110c <HAL_NVIC_EnableIRQ+0x14>)
 8001106:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100

08001110 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	3801      	subs	r0, #1
 8001112:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001116:	d20a      	bcs.n	800112e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001126:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001140:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001142:	4616      	mov	r6, r2
 8001144:	4b65      	ldr	r3, [pc, #404]	; (80012dc <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001146:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80012ec <HAL_GPIO_Init+0x1b0>
 800114a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80012f0 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800114e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001152:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001154:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001158:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800115c:	45a0      	cmp	r8, r4
 800115e:	d17f      	bne.n	8001260 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001160:	684d      	ldr	r5, [r1, #4]
 8001162:	2d12      	cmp	r5, #18
 8001164:	f000 80af 	beq.w	80012c6 <HAL_GPIO_Init+0x18a>
 8001168:	f200 8088 	bhi.w	800127c <HAL_GPIO_Init+0x140>
 800116c:	2d02      	cmp	r5, #2
 800116e:	f000 80a7 	beq.w	80012c0 <HAL_GPIO_Init+0x184>
 8001172:	d87c      	bhi.n	800126e <HAL_GPIO_Init+0x132>
 8001174:	2d00      	cmp	r5, #0
 8001176:	f000 808e 	beq.w	8001296 <HAL_GPIO_Init+0x15a>
 800117a:	2d01      	cmp	r5, #1
 800117c:	f000 809e 	beq.w	80012bc <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001180:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001184:	2cff      	cmp	r4, #255	; 0xff
 8001186:	bf93      	iteet	ls
 8001188:	4682      	movls	sl, r0
 800118a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800118e:	3d08      	subhi	r5, #8
 8001190:	f8d0 b000 	ldrls.w	fp, [r0]
 8001194:	bf92      	itee	ls
 8001196:	00b5      	lslls	r5, r6, #2
 8001198:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800119c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800119e:	fa09 f805 	lsl.w	r8, r9, r5
 80011a2:	ea2b 0808 	bic.w	r8, fp, r8
 80011a6:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011aa:	bf88      	it	hi
 80011ac:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011b0:	ea48 0505 	orr.w	r5, r8, r5
 80011b4:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80011bc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80011c0:	d04e      	beq.n	8001260 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011c2:	4d47      	ldr	r5, [pc, #284]	; (80012e0 <HAL_GPIO_Init+0x1a4>)
 80011c4:	4f46      	ldr	r7, [pc, #280]	; (80012e0 <HAL_GPIO_Init+0x1a4>)
 80011c6:	69ad      	ldr	r5, [r5, #24]
 80011c8:	f026 0803 	bic.w	r8, r6, #3
 80011cc:	f045 0501 	orr.w	r5, r5, #1
 80011d0:	61bd      	str	r5, [r7, #24]
 80011d2:	69bd      	ldr	r5, [r7, #24]
 80011d4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80011d8:	f005 0501 	and.w	r5, r5, #1
 80011dc:	9501      	str	r5, [sp, #4]
 80011de:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80011e2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011e6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80011e8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80011ec:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80011f0:	fa09 f90b 	lsl.w	r9, r9, fp
 80011f4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f8:	4d3a      	ldr	r5, [pc, #232]	; (80012e4 <HAL_GPIO_Init+0x1a8>)
 80011fa:	42a8      	cmp	r0, r5
 80011fc:	d068      	beq.n	80012d0 <HAL_GPIO_Init+0x194>
 80011fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001202:	42a8      	cmp	r0, r5
 8001204:	d066      	beq.n	80012d4 <HAL_GPIO_Init+0x198>
 8001206:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800120a:	42a8      	cmp	r0, r5
 800120c:	d064      	beq.n	80012d8 <HAL_GPIO_Init+0x19c>
 800120e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001212:	42a8      	cmp	r0, r5
 8001214:	bf0c      	ite	eq
 8001216:	2503      	moveq	r5, #3
 8001218:	2504      	movne	r5, #4
 800121a:	fa05 f50b 	lsl.w	r5, r5, fp
 800121e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001222:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001226:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001228:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800122c:	bf14      	ite	ne
 800122e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001230:	43a5      	biceq	r5, r4
 8001232:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001234:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001236:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800123a:	bf14      	ite	ne
 800123c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800123e:	43a5      	biceq	r5, r4
 8001240:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001242:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001244:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001248:	bf14      	ite	ne
 800124a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800124c:	43a5      	biceq	r5, r4
 800124e:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001250:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001252:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001256:	bf14      	ite	ne
 8001258:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800125a:	ea25 0404 	biceq.w	r4, r5, r4
 800125e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001260:	3601      	adds	r6, #1
 8001262:	2e10      	cmp	r6, #16
 8001264:	f47f af73 	bne.w	800114e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001268:	b003      	add	sp, #12
 800126a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800126e:	2d03      	cmp	r5, #3
 8001270:	d022      	beq.n	80012b8 <HAL_GPIO_Init+0x17c>
 8001272:	2d11      	cmp	r5, #17
 8001274:	d184      	bne.n	8001180 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001276:	68ca      	ldr	r2, [r1, #12]
 8001278:	3204      	adds	r2, #4
          break;
 800127a:	e781      	b.n	8001180 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800127c:	4f1a      	ldr	r7, [pc, #104]	; (80012e8 <HAL_GPIO_Init+0x1ac>)
 800127e:	42bd      	cmp	r5, r7
 8001280:	d009      	beq.n	8001296 <HAL_GPIO_Init+0x15a>
 8001282:	d812      	bhi.n	80012aa <HAL_GPIO_Init+0x16e>
 8001284:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80012f4 <HAL_GPIO_Init+0x1b8>
 8001288:	454d      	cmp	r5, r9
 800128a:	d004      	beq.n	8001296 <HAL_GPIO_Init+0x15a>
 800128c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001290:	454d      	cmp	r5, r9
 8001292:	f47f af75 	bne.w	8001180 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001296:	688a      	ldr	r2, [r1, #8]
 8001298:	b1c2      	cbz	r2, 80012cc <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800129a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800129c:	bf0c      	ite	eq
 800129e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80012a2:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a6:	2208      	movs	r2, #8
 80012a8:	e76a      	b.n	8001180 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80012aa:	4575      	cmp	r5, lr
 80012ac:	d0f3      	beq.n	8001296 <HAL_GPIO_Init+0x15a>
 80012ae:	4565      	cmp	r5, ip
 80012b0:	d0f1      	beq.n	8001296 <HAL_GPIO_Init+0x15a>
 80012b2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80012f8 <HAL_GPIO_Init+0x1bc>
 80012b6:	e7eb      	b.n	8001290 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012b8:	2200      	movs	r2, #0
 80012ba:	e761      	b.n	8001180 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012bc:	68ca      	ldr	r2, [r1, #12]
          break;
 80012be:	e75f      	b.n	8001180 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012c0:	68ca      	ldr	r2, [r1, #12]
 80012c2:	3208      	adds	r2, #8
          break;
 80012c4:	e75c      	b.n	8001180 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012c6:	68ca      	ldr	r2, [r1, #12]
 80012c8:	320c      	adds	r2, #12
          break;
 80012ca:	e759      	b.n	8001180 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012cc:	2204      	movs	r2, #4
 80012ce:	e757      	b.n	8001180 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d0:	2500      	movs	r5, #0
 80012d2:	e7a2      	b.n	800121a <HAL_GPIO_Init+0xde>
 80012d4:	2501      	movs	r5, #1
 80012d6:	e7a0      	b.n	800121a <HAL_GPIO_Init+0xde>
 80012d8:	2502      	movs	r5, #2
 80012da:	e79e      	b.n	800121a <HAL_GPIO_Init+0xde>
 80012dc:	40010400 	.word	0x40010400
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010800 	.word	0x40010800
 80012e8:	10210000 	.word	0x10210000
 80012ec:	10310000 	.word	0x10310000
 80012f0:	10320000 	.word	0x10320000
 80012f4:	10110000 	.word	0x10110000
 80012f8:	10220000 	.word	0x10220000

080012fc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012fc:	6802      	ldr	r2, [r0, #0]
 80012fe:	6953      	ldr	r3, [r2, #20]
 8001300:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001304:	d00d      	beq.n	8001322 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001306:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800130a:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800130c:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800130e:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001310:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001312:	2300      	movs	r3, #0
 8001314:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001316:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 800131a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800131e:	2001      	movs	r0, #1
 8001320:	4770      	bx	lr
  }
  return HAL_OK;
 8001322:	4618      	mov	r0, r3
}
 8001324:	4770      	bx	lr

08001326 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001326:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800132a:	4604      	mov	r4, r0
 800132c:	4617      	mov	r7, r2
 800132e:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001330:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001334:	b28e      	uxth	r6, r1
 8001336:	6825      	ldr	r5, [r4, #0]
 8001338:	f1b8 0f01 	cmp.w	r8, #1
 800133c:	bf0c      	ite	eq
 800133e:	696b      	ldreq	r3, [r5, #20]
 8001340:	69ab      	ldrne	r3, [r5, #24]
 8001342:	ea36 0303 	bics.w	r3, r6, r3
 8001346:	bf14      	ite	ne
 8001348:	2001      	movne	r0, #1
 800134a:	2000      	moveq	r0, #0
 800134c:	b908      	cbnz	r0, 8001352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800134e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001352:	696b      	ldr	r3, [r5, #20]
 8001354:	055a      	lsls	r2, r3, #21
 8001356:	d512      	bpl.n	800137e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001358:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 800135a:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800135c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001360:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001362:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001366:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001368:	2304      	movs	r3, #4
 800136a:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800136c:	2300      	movs	r3, #0
      return HAL_ERROR;
 800136e:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8001370:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001372:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001376:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 800137a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800137e:	1c7b      	adds	r3, r7, #1
 8001380:	d0d9      	beq.n	8001336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001382:	b94f      	cbnz	r7, 8001398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001384:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001386:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001388:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800138a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800138e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001392:	2003      	movs	r0, #3
 8001394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001398:	f7ff fe50 	bl	800103c <HAL_GetTick>
 800139c:	eba0 0009 	sub.w	r0, r0, r9
 80013a0:	4287      	cmp	r7, r0
 80013a2:	d2c8      	bcs.n	8001336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80013a4:	e7ee      	b.n	8001384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080013a6 <I2C_WaitOnFlagUntilTimeout>:
{
 80013a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013aa:	4604      	mov	r4, r0
 80013ac:	4690      	mov	r8, r2
 80013ae:	461f      	mov	r7, r3
 80013b0:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80013b2:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80013b6:	b28d      	uxth	r5, r1
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	f1b9 0f01 	cmp.w	r9, #1
 80013be:	bf0c      	ite	eq
 80013c0:	695b      	ldreq	r3, [r3, #20]
 80013c2:	699b      	ldrne	r3, [r3, #24]
 80013c4:	ea35 0303 	bics.w	r3, r5, r3
 80013c8:	bf0c      	ite	eq
 80013ca:	2301      	moveq	r3, #1
 80013cc:	2300      	movne	r3, #0
 80013ce:	4543      	cmp	r3, r8
 80013d0:	d002      	beq.n	80013d8 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80013d2:	2000      	movs	r0, #0
}
 80013d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80013d8:	1c7b      	adds	r3, r7, #1
 80013da:	d0ed      	beq.n	80013b8 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80013dc:	b95f      	cbnz	r7, 80013f6 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80013de:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80013e0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80013e2:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80013e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80013e8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80013ec:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80013f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80013f6:	f7ff fe21 	bl	800103c <HAL_GetTick>
 80013fa:	1b80      	subs	r0, r0, r6
 80013fc:	4287      	cmp	r7, r0
 80013fe:	d2db      	bcs.n	80013b8 <I2C_WaitOnFlagUntilTimeout+0x12>
 8001400:	e7ed      	b.n	80013de <I2C_WaitOnFlagUntilTimeout+0x38>

08001402 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001402:	b570      	push	{r4, r5, r6, lr}
 8001404:	4604      	mov	r4, r0
 8001406:	460d      	mov	r5, r1
 8001408:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	061b      	lsls	r3, r3, #24
 8001410:	d501      	bpl.n	8001416 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001412:	2000      	movs	r0, #0
 8001414:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001416:	4620      	mov	r0, r4
 8001418:	f7ff ff70 	bl	80012fc <I2C_IsAcknowledgeFailed>
 800141c:	b9a8      	cbnz	r0, 800144a <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800141e:	1c6a      	adds	r2, r5, #1
 8001420:	d0f3      	beq.n	800140a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001422:	b965      	cbnz	r5, 800143e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001424:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001426:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001428:	f043 0320 	orr.w	r3, r3, #32
 800142c:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800142e:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001430:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001432:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001434:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001438:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800143c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800143e:	f7ff fdfd 	bl	800103c <HAL_GetTick>
 8001442:	1b80      	subs	r0, r0, r6
 8001444:	4285      	cmp	r5, r0
 8001446:	d2e0      	bcs.n	800140a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001448:	e7ec      	b.n	8001424 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800144a:	2001      	movs	r0, #1
}
 800144c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001450 <I2C_RequestMemoryWrite>:
{
 8001450:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001454:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001456:	6802      	ldr	r2, [r0, #0]
{
 8001458:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800145a:	6813      	ldr	r3, [r2, #0]
{
 800145c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800145e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001462:	6013      	str	r3, [r2, #0]
{
 8001464:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001466:	9600      	str	r6, [sp, #0]
 8001468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800146a:	2200      	movs	r2, #0
 800146c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001470:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001472:	f7ff ff98 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 8001476:	b968      	cbnz	r0, 8001494 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800147e:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001482:	4633      	mov	r3, r6
 8001484:	491a      	ldr	r1, [pc, #104]	; (80014f0 <I2C_RequestMemoryWrite+0xa0>)
 8001486:	4620      	mov	r0, r4
 8001488:	f7ff ff4d 	bl	8001326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800148c:	b130      	cbz	r0, 800149c <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800148e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001490:	2b04      	cmp	r3, #4
 8001492:	d018      	beq.n	80014c6 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8001494:	2003      	movs	r0, #3
}
 8001496:	b004      	add	sp, #16
 8001498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	9003      	str	r0, [sp, #12]
 80014a0:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014a2:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014a4:	9203      	str	r2, [sp, #12]
 80014a6:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014a8:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014aa:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014ac:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014ae:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014b0:	f7ff ffa7 	bl	8001402 <I2C_WaitOnTXEFlagUntilTimeout>
 80014b4:	b148      	cbz	r0, 80014ca <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d1eb      	bne.n	8001494 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80014bc:	6822      	ldr	r2, [r4, #0]
 80014be:	6813      	ldr	r3, [r2, #0]
 80014c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c4:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80014c6:	2001      	movs	r0, #1
 80014c8:	e7e5      	b.n	8001496 <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014ca:	f1b8 0f01 	cmp.w	r8, #1
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	d102      	bne.n	80014d8 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80014d2:	b2ed      	uxtb	r5, r5
 80014d4:	611d      	str	r5, [r3, #16]
 80014d6:	e7de      	b.n	8001496 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80014d8:	0a2a      	lsrs	r2, r5, #8
 80014da:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80014de:	4632      	mov	r2, r6
 80014e0:	4620      	mov	r0, r4
 80014e2:	f7ff ff8e 	bl	8001402 <I2C_WaitOnTXEFlagUntilTimeout>
 80014e6:	2800      	cmp	r0, #0
 80014e8:	d1e5      	bne.n	80014b6 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	e7f1      	b.n	80014d2 <I2C_RequestMemoryWrite+0x82>
 80014ee:	bf00      	nop
 80014f0:	00010002 	.word	0x00010002

080014f4 <I2C_RequestMemoryRead>:
{
 80014f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80014f8:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80014fa:	6803      	ldr	r3, [r0, #0]
{
 80014fc:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80014fe:	681a      	ldr	r2, [r3, #0]
{
 8001500:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001502:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001508:	681a      	ldr	r2, [r3, #0]
{
 800150a:	460f      	mov	r7, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800150c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001510:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001512:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001516:	9500      	str	r5, [sp, #0]
 8001518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800151a:	2200      	movs	r2, #0
{
 800151c:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800151e:	f7ff ff42 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 8001522:	b980      	cbnz	r0, 8001546 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	b2ff      	uxtb	r7, r7
 8001528:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 800152c:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800152e:	492d      	ldr	r1, [pc, #180]	; (80015e4 <I2C_RequestMemoryRead+0xf0>)
 8001530:	462b      	mov	r3, r5
 8001532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff fef6 	bl	8001326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800153a:	b140      	cbz	r0, 800154e <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800153c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800153e:	2b04      	cmp	r3, #4
 8001540:	d101      	bne.n	8001546 <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 8001542:	2001      	movs	r0, #1
 8001544:	e000      	b.n	8001548 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8001546:	2003      	movs	r0, #3
}
 8001548:	b004      	add	sp, #16
 800154a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	9003      	str	r0, [sp, #12]
 8001552:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001554:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001556:	9203      	str	r2, [sp, #12]
 8001558:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800155a:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800155c:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800155e:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001560:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001562:	f7ff ff4e 	bl	8001402 <I2C_WaitOnTXEFlagUntilTimeout>
 8001566:	b140      	cbz	r0, 800157a <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001568:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800156a:	2b04      	cmp	r3, #4
 800156c:	d1eb      	bne.n	8001546 <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800156e:	6822      	ldr	r2, [r4, #0]
 8001570:	6813      	ldr	r3, [r2, #0]
 8001572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e7e3      	b.n	8001542 <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800157a:	f1b8 0f01 	cmp.w	r8, #1
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	d124      	bne.n	80015cc <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001582:	b2f6      	uxtb	r6, r6
 8001584:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001586:	462a      	mov	r2, r5
 8001588:	990a      	ldr	r1, [sp, #40]	; 0x28
 800158a:	4620      	mov	r0, r4
 800158c:	f7ff ff39 	bl	8001402 <I2C_WaitOnTXEFlagUntilTimeout>
 8001590:	4602      	mov	r2, r0
 8001592:	2800      	cmp	r0, #0
 8001594:	d1e8      	bne.n	8001568 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001596:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001598:	4620      	mov	r0, r4
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800159a:	680b      	ldr	r3, [r1, #0]
 800159c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a0:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015a2:	9500      	str	r5, [sp, #0]
 80015a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015aa:	f7ff fefc 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 80015ae:	2800      	cmp	r0, #0
 80015b0:	d1c9      	bne.n	8001546 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	f047 0701 	orr.w	r7, r7, #1
 80015b8:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80015bc:	462b      	mov	r3, r5
 80015be:	4909      	ldr	r1, [pc, #36]	; (80015e4 <I2C_RequestMemoryRead+0xf0>)
 80015c0:	4620      	mov	r0, r4
 80015c2:	f7ff feb0 	bl	8001326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015c6:	2800      	cmp	r0, #0
 80015c8:	d1b8      	bne.n	800153c <I2C_RequestMemoryRead+0x48>
 80015ca:	e7bd      	b.n	8001548 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80015cc:	0a32      	lsrs	r2, r6, #8
 80015ce:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80015d2:	462a      	mov	r2, r5
 80015d4:	4620      	mov	r0, r4
 80015d6:	f7ff ff14 	bl	8001402 <I2C_WaitOnTXEFlagUntilTimeout>
 80015da:	2800      	cmp	r0, #0
 80015dc:	d1c4      	bne.n	8001568 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	e7cf      	b.n	8001582 <I2C_RequestMemoryRead+0x8e>
 80015e2:	bf00      	nop
 80015e4:	00010002 	.word	0x00010002

080015e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 80015e8:	b570      	push	{r4, r5, r6, lr}
 80015ea:	4604      	mov	r4, r0
 80015ec:	460d      	mov	r5, r1
 80015ee:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80015f0:	6820      	ldr	r0, [r4, #0]
 80015f2:	6943      	ldr	r3, [r0, #20]
 80015f4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80015f8:	d001      	beq.n	80015fe <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80015fa:	2000      	movs	r0, #0
}
 80015fc:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80015fe:	6942      	ldr	r2, [r0, #20]
 8001600:	06d2      	lsls	r2, r2, #27
 8001602:	d50b      	bpl.n	800161c <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001604:	f06f 0210 	mvn.w	r2, #16
 8001608:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 800160a:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800160c:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800160e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001612:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001614:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001616:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 800161a:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800161c:	b95d      	cbnz	r5, 8001636 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800161e:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001620:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001622:	f043 0320 	orr.w	r3, r3, #32
 8001626:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001628:	2320      	movs	r3, #32
 800162a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 800162e:	2300      	movs	r3, #0
 8001630:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001634:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001636:	f7ff fd01 	bl	800103c <HAL_GetTick>
 800163a:	1b80      	subs	r0, r0, r6
 800163c:	4285      	cmp	r5, r0
 800163e:	d2d7      	bcs.n	80015f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001640:	e7ed      	b.n	800161e <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001642 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001642:	b570      	push	{r4, r5, r6, lr}
 8001644:	4604      	mov	r4, r0
 8001646:	460d      	mov	r5, r1
 8001648:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	075b      	lsls	r3, r3, #29
 8001650:	d501      	bpl.n	8001656 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001652:	2000      	movs	r0, #0
 8001654:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001656:	4620      	mov	r0, r4
 8001658:	f7ff fe50 	bl	80012fc <I2C_IsAcknowledgeFailed>
 800165c:	b9a8      	cbnz	r0, 800168a <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800165e:	1c6a      	adds	r2, r5, #1
 8001660:	d0f3      	beq.n	800164a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001662:	b965      	cbnz	r5, 800167e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001664:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001666:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001668:	f043 0320 	orr.w	r3, r3, #32
 800166c:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800166e:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001670:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001672:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001674:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001678:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800167c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800167e:	f7ff fcdd 	bl	800103c <HAL_GetTick>
 8001682:	1b80      	subs	r0, r0, r6
 8001684:	4285      	cmp	r5, r0
 8001686:	d2e0      	bcs.n	800164a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001688:	e7ec      	b.n	8001664 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800168a:	2001      	movs	r0, #1
}
 800168c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001690 <HAL_I2C_Init>:
{
 8001690:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8001692:	4604      	mov	r4, r0
 8001694:	b908      	cbnz	r0, 800169a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001696:	2001      	movs	r0, #1
 8001698:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800169a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800169e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016a2:	b91b      	cbnz	r3, 80016ac <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80016a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80016a8:	f001 fe2a 	bl	8003300 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80016ac:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80016ae:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80016b4:	6813      	ldr	r3, [r2, #0]
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016bc:	f000 fe1e 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016c0:	6863      	ldr	r3, [r4, #4]
 80016c2:	4a2f      	ldr	r2, [pc, #188]	; (8001780 <HAL_I2C_Init+0xf0>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d830      	bhi.n	800172a <HAL_I2C_Init+0x9a>
 80016c8:	4a2e      	ldr	r2, [pc, #184]	; (8001784 <HAL_I2C_Init+0xf4>)
 80016ca:	4290      	cmp	r0, r2
 80016cc:	d9e3      	bls.n	8001696 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80016ce:	4a2e      	ldr	r2, [pc, #184]	; (8001788 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 80016d0:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80016d2:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 80016d6:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80016d8:	3201      	adds	r2, #1
 80016da:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80016dc:	4a28      	ldr	r2, [pc, #160]	; (8001780 <HAL_I2C_Init+0xf0>)
 80016de:	3801      	subs	r0, #1
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d832      	bhi.n	800174a <HAL_I2C_Init+0xba>
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80016ea:	1c43      	adds	r3, r0, #1
 80016ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	bf38      	it	cc
 80016f4:	2304      	movcc	r3, #4
 80016f6:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016f8:	6a22      	ldr	r2, [r4, #32]
 80016fa:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016fc:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001702:	68e2      	ldr	r2, [r4, #12]
 8001704:	6923      	ldr	r3, [r4, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800170a:	69a2      	ldr	r2, [r4, #24]
 800170c:	6963      	ldr	r3, [r4, #20]
 800170e:	4313      	orrs	r3, r2
 8001710:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001712:	680b      	ldr	r3, [r1, #0]
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800171a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800171c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800171e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001722:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001724:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001728:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800172a:	4a18      	ldr	r2, [pc, #96]	; (800178c <HAL_I2C_Init+0xfc>)
 800172c:	4290      	cmp	r0, r2
 800172e:	d9b2      	bls.n	8001696 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001730:	4d15      	ldr	r5, [pc, #84]	; (8001788 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001732:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001736:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 800173a:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800173c:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 800173e:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001740:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001744:	fbb2 f2f5 	udiv	r2, r2, r5
 8001748:	e7c6      	b.n	80016d8 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800174a:	68a2      	ldr	r2, [r4, #8]
 800174c:	b952      	cbnz	r2, 8001764 <HAL_I2C_Init+0xd4>
 800174e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001752:	fbb0 f0f3 	udiv	r0, r0, r3
 8001756:	1c43      	adds	r3, r0, #1
 8001758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175c:	b16b      	cbz	r3, 800177a <HAL_I2C_Init+0xea>
 800175e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001762:	e7c8      	b.n	80016f6 <HAL_I2C_Init+0x66>
 8001764:	2219      	movs	r2, #25
 8001766:	4353      	muls	r3, r2
 8001768:	fbb0 f0f3 	udiv	r0, r0, r3
 800176c:	1c43      	adds	r3, r0, #1
 800176e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001772:	b113      	cbz	r3, 800177a <HAL_I2C_Init+0xea>
 8001774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001778:	e7bd      	b.n	80016f6 <HAL_I2C_Init+0x66>
 800177a:	2301      	movs	r3, #1
 800177c:	e7bb      	b.n	80016f6 <HAL_I2C_Init+0x66>
 800177e:	bf00      	nop
 8001780:	000186a0 	.word	0x000186a0
 8001784:	001e847f 	.word	0x001e847f
 8001788:	000f4240 	.word	0x000f4240
 800178c:	003d08ff 	.word	0x003d08ff

08001790 <HAL_I2C_Master_Transmit>:
{
 8001790:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001794:	4604      	mov	r4, r0
 8001796:	461f      	mov	r7, r3
 8001798:	460d      	mov	r5, r1
 800179a:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 800179c:	f7ff fc4e 	bl	800103c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80017a0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80017a4:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80017a6:	2b20      	cmp	r3, #32
 80017a8:	d004      	beq.n	80017b4 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80017aa:	2502      	movs	r5, #2
}
 80017ac:	4628      	mov	r0, r5
 80017ae:	b004      	add	sp, #16
 80017b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017b4:	9000      	str	r0, [sp, #0]
 80017b6:	2319      	movs	r3, #25
 80017b8:	2201      	movs	r2, #1
 80017ba:	495d      	ldr	r1, [pc, #372]	; (8001930 <HAL_I2C_Master_Transmit+0x1a0>)
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff fdf2 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 80017c2:	2800      	cmp	r0, #0
 80017c4:	d1f1      	bne.n	80017aa <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80017c6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d0ed      	beq.n	80017aa <HAL_I2C_Master_Transmit+0x1a>
 80017ce:	2301      	movs	r3, #1
 80017d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017d4:	6823      	ldr	r3, [r4, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80017da:	bf5e      	ittt	pl
 80017dc:	681a      	ldrpl	r2, [r3, #0]
 80017de:	f042 0201 	orrpl.w	r2, r2, #1
 80017e2:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ea:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017ec:	2221      	movs	r2, #33	; 0x21
 80017ee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017f2:	2210      	movs	r2, #16
 80017f4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f8:	2200      	movs	r2, #0
 80017fa:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017fc:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001800:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001802:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001804:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001806:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800180a:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800180c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800180e:	2a04      	cmp	r2, #4
 8001810:	d004      	beq.n	800181c <HAL_I2C_Master_Transmit+0x8c>
 8001812:	2a01      	cmp	r2, #1
 8001814:	d002      	beq.n	800181c <HAL_I2C_Master_Transmit+0x8c>
 8001816:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800181a:	d104      	bne.n	8001826 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	e002      	b.n	800182c <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001826:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001828:	2a12      	cmp	r2, #18
 800182a:	d0f7      	beq.n	800181c <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800182c:	9600      	str	r6, [sp, #0]
 800182e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001830:	2200      	movs	r2, #0
 8001832:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001836:	4620      	mov	r0, r4
 8001838:	f7ff fdb5 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 800183c:	bb28      	cbnz	r0, 800188a <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800183e:	6923      	ldr	r3, [r4, #16]
 8001840:	6822      	ldr	r2, [r4, #0]
 8001842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001846:	d112      	bne.n	800186e <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001848:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800184c:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800184e:	4633      	mov	r3, r6
 8001850:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001852:	4938      	ldr	r1, [pc, #224]	; (8001934 <HAL_I2C_Master_Transmit+0x1a4>)
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff fd66 	bl	8001326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800185a:	4605      	mov	r5, r0
 800185c:	b9a0      	cbnz	r0, 8001888 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800185e:	6823      	ldr	r3, [r4, #0]
 8001860:	9003      	str	r0, [sp, #12]
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	9203      	str	r2, [sp, #12]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	9303      	str	r3, [sp, #12]
 800186a:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 800186c:	e050      	b.n	8001910 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800186e:	11eb      	asrs	r3, r5, #7
 8001870:	f003 0306 	and.w	r3, r3, #6
 8001874:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001878:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800187a:	492f      	ldr	r1, [pc, #188]	; (8001938 <HAL_I2C_Master_Transmit+0x1a8>)
 800187c:	4633      	mov	r3, r6
 800187e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001880:	4620      	mov	r0, r4
 8001882:	f7ff fd50 	bl	8001326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001886:	b148      	cbz	r0, 800189c <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001888:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800188a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800188c:	2b04      	cmp	r3, #4
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	d107      	bne.n	80018a4 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8001894:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001898:	2501      	movs	r5, #1
 800189a:	e787      	b.n	80017ac <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800189c:	6823      	ldr	r3, [r4, #0]
 800189e:	b2ed      	uxtb	r5, r5
 80018a0:	611d      	str	r5, [r3, #16]
 80018a2:	e7d4      	b.n	800184e <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 80018a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 80018a8:	2503      	movs	r5, #3
 80018aa:	e77f      	b.n	80017ac <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ac:	4632      	mov	r2, r6
 80018ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80018b0:	4620      	mov	r0, r4
 80018b2:	f7ff fda6 	bl	8001402 <I2C_WaitOnTXEFlagUntilTimeout>
 80018b6:	b140      	cbz	r0, 80018ca <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d1f4      	bne.n	80018a8 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018be:	6822      	ldr	r2, [r4, #0]
 80018c0:	6813      	ldr	r3, [r2, #0]
 80018c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	e7e6      	b.n	8001898 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80018ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80018cc:	6820      	ldr	r0, [r4, #0]
 80018ce:	1c4b      	adds	r3, r1, #1
 80018d0:	6263      	str	r3, [r4, #36]	; 0x24
 80018d2:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 80018d4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80018d6:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80018d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018da:	3b01      	subs	r3, #1
 80018dc:	b29b      	uxth	r3, r3
 80018de:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018e0:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80018e2:	1e53      	subs	r3, r2, #1
 80018e4:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018e6:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80018e8:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018ea:	d50a      	bpl.n	8001902 <HAL_I2C_Master_Transmit+0x172>
 80018ec:	b14b      	cbz	r3, 8001902 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80018ee:	1c8b      	adds	r3, r1, #2
 80018f0:	6263      	str	r3, [r4, #36]	; 0x24
 80018f2:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80018f4:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80018f6:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80018f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80018fa:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b29b      	uxth	r3, r3
 8001900:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001902:	4632      	mov	r2, r6
 8001904:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001906:	4620      	mov	r0, r4
 8001908:	f7ff fe9b 	bl	8001642 <I2C_WaitOnBTFFlagUntilTimeout>
 800190c:	2800      	cmp	r0, #0
 800190e:	d1d3      	bne.n	80018b8 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8001910:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ca      	bne.n	80018ac <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001916:	6821      	ldr	r1, [r4, #0]
 8001918:	680a      	ldr	r2, [r1, #0]
 800191a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800191e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001920:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001922:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001926:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800192a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800192e:	e73d      	b.n	80017ac <HAL_I2C_Master_Transmit+0x1c>
 8001930:	00100002 	.word	0x00100002
 8001934:	00010002 	.word	0x00010002
 8001938:	00010008 	.word	0x00010008

0800193c <HAL_I2C_Mem_Write>:
{
 800193c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001940:	4604      	mov	r4, r0
 8001942:	469a      	mov	sl, r3
 8001944:	4688      	mov	r8, r1
 8001946:	4691      	mov	r9, r2
 8001948:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 800194a:	f7ff fb77 	bl	800103c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800194e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001952:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001954:	2b20      	cmp	r3, #32
 8001956:	d003      	beq.n	8001960 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001958:	2002      	movs	r0, #2
}
 800195a:	b002      	add	sp, #8
 800195c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	2319      	movs	r3, #25
 8001964:	2201      	movs	r2, #1
 8001966:	493e      	ldr	r1, [pc, #248]	; (8001a60 <HAL_I2C_Mem_Write+0x124>)
 8001968:	4620      	mov	r0, r4
 800196a:	f7ff fd1c 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 800196e:	2800      	cmp	r0, #0
 8001970:	d1f2      	bne.n	8001958 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001972:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001976:	2b01      	cmp	r3, #1
 8001978:	d0ee      	beq.n	8001958 <HAL_I2C_Mem_Write+0x1c>
 800197a:	2301      	movs	r3, #1
 800197c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001980:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001982:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001984:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001986:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001988:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800198a:	bf58      	it	pl
 800198c:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800198e:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8001990:	bf5c      	itt	pl
 8001992:	f042 0201 	orrpl.w	r2, r2, #1
 8001996:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800199e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019a0:	2321      	movs	r3, #33	; 0x21
 80019a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019a6:	2340      	movs	r3, #64	; 0x40
 80019a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 80019ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ae:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80019b0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019b2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019b6:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 80019b8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019bc:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019be:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80019c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019c2:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 80019c4:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019c6:	4653      	mov	r3, sl
 80019c8:	f7ff fd42 	bl	8001450 <I2C_RequestMemoryWrite>
 80019cc:	2800      	cmp	r0, #0
 80019ce:	d02a      	beq.n	8001a26 <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80019d2:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d107      	bne.n	80019ea <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 80019da:	2001      	movs	r0, #1
 80019dc:	e7bd      	b.n	800195a <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019de:	f7ff fd10 	bl	8001402 <I2C_WaitOnTXEFlagUntilTimeout>
 80019e2:	b120      	cbz	r0, 80019ee <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d034      	beq.n	8001a54 <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 80019ea:	2003      	movs	r0, #3
 80019ec:	e7b5      	b.n	800195a <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80019ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80019f0:	6827      	ldr	r7, [r4, #0]
 80019f2:	1c4b      	adds	r3, r1, #1
 80019f4:	6263      	str	r3, [r4, #36]	; 0x24
 80019f6:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 80019f8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80019fa:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 80019fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80019fe:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a06:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001a08:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a0a:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001a0c:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a0e:	d50a      	bpl.n	8001a26 <HAL_I2C_Mem_Write+0xea>
 8001a10:	b148      	cbz	r0, 8001a26 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001a12:	1c8b      	adds	r3, r1, #2
 8001a14:	6263      	str	r3, [r4, #36]	; 0x24
 8001a16:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001a18:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001a1a:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001a1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001a1e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001a20:	3b01      	subs	r3, #1
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001a26:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a28:	462a      	mov	r2, r5
 8001a2a:	4631      	mov	r1, r6
 8001a2c:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1d5      	bne.n	80019de <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a32:	f7ff fe06 	bl	8001642 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a36:	2800      	cmp	r0, #0
 8001a38:	d1d4      	bne.n	80019e4 <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a3a:	6822      	ldr	r2, [r4, #0]
 8001a3c:	6813      	ldr	r3, [r2, #0]
 8001a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a42:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a44:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001a46:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001a4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001a52:	e782      	b.n	800195a <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a54:	6822      	ldr	r2, [r4, #0]
 8001a56:	6813      	ldr	r3, [r2, #0]
 8001a58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e7bc      	b.n	80019da <HAL_I2C_Mem_Write+0x9e>
 8001a60:	00100002 	.word	0x00100002
 8001a64:	ffff0000 	.word	0xffff0000

08001a68 <HAL_I2C_Mem_Read>:
{
 8001a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a6c:	4604      	mov	r4, r0
 8001a6e:	b086      	sub	sp, #24
 8001a70:	469a      	mov	sl, r3
 8001a72:	460d      	mov	r5, r1
 8001a74:	4691      	mov	r9, r2
 8001a76:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001a78:	f7ff fae0 	bl	800103c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001a7c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001a80:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	d004      	beq.n	8001a90 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8001a86:	2502      	movs	r5, #2
}
 8001a88:	4628      	mov	r0, r5
 8001a8a:	b006      	add	sp, #24
 8001a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a90:	9000      	str	r0, [sp, #0]
 8001a92:	2319      	movs	r3, #25
 8001a94:	2201      	movs	r2, #1
 8001a96:	4981      	ldr	r1, [pc, #516]	; (8001c9c <HAL_I2C_Mem_Read+0x234>)
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f7ff fc84 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	d1f1      	bne.n	8001a86 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001aa2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d0ed      	beq.n	8001a86 <HAL_I2C_Mem_Read+0x1e>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ab0:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab2:	f04f 0800 	mov.w	r8, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ab6:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ab8:	4629      	mov	r1, r5
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aba:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001abc:	bf58      	it	pl
 8001abe:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ac0:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8001ac2:	bf5c      	itt	pl
 8001ac4:	f042 0201 	orrpl.w	r2, r2, #1
 8001ac8:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad0:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ad2:	2322      	movs	r3, #34	; 0x22
 8001ad4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ad8:	2340      	movs	r3, #64	; 0x40
 8001ada:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae0:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001ae4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ae6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001aea:	9601      	str	r6, [sp, #4]
    hi2c->XferCount   = Size;
 8001aec:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aee:	4b6c      	ldr	r3, [pc, #432]	; (8001ca0 <HAL_I2C_Mem_Read+0x238>)
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001af0:	9700      	str	r7, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001af2:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001af4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001af6:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8001af8:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001afa:	4653      	mov	r3, sl
 8001afc:	f7ff fcfa 	bl	80014f4 <I2C_RequestMemoryRead>
 8001b00:	4605      	mov	r5, r0
 8001b02:	b130      	cbz	r0, 8001b12 <HAL_I2C_Mem_Read+0xaa>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b04:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001b06:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d13d      	bne.n	8001b8a <HAL_I2C_Mem_Read+0x122>
              return HAL_ERROR;
 8001b0e:	2501      	movs	r5, #1
 8001b10:	e7ba      	b.n	8001a88 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8001b12:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001b14:	6823      	ldr	r3, [r4, #0]
 8001b16:	b992      	cbnz	r2, 8001b3e <HAL_I2C_Mem_Read+0xd6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b18:	9002      	str	r0, [sp, #8]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	9202      	str	r2, [sp, #8]
 8001b1e:	699a      	ldr	r2, [r3, #24]
 8001b20:	9202      	str	r2, [sp, #8]
 8001b22:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b2a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001b38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001b3c:	e7a4      	b.n	8001a88 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8001b3e:	2a01      	cmp	r2, #1
 8001b40:	d125      	bne.n	8001b8e <HAL_I2C_Mem_Read+0x126>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b48:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	9003      	str	r0, [sp, #12]
 8001b50:	695a      	ldr	r2, [r3, #20]
 8001b52:	9203      	str	r2, [sp, #12]
 8001b54:	699a      	ldr	r2, [r3, #24]
 8001b56:	9203      	str	r2, [sp, #12]
 8001b58:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b62:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b64:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8001ca4 <HAL_I2C_Mem_Read+0x23c>
    while(hi2c->XferSize > 0U)
 8001b68:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0de      	beq.n	8001b2c <HAL_I2C_Mem_Read+0xc4>
      if(hi2c->XferSize <= 3U)
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d877      	bhi.n	8001c62 <HAL_I2C_Mem_Read+0x1fa>
        if(hi2c->XferSize== 1U)
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d127      	bne.n	8001bc6 <HAL_I2C_Mem_Read+0x15e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001b76:	4632      	mov	r2, r6
 8001b78:	4639      	mov	r1, r7
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f7ff fd34 	bl	80015e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b80:	2800      	cmp	r0, #0
 8001b82:	d03f      	beq.n	8001c04 <HAL_I2C_Mem_Read+0x19c>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001b84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	d1c1      	bne.n	8001b0e <HAL_I2C_Mem_Read+0xa6>
              return HAL_TIMEOUT;
 8001b8a:	2503      	movs	r5, #3
 8001b8c:	e77c      	b.n	8001a88 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8001b8e:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001b90:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8001b92:	d10e      	bne.n	8001bb2 <HAL_I2C_Mem_Read+0x14a>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	9004      	str	r0, [sp, #16]
 8001ba0:	695a      	ldr	r2, [r3, #20]
 8001ba2:	9204      	str	r2, [sp, #16]
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	9204      	str	r2, [sp, #16]
 8001ba8:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb0:	e7d6      	b.n	8001b60 <HAL_I2C_Mem_Read+0xf8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bb6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bb8:	9005      	str	r0, [sp, #20]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	9205      	str	r2, [sp, #20]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	9305      	str	r3, [sp, #20]
 8001bc2:	9b05      	ldr	r3, [sp, #20]
 8001bc4:	e7ce      	b.n	8001b64 <HAL_I2C_Mem_Read+0xfc>
        else if(hi2c->XferSize == 2U)
 8001bc6:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bc8:	9600      	str	r6, [sp, #0]
 8001bca:	463b      	mov	r3, r7
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4641      	mov	r1, r8
 8001bd2:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001bd4:	d124      	bne.n	8001c20 <HAL_I2C_Mem_Read+0x1b8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bd6:	f7ff fbe6 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 8001bda:	2800      	cmp	r0, #0
 8001bdc:	d1d5      	bne.n	8001b8a <HAL_I2C_Mem_Read+0x122>
 8001bde:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be8:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001bea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	1c51      	adds	r1, r2, #1
 8001bf0:	6261      	str	r1, [r4, #36]	; 0x24
 8001bf2:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001bf4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001bfa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c02:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	6262      	str	r2, [r4, #36]	; 0x24
 8001c0a:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c0c:	6912      	ldr	r2, [r2, #16]
 8001c0e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001c10:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c12:	3b01      	subs	r3, #1
 8001c14:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001c16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001c1e:	e7a3      	b.n	8001b68 <HAL_I2C_Mem_Read+0x100>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c20:	f7ff fbc1 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 8001c24:	4602      	mov	r2, r0
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d1af      	bne.n	8001b8a <HAL_I2C_Mem_Read+0x122>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c2a:	6821      	ldr	r1, [r4, #0]
 8001c2c:	680b      	ldr	r3, [r1, #0]
 8001c2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c32:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c34:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c38:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c3a:	1c59      	adds	r1, r3, #1
 8001c3c:	6261      	str	r1, [r4, #36]	; 0x24
 8001c3e:	6821      	ldr	r1, [r4, #0]
 8001c40:	6909      	ldr	r1, [r1, #16]
 8001c42:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8001c44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c46:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001c4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c4e:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c56:	463b      	mov	r3, r7
 8001c58:	f7ff fba5 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	d0bf      	beq.n	8001be0 <HAL_I2C_Mem_Read+0x178>
 8001c60:	e793      	b.n	8001b8a <HAL_I2C_Mem_Read+0x122>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c62:	4632      	mov	r2, r6
 8001c64:	4639      	mov	r1, r7
 8001c66:	4620      	mov	r0, r4
 8001c68:	f7ff fcbe 	bl	80015e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	d189      	bne.n	8001b84 <HAL_I2C_Mem_Read+0x11c>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	6262      	str	r2, [r4, #36]	; 0x24
 8001c76:	6822      	ldr	r2, [r4, #0]
 8001c78:	6912      	ldr	r2, [r2, #16]
 8001c7a:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001c7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c7e:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001c80:	3b01      	subs	r3, #1
 8001c82:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001c84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c8c:	6953      	ldr	r3, [r2, #20]
 8001c8e:	075b      	lsls	r3, r3, #29
 8001c90:	f57f af6a 	bpl.w	8001b68 <HAL_I2C_Mem_Read+0x100>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c96:	1c59      	adds	r1, r3, #1
 8001c98:	6261      	str	r1, [r4, #36]	; 0x24
 8001c9a:	e7b7      	b.n	8001c0c <HAL_I2C_Mem_Read+0x1a4>
 8001c9c:	00100002 	.word	0x00100002
 8001ca0:	ffff0000 	.word	0xffff0000
 8001ca4:	00010004 	.word	0x00010004

08001ca8 <HAL_I2C_IsDeviceReady>:
{
 8001ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cac:	4604      	mov	r4, r0
 8001cae:	b085      	sub	sp, #20
 8001cb0:	4698      	mov	r8, r3
 8001cb2:	4689      	mov	r9, r1
 8001cb4:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 8001cb6:	f7ff f9c1 	bl	800103c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001cba:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001cbe:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001cc0:	2b20      	cmp	r3, #32
 8001cc2:	d003      	beq.n	8001ccc <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8001cc4:	2002      	movs	r0, #2
}
 8001cc6:	b005      	add	sp, #20
 8001cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ccc:	9000      	str	r0, [sp, #0]
 8001cce:	2319      	movs	r3, #25
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	494b      	ldr	r1, [pc, #300]	; (8001e00 <HAL_I2C_IsDeviceReady+0x158>)
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	f7ff fb66 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	d1f2      	bne.n	8001cc4 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8001cde:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d0ee      	beq.n	8001cc4 <HAL_I2C_IsDeviceReady+0x1c>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cec:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cee:	2500      	movs	r5, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cf0:	681a      	ldr	r2, [r3, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cf2:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8001e00 <HAL_I2C_IsDeviceReady+0x158>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cf6:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001cf8:	bf58      	it	pl
 8001cfa:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cfc:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8001d00:	bf5c      	itt	pl
 8001d02:	f042 0201 	orrpl.w	r2, r2, #1
 8001d06:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d0e:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d10:	2324      	movs	r3, #36	; 0x24
 8001d12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d16:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <HAL_I2C_IsDeviceReady+0x15c>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d18:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d1a:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d1c:	6822      	ldr	r2, [r4, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d22:	6813      	ldr	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d24:	4620      	mov	r0, r4
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2a:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d2c:	9600      	str	r6, [sp, #0]
 8001d2e:	4643      	mov	r3, r8
 8001d30:	2200      	movs	r2, #0
 8001d32:	f7ff fb38 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 8001d36:	b108      	cbz	r0, 8001d3c <HAL_I2C_IsDeviceReady+0x94>
        return HAL_TIMEOUT;
 8001d38:	2003      	movs	r0, #3
 8001d3a:	e7c4      	b.n	8001cc6 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d3c:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d3e:	27a0      	movs	r7, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d40:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8001d44:	f7ff f97a 	bl	800103c <HAL_GetTick>
 8001d48:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d4e:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 8001d50:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d54:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d58:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 8001d5c:	b2db      	uxtb	r3, r3
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8001d5e:	b911      	cbnz	r1, 8001d66 <HAL_I2C_IsDeviceReady+0xbe>
 8001d60:	b90a      	cbnz	r2, 8001d66 <HAL_I2C_IsDeviceReady+0xbe>
 8001d62:	2ba0      	cmp	r3, #160	; 0xa0
 8001d64:	d120      	bne.n	8001da8 <HAL_I2C_IsDeviceReady+0x100>
      hi2c->State = HAL_I2C_STATE_READY;
 8001d66:	2720      	movs	r7, #32
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d68:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001d6a:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d7a:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d7c:	d02a      	beq.n	8001dd4 <HAL_I2C_IsDeviceReady+0x12c>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	9203      	str	r2, [sp, #12]
 8001d82:	695a      	ldr	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d84:	491e      	ldr	r1, [pc, #120]	; (8001e00 <HAL_I2C_IsDeviceReady+0x158>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d86:	9203      	str	r2, [sp, #12]
 8001d88:	699b      	ldr	r3, [r3, #24]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d8a:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d8c:	9303      	str	r3, [sp, #12]
 8001d8e:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d90:	9600      	str	r6, [sp, #0]
 8001d92:	2319      	movs	r3, #25
 8001d94:	4620      	mov	r0, r4
 8001d96:	f7ff fb06 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	d1cc      	bne.n	8001d38 <HAL_I2C_IsDeviceReady+0x90>
        hi2c->State = HAL_I2C_STATE_READY;
 8001d9e:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001da2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8001da6:	e78e      	b.n	8001cc6 <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001da8:	f1b8 0f00 	cmp.w	r8, #0
 8001dac:	d10c      	bne.n	8001dc8 <HAL_I2C_IsDeviceReady+0x120>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001dae:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001db2:	6823      	ldr	r3, [r4, #0]
 8001db4:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001db6:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 8001db8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001dbc:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001dc0:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	e7ca      	b.n	8001d5e <HAL_I2C_IsDeviceReady+0xb6>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001dc8:	f7ff f938 	bl	800103c <HAL_GetTick>
 8001dcc:	1b80      	subs	r0, r0, r6
 8001dce:	4580      	cmp	r8, r0
 8001dd0:	d3ed      	bcc.n	8001dae <HAL_I2C_IsDeviceReady+0x106>
 8001dd2:	e7ee      	b.n	8001db2 <HAL_I2C_IsDeviceReady+0x10a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd8:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dda:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ddc:	4620      	mov	r0, r4
 8001dde:	9600      	str	r6, [sp, #0]
 8001de0:	2319      	movs	r3, #25
 8001de2:	2201      	movs	r2, #1
 8001de4:	f7ff fadf 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 8001de8:	2800      	cmp	r0, #0
 8001dea:	d1a5      	bne.n	8001d38 <HAL_I2C_IsDeviceReady+0x90>
 8001dec:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 8001dee:	45aa      	cmp	sl, r5
 8001df0:	d894      	bhi.n	8001d1c <HAL_I2C_IsDeviceReady+0x74>
    __HAL_UNLOCK(hi2c);
 8001df2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001df6:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	e763      	b.n	8001cc6 <HAL_I2C_IsDeviceReady+0x1e>
 8001dfe:	bf00      	nop
 8001e00:	00100002 	.word	0x00100002
 8001e04:	ffff0000 	.word	0xffff0000

08001e08 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e08:	6803      	ldr	r3, [r0, #0]
{
 8001e0a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	07db      	lsls	r3, r3, #31
{
 8001e10:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e12:	d410      	bmi.n	8001e36 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e14:	682b      	ldr	r3, [r5, #0]
 8001e16:	079f      	lsls	r7, r3, #30
 8001e18:	d45e      	bmi.n	8001ed8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1a:	682b      	ldr	r3, [r5, #0]
 8001e1c:	0719      	lsls	r1, r3, #28
 8001e1e:	f100 8095 	bmi.w	8001f4c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e22:	682b      	ldr	r3, [r5, #0]
 8001e24:	075a      	lsls	r2, r3, #29
 8001e26:	f100 80bf 	bmi.w	8001fa8 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e2a:	69ea      	ldr	r2, [r5, #28]
 8001e2c:	2a00      	cmp	r2, #0
 8001e2e:	f040 812d 	bne.w	800208c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001e32:	2000      	movs	r0, #0
 8001e34:	e014      	b.n	8001e60 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e36:	4c90      	ldr	r4, [pc, #576]	; (8002078 <HAL_RCC_OscConfig+0x270>)
 8001e38:	6863      	ldr	r3, [r4, #4]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d007      	beq.n	8001e52 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e42:	6863      	ldr	r3, [r4, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d10c      	bne.n	8001e66 <HAL_RCC_OscConfig+0x5e>
 8001e4c:	6863      	ldr	r3, [r4, #4]
 8001e4e:	03de      	lsls	r6, r3, #15
 8001e50:	d509      	bpl.n	8001e66 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	039c      	lsls	r4, r3, #14
 8001e56:	d5dd      	bpl.n	8001e14 <HAL_RCC_OscConfig+0xc>
 8001e58:	686b      	ldr	r3, [r5, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1da      	bne.n	8001e14 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001e5e:	2001      	movs	r0, #1
}
 8001e60:	b002      	add	sp, #8
 8001e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e66:	686b      	ldr	r3, [r5, #4]
 8001e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6c:	d110      	bne.n	8001e90 <HAL_RCC_OscConfig+0x88>
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e74:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e76:	f7ff f8e1 	bl	800103c <HAL_GetTick>
 8001e7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7c:	6823      	ldr	r3, [r4, #0]
 8001e7e:	0398      	lsls	r0, r3, #14
 8001e80:	d4c8      	bmi.n	8001e14 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e82:	f7ff f8db 	bl	800103c <HAL_GetTick>
 8001e86:	1b80      	subs	r0, r0, r6
 8001e88:	2864      	cmp	r0, #100	; 0x64
 8001e8a:	d9f7      	bls.n	8001e7c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001e8c:	2003      	movs	r0, #3
 8001e8e:	e7e7      	b.n	8001e60 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e90:	b99b      	cbnz	r3, 8001eba <HAL_RCC_OscConfig+0xb2>
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e98:	6023      	str	r3, [r4, #0]
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ea2:	f7ff f8cb 	bl	800103c <HAL_GetTick>
 8001ea6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	0399      	lsls	r1, r3, #14
 8001eac:	d5b2      	bpl.n	8001e14 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eae:	f7ff f8c5 	bl	800103c <HAL_GetTick>
 8001eb2:	1b80      	subs	r0, r0, r6
 8001eb4:	2864      	cmp	r0, #100	; 0x64
 8001eb6:	d9f7      	bls.n	8001ea8 <HAL_RCC_OscConfig+0xa0>
 8001eb8:	e7e8      	b.n	8001e8c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	d103      	bne.n	8001eca <HAL_RCC_OscConfig+0xc2>
 8001ec2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec6:	6023      	str	r3, [r4, #0]
 8001ec8:	e7d1      	b.n	8001e6e <HAL_RCC_OscConfig+0x66>
 8001eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ece:	6023      	str	r3, [r4, #0]
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed6:	e7cd      	b.n	8001e74 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ed8:	4c67      	ldr	r4, [pc, #412]	; (8002078 <HAL_RCC_OscConfig+0x270>)
 8001eda:	6863      	ldr	r3, [r4, #4]
 8001edc:	f013 0f0c 	tst.w	r3, #12
 8001ee0:	d007      	beq.n	8001ef2 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ee2:	6863      	ldr	r3, [r4, #4]
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d110      	bne.n	8001f0e <HAL_RCC_OscConfig+0x106>
 8001eec:	6863      	ldr	r3, [r4, #4]
 8001eee:	03da      	lsls	r2, r3, #15
 8001ef0:	d40d      	bmi.n	8001f0e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	079b      	lsls	r3, r3, #30
 8001ef6:	d502      	bpl.n	8001efe <HAL_RCC_OscConfig+0xf6>
 8001ef8:	692b      	ldr	r3, [r5, #16]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d1af      	bne.n	8001e5e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	696a      	ldr	r2, [r5, #20]
 8001f02:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f06:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f0a:	6023      	str	r3, [r4, #0]
 8001f0c:	e785      	b.n	8001e1a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f0e:	692a      	ldr	r2, [r5, #16]
 8001f10:	4b5a      	ldr	r3, [pc, #360]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001f12:	b16a      	cbz	r2, 8001f30 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f18:	f7ff f890 	bl	800103c <HAL_GetTick>
 8001f1c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	079f      	lsls	r7, r3, #30
 8001f22:	d4ec      	bmi.n	8001efe <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f24:	f7ff f88a 	bl	800103c <HAL_GetTick>
 8001f28:	1b80      	subs	r0, r0, r6
 8001f2a:	2802      	cmp	r0, #2
 8001f2c:	d9f7      	bls.n	8001f1e <HAL_RCC_OscConfig+0x116>
 8001f2e:	e7ad      	b.n	8001e8c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001f30:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f32:	f7ff f883 	bl	800103c <HAL_GetTick>
 8001f36:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	0798      	lsls	r0, r3, #30
 8001f3c:	f57f af6d 	bpl.w	8001e1a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f40:	f7ff f87c 	bl	800103c <HAL_GetTick>
 8001f44:	1b80      	subs	r0, r0, r6
 8001f46:	2802      	cmp	r0, #2
 8001f48:	d9f6      	bls.n	8001f38 <HAL_RCC_OscConfig+0x130>
 8001f4a:	e79f      	b.n	8001e8c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f4c:	69aa      	ldr	r2, [r5, #24]
 8001f4e:	4c4a      	ldr	r4, [pc, #296]	; (8002078 <HAL_RCC_OscConfig+0x270>)
 8001f50:	4b4b      	ldr	r3, [pc, #300]	; (8002080 <HAL_RCC_OscConfig+0x278>)
 8001f52:	b1da      	cbz	r2, 8001f8c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001f54:	2201      	movs	r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f58:	f7ff f870 	bl	800103c <HAL_GetTick>
 8001f5c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f60:	079b      	lsls	r3, r3, #30
 8001f62:	d50d      	bpl.n	8001f80 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f64:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001f68:	4b46      	ldr	r3, [pc, #280]	; (8002084 <HAL_RCC_OscConfig+0x27c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f70:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001f72:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001f74:	9b01      	ldr	r3, [sp, #4]
 8001f76:	1e5a      	subs	r2, r3, #1
 8001f78:	9201      	str	r2, [sp, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f9      	bne.n	8001f72 <HAL_RCC_OscConfig+0x16a>
 8001f7e:	e750      	b.n	8001e22 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f80:	f7ff f85c 	bl	800103c <HAL_GetTick>
 8001f84:	1b80      	subs	r0, r0, r6
 8001f86:	2802      	cmp	r0, #2
 8001f88:	d9e9      	bls.n	8001f5e <HAL_RCC_OscConfig+0x156>
 8001f8a:	e77f      	b.n	8001e8c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001f8c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f8e:	f7ff f855 	bl	800103c <HAL_GetTick>
 8001f92:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f96:	079f      	lsls	r7, r3, #30
 8001f98:	f57f af43 	bpl.w	8001e22 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff f84e 	bl	800103c <HAL_GetTick>
 8001fa0:	1b80      	subs	r0, r0, r6
 8001fa2:	2802      	cmp	r0, #2
 8001fa4:	d9f6      	bls.n	8001f94 <HAL_RCC_OscConfig+0x18c>
 8001fa6:	e771      	b.n	8001e8c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa8:	4c33      	ldr	r4, [pc, #204]	; (8002078 <HAL_RCC_OscConfig+0x270>)
 8001faa:	69e3      	ldr	r3, [r4, #28]
 8001fac:	00d8      	lsls	r0, r3, #3
 8001fae:	d424      	bmi.n	8001ffa <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001fb0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	69e3      	ldr	r3, [r4, #28]
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	61e3      	str	r3, [r4, #28]
 8001fba:	69e3      	ldr	r3, [r4, #28]
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	4e30      	ldr	r6, [pc, #192]	; (8002088 <HAL_RCC_OscConfig+0x280>)
 8001fc6:	6833      	ldr	r3, [r6, #0]
 8001fc8:	05d9      	lsls	r1, r3, #23
 8001fca:	d518      	bpl.n	8001ffe <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	68eb      	ldr	r3, [r5, #12]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d126      	bne.n	8002020 <HAL_RCC_OscConfig+0x218>
 8001fd2:	6a23      	ldr	r3, [r4, #32]
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001fda:	f7ff f82f 	bl	800103c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001fe2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	6a23      	ldr	r3, [r4, #32]
 8001fe6:	079b      	lsls	r3, r3, #30
 8001fe8:	d53f      	bpl.n	800206a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001fea:	2f00      	cmp	r7, #0
 8001fec:	f43f af1d 	beq.w	8001e2a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff0:	69e3      	ldr	r3, [r4, #28]
 8001ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	61e3      	str	r3, [r4, #28]
 8001ff8:	e717      	b.n	8001e2a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001ffa:	2700      	movs	r7, #0
 8001ffc:	e7e2      	b.n	8001fc4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffe:	6833      	ldr	r3, [r6, #0]
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002006:	f7ff f819 	bl	800103c <HAL_GetTick>
 800200a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	6833      	ldr	r3, [r6, #0]
 800200e:	05da      	lsls	r2, r3, #23
 8002010:	d4dc      	bmi.n	8001fcc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002012:	f7ff f813 	bl	800103c <HAL_GetTick>
 8002016:	eba0 0008 	sub.w	r0, r0, r8
 800201a:	2864      	cmp	r0, #100	; 0x64
 800201c:	d9f6      	bls.n	800200c <HAL_RCC_OscConfig+0x204>
 800201e:	e735      	b.n	8001e8c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002020:	b9ab      	cbnz	r3, 800204e <HAL_RCC_OscConfig+0x246>
 8002022:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002024:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	6223      	str	r3, [r4, #32]
 800202e:	6a23      	ldr	r3, [r4, #32]
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002036:	f7ff f801 	bl	800103c <HAL_GetTick>
 800203a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203c:	6a23      	ldr	r3, [r4, #32]
 800203e:	0798      	lsls	r0, r3, #30
 8002040:	d5d3      	bpl.n	8001fea <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7fe fffb 	bl	800103c <HAL_GetTick>
 8002046:	1b80      	subs	r0, r0, r6
 8002048:	4540      	cmp	r0, r8
 800204a:	d9f7      	bls.n	800203c <HAL_RCC_OscConfig+0x234>
 800204c:	e71e      	b.n	8001e8c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204e:	2b05      	cmp	r3, #5
 8002050:	6a23      	ldr	r3, [r4, #32]
 8002052:	d103      	bne.n	800205c <HAL_RCC_OscConfig+0x254>
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	6223      	str	r3, [r4, #32]
 800205a:	e7ba      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1ca>
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	6223      	str	r3, [r4, #32]
 8002062:	6a23      	ldr	r3, [r4, #32]
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	e7b6      	b.n	8001fd8 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206a:	f7fe ffe7 	bl	800103c <HAL_GetTick>
 800206e:	eba0 0008 	sub.w	r0, r0, r8
 8002072:	42b0      	cmp	r0, r6
 8002074:	d9b6      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x1dc>
 8002076:	e709      	b.n	8001e8c <HAL_RCC_OscConfig+0x84>
 8002078:	40021000 	.word	0x40021000
 800207c:	42420000 	.word	0x42420000
 8002080:	42420480 	.word	0x42420480
 8002084:	20000010 	.word	0x20000010
 8002088:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800208c:	4c22      	ldr	r4, [pc, #136]	; (8002118 <HAL_RCC_OscConfig+0x310>)
 800208e:	6863      	ldr	r3, [r4, #4]
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	2b08      	cmp	r3, #8
 8002096:	f43f aee2 	beq.w	8001e5e <HAL_RCC_OscConfig+0x56>
 800209a:	2300      	movs	r3, #0
 800209c:	4e1f      	ldr	r6, [pc, #124]	; (800211c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80020a0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a2:	d12b      	bne.n	80020fc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80020a4:	f7fe ffca 	bl	800103c <HAL_GetTick>
 80020a8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020aa:	6823      	ldr	r3, [r4, #0]
 80020ac:	0199      	lsls	r1, r3, #6
 80020ae:	d41f      	bmi.n	80020f0 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020b0:	6a2b      	ldr	r3, [r5, #32]
 80020b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b6:	d105      	bne.n	80020c4 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020b8:	6862      	ldr	r2, [r4, #4]
 80020ba:	68a9      	ldr	r1, [r5, #8]
 80020bc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80020c0:	430a      	orrs	r2, r1
 80020c2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80020c6:	6862      	ldr	r2, [r4, #4]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80020ce:	4313      	orrs	r3, r2
 80020d0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80020d2:	2301      	movs	r3, #1
 80020d4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80020d6:	f7fe ffb1 	bl	800103c <HAL_GetTick>
 80020da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	019a      	lsls	r2, r3, #6
 80020e0:	f53f aea7 	bmi.w	8001e32 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e4:	f7fe ffaa 	bl	800103c <HAL_GetTick>
 80020e8:	1b40      	subs	r0, r0, r5
 80020ea:	2802      	cmp	r0, #2
 80020ec:	d9f6      	bls.n	80020dc <HAL_RCC_OscConfig+0x2d4>
 80020ee:	e6cd      	b.n	8001e8c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f0:	f7fe ffa4 	bl	800103c <HAL_GetTick>
 80020f4:	1bc0      	subs	r0, r0, r7
 80020f6:	2802      	cmp	r0, #2
 80020f8:	d9d7      	bls.n	80020aa <HAL_RCC_OscConfig+0x2a2>
 80020fa:	e6c7      	b.n	8001e8c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80020fc:	f7fe ff9e 	bl	800103c <HAL_GetTick>
 8002100:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	019b      	lsls	r3, r3, #6
 8002106:	f57f ae94 	bpl.w	8001e32 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210a:	f7fe ff97 	bl	800103c <HAL_GetTick>
 800210e:	1b40      	subs	r0, r0, r5
 8002110:	2802      	cmp	r0, #2
 8002112:	d9f6      	bls.n	8002102 <HAL_RCC_OscConfig+0x2fa>
 8002114:	e6ba      	b.n	8001e8c <HAL_RCC_OscConfig+0x84>
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	42420060 	.word	0x42420060

08002120 <HAL_RCC_GetSysClockFreq>:
{
 8002120:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002122:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002124:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002126:	ac02      	add	r4, sp, #8
 8002128:	f103 0510 	add.w	r5, r3, #16
 800212c:	4622      	mov	r2, r4
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	6859      	ldr	r1, [r3, #4]
 8002132:	3308      	adds	r3, #8
 8002134:	c203      	stmia	r2!, {r0, r1}
 8002136:	42ab      	cmp	r3, r5
 8002138:	4614      	mov	r4, r2
 800213a:	d1f7      	bne.n	800212c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800213c:	2301      	movs	r3, #1
 800213e:	f88d 3004 	strb.w	r3, [sp, #4]
 8002142:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002144:	4911      	ldr	r1, [pc, #68]	; (800218c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002146:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800214a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800214c:	f003 020c 	and.w	r2, r3, #12
 8002150:	2a08      	cmp	r2, #8
 8002152:	d117      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002154:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002158:	a806      	add	r0, sp, #24
 800215a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800215c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800215e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002162:	d50c      	bpl.n	800217e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002164:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002166:	480a      	ldr	r0, [pc, #40]	; (8002190 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002168:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800216c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800216e:	aa06      	add	r2, sp, #24
 8002170:	4413      	add	r3, r2
 8002172:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002176:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800217a:	b007      	add	sp, #28
 800217c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800217e:	4805      	ldr	r0, [pc, #20]	; (8002194 <HAL_RCC_GetSysClockFreq+0x74>)
 8002180:	4350      	muls	r0, r2
 8002182:	e7fa      	b.n	800217a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8002186:	e7f8      	b.n	800217a <HAL_RCC_GetSysClockFreq+0x5a>
 8002188:	08004468 	.word	0x08004468
 800218c:	40021000 	.word	0x40021000
 8002190:	007a1200 	.word	0x007a1200
 8002194:	003d0900 	.word	0x003d0900

08002198 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002198:	4a54      	ldr	r2, [pc, #336]	; (80022ec <HAL_RCC_ClockConfig+0x154>)
{
 800219a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800219e:	6813      	ldr	r3, [r2, #0]
{
 80021a0:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	428b      	cmp	r3, r1
{
 80021a8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80021aa:	d32a      	bcc.n	8002202 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ac:	6829      	ldr	r1, [r5, #0]
 80021ae:	078c      	lsls	r4, r1, #30
 80021b0:	d434      	bmi.n	800221c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b2:	07ca      	lsls	r2, r1, #31
 80021b4:	d447      	bmi.n	8002246 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80021b6:	4a4d      	ldr	r2, [pc, #308]	; (80022ec <HAL_RCC_ClockConfig+0x154>)
 80021b8:	6813      	ldr	r3, [r2, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	429e      	cmp	r6, r3
 80021c0:	f0c0 8082 	bcc.w	80022c8 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	682a      	ldr	r2, [r5, #0]
 80021c6:	4c4a      	ldr	r4, [pc, #296]	; (80022f0 <HAL_RCC_ClockConfig+0x158>)
 80021c8:	f012 0f04 	tst.w	r2, #4
 80021cc:	f040 8087 	bne.w	80022de <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d0:	0713      	lsls	r3, r2, #28
 80021d2:	d506      	bpl.n	80021e2 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021d4:	6863      	ldr	r3, [r4, #4]
 80021d6:	692a      	ldr	r2, [r5, #16]
 80021d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80021e0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021e2:	f7ff ff9d 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80021e6:	6863      	ldr	r3, [r4, #4]
 80021e8:	4a42      	ldr	r2, [pc, #264]	; (80022f4 <HAL_RCC_ClockConfig+0x15c>)
 80021ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	40d8      	lsrs	r0, r3
 80021f2:	4b41      	ldr	r3, [pc, #260]	; (80022f8 <HAL_RCC_ClockConfig+0x160>)
 80021f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7fe fede 	bl	8000fb8 <HAL_InitTick>
  return HAL_OK;
 80021fc:	2000      	movs	r0, #0
}
 80021fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	6813      	ldr	r3, [r2, #0]
 8002204:	f023 0307 	bic.w	r3, r3, #7
 8002208:	430b      	orrs	r3, r1
 800220a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800220c:	6813      	ldr	r3, [r2, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	4299      	cmp	r1, r3
 8002214:	d0ca      	beq.n	80021ac <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002216:	2001      	movs	r0, #1
 8002218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800221c:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002222:	bf1e      	ittt	ne
 8002224:	685a      	ldrne	r2, [r3, #4]
 8002226:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800222a:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800222e:	bf42      	ittt	mi
 8002230:	685a      	ldrmi	r2, [r3, #4]
 8002232:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002236:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	68a8      	ldr	r0, [r5, #8]
 800223c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002240:	4302      	orrs	r2, r0
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	e7b5      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002246:	686a      	ldr	r2, [r5, #4]
 8002248:	4c29      	ldr	r4, [pc, #164]	; (80022f0 <HAL_RCC_ClockConfig+0x158>)
 800224a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224e:	d11c      	bne.n	800228a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002250:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	d0df      	beq.n	8002216 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002256:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002258:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225c:	f023 0303 	bic.w	r3, r3, #3
 8002260:	4313      	orrs	r3, r2
 8002262:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002264:	f7fe feea 	bl	800103c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002268:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800226a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226c:	2b01      	cmp	r3, #1
 800226e:	d114      	bne.n	800229a <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002270:	6863      	ldr	r3, [r4, #4]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b04      	cmp	r3, #4
 8002278:	d09d      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227a:	f7fe fedf 	bl	800103c <HAL_GetTick>
 800227e:	1bc0      	subs	r0, r0, r7
 8002280:	4540      	cmp	r0, r8
 8002282:	d9f5      	bls.n	8002270 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8002284:	2003      	movs	r0, #3
 8002286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800228a:	2a02      	cmp	r2, #2
 800228c:	d102      	bne.n	8002294 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002292:	e7df      	b.n	8002254 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	f013 0f02 	tst.w	r3, #2
 8002298:	e7dc      	b.n	8002254 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229a:	2b02      	cmp	r3, #2
 800229c:	d10f      	bne.n	80022be <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800229e:	6863      	ldr	r3, [r4, #4]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d086      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a8:	f7fe fec8 	bl	800103c <HAL_GetTick>
 80022ac:	1bc0      	subs	r0, r0, r7
 80022ae:	4540      	cmp	r0, r8
 80022b0:	d9f5      	bls.n	800229e <HAL_RCC_ClockConfig+0x106>
 80022b2:	e7e7      	b.n	8002284 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b4:	f7fe fec2 	bl	800103c <HAL_GetTick>
 80022b8:	1bc0      	subs	r0, r0, r7
 80022ba:	4540      	cmp	r0, r8
 80022bc:	d8e2      	bhi.n	8002284 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022be:	6863      	ldr	r3, [r4, #4]
 80022c0:	f013 0f0c 	tst.w	r3, #12
 80022c4:	d1f6      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x11c>
 80022c6:	e776      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c8:	6813      	ldr	r3, [r2, #0]
 80022ca:	f023 0307 	bic.w	r3, r3, #7
 80022ce:	4333      	orrs	r3, r6
 80022d0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022d2:	6813      	ldr	r3, [r2, #0]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	429e      	cmp	r6, r3
 80022da:	d19c      	bne.n	8002216 <HAL_RCC_ClockConfig+0x7e>
 80022dc:	e772      	b.n	80021c4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022de:	6863      	ldr	r3, [r4, #4]
 80022e0:	68e9      	ldr	r1, [r5, #12]
 80022e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022e6:	430b      	orrs	r3, r1
 80022e8:	6063      	str	r3, [r4, #4]
 80022ea:	e771      	b.n	80021d0 <HAL_RCC_ClockConfig+0x38>
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40021000 	.word	0x40021000
 80022f4:	08004e78 	.word	0x08004e78
 80022f8:	20000010 	.word	0x20000010

080022fc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x14>)
 80022fe:	4a05      	ldr	r2, [pc, #20]	; (8002314 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	4a03      	ldr	r2, [pc, #12]	; (8002318 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800230a:	6810      	ldr	r0, [r2, #0]
}    
 800230c:	40d8      	lsrs	r0, r3
 800230e:	4770      	bx	lr
 8002310:	40021000 	.word	0x40021000
 8002314:	08004e88 	.word	0x08004e88
 8002318:	20000010 	.word	0x20000010

0800231c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800231c:	6a03      	ldr	r3, [r0, #32]
{
 800231e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002326:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002328:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800232a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800232c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800232e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002332:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002334:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002336:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800233a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800233c:	4d0a      	ldr	r5, [pc, #40]	; (8002368 <TIM_OC1_SetConfig+0x4c>)
 800233e:	42a8      	cmp	r0, r5
 8002340:	d10b      	bne.n	800235a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002342:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002344:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002348:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800234a:	698e      	ldr	r6, [r1, #24]
 800234c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800234e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002352:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002354:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002358:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800235a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800235c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800235e:	684a      	ldr	r2, [r1, #4]
 8002360:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002362:	6203      	str	r3, [r0, #32]
 8002364:	bd70      	pop	{r4, r5, r6, pc}
 8002366:	bf00      	nop
 8002368:	40012c00 	.word	0x40012c00

0800236c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800236c:	6a03      	ldr	r3, [r0, #32]
{
 800236e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002374:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002376:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002378:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800237a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800237c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800237e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002382:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002384:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002386:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800238a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800238e:	4d0b      	ldr	r5, [pc, #44]	; (80023bc <TIM_OC3_SetConfig+0x50>)
 8002390:	42a8      	cmp	r0, r5
 8002392:	d10d      	bne.n	80023b0 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002394:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002396:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800239a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800239e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023a0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023a2:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023a6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80023a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023ac:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023b0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023b2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023b4:	684a      	ldr	r2, [r1, #4]
 80023b6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023b8:	6203      	str	r3, [r0, #32]
 80023ba:	bd70      	pop	{r4, r5, r6, pc}
 80023bc:	40012c00 	.word	0x40012c00

080023c0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023c0:	6a03      	ldr	r3, [r0, #32]
{
 80023c2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023ce:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023d2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023da:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80023dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023e0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80023e4:	4d06      	ldr	r5, [pc, #24]	; (8002400 <TIM_OC4_SetConfig+0x40>)
 80023e6:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80023e8:	bf02      	ittt	eq
 80023ea:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023ec:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80023f0:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023f4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023f6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023f8:	684a      	ldr	r2, [r1, #4]
 80023fa:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023fc:	6203      	str	r3, [r0, #32]
 80023fe:	bd30      	pop	{r4, r5, pc}
 8002400:	40012c00 	.word	0x40012c00

08002404 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002404:	6803      	ldr	r3, [r0, #0]
}
 8002406:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]
}
 8002418:	4770      	bx	lr

0800241a <HAL_TIM_PWM_MspInit>:
 800241a:	4770      	bx	lr

0800241c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800241c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002420:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002422:	2b01      	cmp	r3, #1
 8002424:	f04f 0302 	mov.w	r3, #2
 8002428:	d01c      	beq.n	8002464 <HAL_TIM_ConfigClockSource+0x48>
 800242a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002430:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002432:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002436:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002438:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800243c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002440:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002442:	680a      	ldr	r2, [r1, #0]
 8002444:	2a40      	cmp	r2, #64	; 0x40
 8002446:	d079      	beq.n	800253c <HAL_TIM_ConfigClockSource+0x120>
 8002448:	d819      	bhi.n	800247e <HAL_TIM_ConfigClockSource+0x62>
 800244a:	2a10      	cmp	r2, #16
 800244c:	f000 8093 	beq.w	8002576 <HAL_TIM_ConfigClockSource+0x15a>
 8002450:	d80a      	bhi.n	8002468 <HAL_TIM_ConfigClockSource+0x4c>
 8002452:	2a00      	cmp	r2, #0
 8002454:	f000 8089 	beq.w	800256a <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8002458:	2301      	movs	r3, #1
 800245a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800245e:	2300      	movs	r3, #0
 8002460:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002464:	4618      	mov	r0, r3
}
 8002466:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002468:	2a20      	cmp	r2, #32
 800246a:	f000 808a 	beq.w	8002582 <HAL_TIM_ConfigClockSource+0x166>
 800246e:	2a30      	cmp	r2, #48	; 0x30
 8002470:	d1f2      	bne.n	8002458 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002472:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002474:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002478:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800247c:	e036      	b.n	80024ec <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800247e:	2a70      	cmp	r2, #112	; 0x70
 8002480:	d036      	beq.n	80024f0 <HAL_TIM_ConfigClockSource+0xd4>
 8002482:	d81b      	bhi.n	80024bc <HAL_TIM_ConfigClockSource+0xa0>
 8002484:	2a50      	cmp	r2, #80	; 0x50
 8002486:	d042      	beq.n	800250e <HAL_TIM_ConfigClockSource+0xf2>
 8002488:	2a60      	cmp	r2, #96	; 0x60
 800248a:	d1e5      	bne.n	8002458 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800248c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800248e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002490:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002494:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002496:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002498:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800249a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800249c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80024a4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024a8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80024ac:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ae:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80024b0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80024b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80024b6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80024ba:	e017      	b.n	80024ec <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80024bc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80024c0:	d011      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0xca>
 80024c2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80024c6:	d1c7      	bne.n	8002458 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024c8:	688a      	ldr	r2, [r1, #8]
 80024ca:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80024cc:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024ce:	68c9      	ldr	r1, [r1, #12]
 80024d0:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024d2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024da:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024dc:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024e4:	e002      	b.n	80024ec <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	e7b3      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024f0:	688a      	ldr	r2, [r1, #8]
 80024f2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80024f4:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024f6:	68c9      	ldr	r1, [r1, #12]
 80024f8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024fa:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002502:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002504:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002506:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002508:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800250c:	e7ee      	b.n	80024ec <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800250e:	684c      	ldr	r4, [r1, #4]
 8002510:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002512:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002514:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002516:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800251a:	f025 0501 	bic.w	r5, r5, #1
 800251e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002520:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002522:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002524:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002528:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800252c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800252e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002530:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002532:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002536:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800253a:	e7d7      	b.n	80024ec <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800253c:	684c      	ldr	r4, [r1, #4]
 800253e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002540:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002542:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002544:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002548:	f025 0501 	bic.w	r5, r5, #1
 800254c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800254e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002550:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002552:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002556:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800255a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800255c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800255e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002560:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002564:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002568:	e7c0      	b.n	80024ec <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800256a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800256c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002570:	f042 0207 	orr.w	r2, r2, #7
 8002574:	e7ba      	b.n	80024ec <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002576:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002578:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800257c:	f042 0217 	orr.w	r2, r2, #23
 8002580:	e7b4      	b.n	80024ec <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002582:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002584:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002588:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800258c:	e7ae      	b.n	80024ec <HAL_TIM_ConfigClockSource+0xd0>

0800258e <HAL_TIM_PeriodElapsedCallback>:
 800258e:	4770      	bx	lr

08002590 <HAL_TIM_OC_DelayElapsedCallback>:
 8002590:	4770      	bx	lr

08002592 <HAL_TIM_IC_CaptureCallback>:
 8002592:	4770      	bx	lr

08002594 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002594:	4770      	bx	lr

08002596 <HAL_TIM_TriggerCallback>:
 8002596:	4770      	bx	lr

08002598 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002598:	6803      	ldr	r3, [r0, #0]
{
 800259a:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800259c:	691a      	ldr	r2, [r3, #16]
{
 800259e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025a0:	0791      	lsls	r1, r2, #30
 80025a2:	d50e      	bpl.n	80025c2 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	0792      	lsls	r2, r2, #30
 80025a8:	d50b      	bpl.n	80025c2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025aa:	f06f 0202 	mvn.w	r2, #2
 80025ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b0:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025b2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b4:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025b6:	079b      	lsls	r3, r3, #30
 80025b8:	d077      	beq.n	80026aa <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	f7ff ffea 	bl	8002592 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025be:	2300      	movs	r3, #0
 80025c0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	0750      	lsls	r0, r2, #29
 80025c8:	d510      	bpl.n	80025ec <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	0751      	lsls	r1, r2, #29
 80025ce:	d50d      	bpl.n	80025ec <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025d0:	f06f 0204 	mvn.w	r2, #4
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025d6:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025da:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025dc:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80025e0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025e2:	d068      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80025e4:	f7ff ffd5 	bl	8002592 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e8:	2300      	movs	r3, #0
 80025ea:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	0712      	lsls	r2, r2, #28
 80025f2:	d50f      	bpl.n	8002614 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	0710      	lsls	r0, r2, #28
 80025f8:	d50c      	bpl.n	8002614 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025fa:	f06f 0208 	mvn.w	r2, #8
 80025fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002600:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002602:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002604:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002606:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002608:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800260a:	d05a      	beq.n	80026c2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800260c:	f7ff ffc1 	bl	8002592 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002610:	2300      	movs	r3, #0
 8002612:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002614:	6823      	ldr	r3, [r4, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	06d2      	lsls	r2, r2, #27
 800261a:	d510      	bpl.n	800263e <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	06d0      	lsls	r0, r2, #27
 8002620:	d50d      	bpl.n	800263e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002622:	f06f 0210 	mvn.w	r2, #16
 8002626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002628:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800262a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800262c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800262e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002632:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002634:	d04b      	beq.n	80026ce <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002636:	f7ff ffac 	bl	8002592 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263a:	2300      	movs	r3, #0
 800263c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	691a      	ldr	r2, [r3, #16]
 8002642:	07d1      	lsls	r1, r2, #31
 8002644:	d508      	bpl.n	8002658 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	07d2      	lsls	r2, r2, #31
 800264a:	d505      	bpl.n	8002658 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800264c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002650:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002652:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002654:	f7ff ff9b 	bl	800258e <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	0610      	lsls	r0, r2, #24
 800265e:	d508      	bpl.n	8002672 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	0611      	lsls	r1, r2, #24
 8002664:	d505      	bpl.n	8002672 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002666:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800266a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800266c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800266e:	f000 f974 	bl	800295a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	0652      	lsls	r2, r2, #25
 8002678:	d508      	bpl.n	800268c <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	0650      	lsls	r0, r2, #25
 800267e:	d505      	bpl.n	800268c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002680:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002684:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002686:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002688:	f7ff ff85 	bl	8002596 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	0691      	lsls	r1, r2, #26
 8002692:	d522      	bpl.n	80026da <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	0692      	lsls	r2, r2, #26
 8002698:	d51f      	bpl.n	80026da <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800269a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800269e:	4620      	mov	r0, r4
}
 80026a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80026a6:	f000 b957 	b.w	8002958 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026aa:	f7ff ff71 	bl	8002590 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ae:	4620      	mov	r0, r4
 80026b0:	f7ff ff70 	bl	8002594 <HAL_TIM_PWM_PulseFinishedCallback>
 80026b4:	e783      	b.n	80025be <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b6:	f7ff ff6b 	bl	8002590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ba:	4620      	mov	r0, r4
 80026bc:	f7ff ff6a 	bl	8002594 <HAL_TIM_PWM_PulseFinishedCallback>
 80026c0:	e792      	b.n	80025e8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c2:	f7ff ff65 	bl	8002590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c6:	4620      	mov	r0, r4
 80026c8:	f7ff ff64 	bl	8002594 <HAL_TIM_PWM_PulseFinishedCallback>
 80026cc:	e7a0      	b.n	8002610 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	f7ff ff5f 	bl	8002590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d2:	4620      	mov	r0, r4
 80026d4:	f7ff ff5e 	bl	8002594 <HAL_TIM_PWM_PulseFinishedCallback>
 80026d8:	e7af      	b.n	800263a <HAL_TIM_IRQHandler+0xa2>
 80026da:	bd10      	pop	{r4, pc}

080026dc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026dc:	4a1a      	ldr	r2, [pc, #104]	; (8002748 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80026de:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e0:	4290      	cmp	r0, r2
 80026e2:	d00a      	beq.n	80026fa <TIM_Base_SetConfig+0x1e>
 80026e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80026e8:	d007      	beq.n	80026fa <TIM_Base_SetConfig+0x1e>
 80026ea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80026ee:	4290      	cmp	r0, r2
 80026f0:	d003      	beq.n	80026fa <TIM_Base_SetConfig+0x1e>
 80026f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026f6:	4290      	cmp	r0, r2
 80026f8:	d115      	bne.n	8002726 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80026fa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002700:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002702:	4a11      	ldr	r2, [pc, #68]	; (8002748 <TIM_Base_SetConfig+0x6c>)
 8002704:	4290      	cmp	r0, r2
 8002706:	d00a      	beq.n	800271e <TIM_Base_SetConfig+0x42>
 8002708:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800270c:	d007      	beq.n	800271e <TIM_Base_SetConfig+0x42>
 800270e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002712:	4290      	cmp	r0, r2
 8002714:	d003      	beq.n	800271e <TIM_Base_SetConfig+0x42>
 8002716:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800271a:	4290      	cmp	r0, r2
 800271c:	d103      	bne.n	8002726 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800271e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002724:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002726:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800272c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800272e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002730:	688b      	ldr	r3, [r1, #8]
 8002732:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002734:	680b      	ldr	r3, [r1, #0]
 8002736:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <TIM_Base_SetConfig+0x6c>)
 800273a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800273c:	bf04      	itt	eq
 800273e:	690b      	ldreq	r3, [r1, #16]
 8002740:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002742:	2301      	movs	r3, #1
 8002744:	6143      	str	r3, [r0, #20]
 8002746:	4770      	bx	lr
 8002748:	40012c00 	.word	0x40012c00

0800274c <HAL_TIM_Base_Init>:
{
 800274c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800274e:	4604      	mov	r4, r0
 8002750:	b1a0      	cbz	r0, 800277c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002752:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002756:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800275a:	b91b      	cbnz	r3, 8002764 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800275c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002760:	f001 f9da 	bl	8003b18 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002764:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002766:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002768:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800276c:	1d21      	adds	r1, r4, #4
 800276e:	f7ff ffb5 	bl	80026dc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002772:	2301      	movs	r3, #1
  return HAL_OK;
 8002774:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002776:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800277a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800277c:	2001      	movs	r0, #1
}
 800277e:	bd10      	pop	{r4, pc}

08002780 <HAL_TIM_PWM_Init>:
{
 8002780:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002782:	4604      	mov	r4, r0
 8002784:	b1a0      	cbz	r0, 80027b0 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002786:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800278a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800278e:	b91b      	cbnz	r3, 8002798 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002790:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002794:	f7ff fe41 	bl	800241a <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002798:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800279a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800279c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a0:	1d21      	adds	r1, r4, #4
 80027a2:	f7ff ff9b 	bl	80026dc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80027a6:	2301      	movs	r3, #1
  return HAL_OK;
 80027a8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80027aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80027ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027b0:	2001      	movs	r0, #1
}
 80027b2:	bd10      	pop	{r4, pc}

080027b4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027b4:	6a03      	ldr	r3, [r0, #32]
{
 80027b6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027b8:	f023 0310 	bic.w	r3, r3, #16
 80027bc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80027be:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80027c0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80027c2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027c6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027ce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80027d0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027d8:	4d0b      	ldr	r5, [pc, #44]	; (8002808 <TIM_OC2_SetConfig+0x54>)
 80027da:	42a8      	cmp	r0, r5
 80027dc:	d10d      	bne.n	80027fa <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027de:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80027e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027e4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80027e8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80027ea:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027ec:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80027f0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80027f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80027f6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80027fa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80027fc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80027fe:	684a      	ldr	r2, [r1, #4]
 8002800:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002802:	6203      	str	r3, [r0, #32]
 8002804:	bd70      	pop	{r4, r5, r6, pc}
 8002806:	bf00      	nop
 8002808:	40012c00 	.word	0x40012c00

0800280c <HAL_TIM_PWM_ConfigChannel>:
{
 800280c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800280e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002812:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002814:	2b01      	cmp	r3, #1
 8002816:	f04f 0002 	mov.w	r0, #2
 800281a:	d025      	beq.n	8002868 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800281c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800281e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002822:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002826:	2a0c      	cmp	r2, #12
 8002828:	d818      	bhi.n	800285c <HAL_TIM_PWM_ConfigChannel+0x50>
 800282a:	e8df f002 	tbb	[pc, r2]
 800282e:	1707      	.short	0x1707
 8002830:	171e1717 	.word	0x171e1717
 8002834:	172f1717 	.word	0x172f1717
 8002838:	1717      	.short	0x1717
 800283a:	40          	.byte	0x40
 800283b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800283c:	6820      	ldr	r0, [r4, #0]
 800283e:	f7ff fd6d 	bl	800231c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002842:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002844:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	f042 0208 	orr.w	r2, r2, #8
 800284c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800284e:	699a      	ldr	r2, [r3, #24]
 8002850:	f022 0204 	bic.w	r2, r2, #4
 8002854:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002856:	699a      	ldr	r2, [r3, #24]
 8002858:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800285a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800285c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800285e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002860:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002864:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002868:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800286a:	6820      	ldr	r0, [r4, #0]
 800286c:	f7ff ffa2 	bl	80027b4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002870:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002872:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800287a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800288a:	e7e6      	b.n	800285a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800288c:	6820      	ldr	r0, [r4, #0]
 800288e:	f7ff fd6d 	bl	800236c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002892:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002894:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002896:	69da      	ldr	r2, [r3, #28]
 8002898:	f042 0208 	orr.w	r2, r2, #8
 800289c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	f022 0204 	bic.w	r2, r2, #4
 80028a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028a6:	69da      	ldr	r2, [r3, #28]
 80028a8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80028aa:	61da      	str	r2, [r3, #28]
    break;
 80028ac:	e7d6      	b.n	800285c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028ae:	6820      	ldr	r0, [r4, #0]
 80028b0:	f7ff fd86 	bl	80023c0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028b4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80028b6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028b8:	69da      	ldr	r2, [r3, #28]
 80028ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028ce:	e7ec      	b.n	80028aa <HAL_TIM_PWM_ConfigChannel+0x9e>

080028d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028d0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80028d2:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028d4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80028d6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80028d8:	ea23 0304 	bic.w	r3, r3, r4
 80028dc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80028de:	6a03      	ldr	r3, [r0, #32]
 80028e0:	408a      	lsls	r2, r1
 80028e2:	431a      	orrs	r2, r3
 80028e4:	6202      	str	r2, [r0, #32]
 80028e6:	bd10      	pop	{r4, pc}

080028e8 <HAL_TIM_PWM_Start>:
{
 80028e8:	b510      	push	{r4, lr}
 80028ea:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028ec:	2201      	movs	r2, #1
 80028ee:	6800      	ldr	r0, [r0, #0]
 80028f0:	f7ff ffee 	bl	80028d0 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028f4:	6823      	ldr	r3, [r4, #0]
 80028f6:	4a06      	ldr	r2, [pc, #24]	; (8002910 <HAL_TIM_PWM_Start+0x28>)
}
 80028f8:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028fa:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80028fc:	bf02      	ittt	eq
 80028fe:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002900:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002904:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	f042 0201 	orr.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]
}
 800290e:	bd10      	pop	{r4, pc}
 8002910:	40012c00 	.word	0x40012c00

08002914 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002914:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002918:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800291a:	2b01      	cmp	r3, #1
 800291c:	f04f 0302 	mov.w	r3, #2
 8002920:	d018      	beq.n	8002954 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002922:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002926:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002928:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800292a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800292c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800292e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002932:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	4322      	orrs	r2, r4
 8002938:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002940:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	430a      	orrs	r2, r1
 8002946:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002948:	2301      	movs	r3, #1
 800294a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294e:	2300      	movs	r3, #0
 8002950:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002954:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002956:	bd10      	pop	{r4, pc}

08002958 <HAL_TIMEx_CommutationCallback>:
 8002958:	4770      	bx	lr

0800295a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800295a:	4770      	bx	lr

0800295c <Accel_ini>:
void Accel_ini()
{
	uint8_t data[1] =  {0};

	//reset the whole module first
	data[0] =  1<<7;
 800295c:	2380      	movs	r3, #128	; 0x80
{
 800295e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	status = HAL_I2C_Mem_Write(&hi2c1, (uint16_t)adress, (uint16_t)0x6B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 8002962:	2401      	movs	r4, #1
 8002964:	f44f 3880 	mov.w	r8, #65536	; 0x10000
{
 8002968:	b087      	sub	sp, #28
	data[0] =  1<<7;
 800296a:	ad06      	add	r5, sp, #24
	status = HAL_I2C_Mem_Write(&hi2c1, (uint16_t)adress, (uint16_t)0x6B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 800296c:	4f1f      	ldr	r7, [pc, #124]	; (80029ec <Accel_ini+0x90>)
	data[0] =  1<<7;
 800296e:	f805 3d04 	strb.w	r3, [r5, #-4]!
	status = HAL_I2C_Mem_Write(&hi2c1, (uint16_t)adress, (uint16_t)0x6B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 8002972:	226b      	movs	r2, #107	; 0x6b
 8002974:	4623      	mov	r3, r4
 8002976:	21d0      	movs	r1, #208	; 0xd0
 8002978:	f8cd 8008 	str.w	r8, [sp, #8]
 800297c:	9401      	str	r4, [sp, #4]
 800297e:	9500      	str	r5, [sp, #0]
 8002980:	4638      	mov	r0, r7
 8002982:	f7fe ffdb 	bl	800193c <HAL_I2C_Mem_Write>


	HAL_Delay(50);    //wait for 50ms for the gyro to stable
	data[0] = 0x00;
 8002986:	f04f 0900 	mov.w	r9, #0
	status = HAL_I2C_Mem_Write(&hi2c1, (uint16_t)adress, (uint16_t)0x6B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 800298a:	4e19      	ldr	r6, [pc, #100]	; (80029f0 <Accel_ini+0x94>)
 800298c:	7030      	strb	r0, [r6, #0]
	HAL_Delay(50);    //wait for 50ms for the gyro to stable
 800298e:	2032      	movs	r0, #50	; 0x32
 8002990:	f7fe fb5a 	bl	8001048 <HAL_Delay>
	status = HAL_I2C_Mem_Write(&hi2c1, adress, 0x6B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 8002994:	4623      	mov	r3, r4
 8002996:	f8cd 8008 	str.w	r8, [sp, #8]
 800299a:	9401      	str	r4, [sp, #4]
 800299c:	9500      	str	r5, [sp, #0]
 800299e:	226b      	movs	r2, #107	; 0x6b
 80029a0:	21d0      	movs	r1, #208	; 0xd0
 80029a2:	4638      	mov	r0, r7
	data[0] = 0x00;
 80029a4:	f88d 9014 	strb.w	r9, [sp, #20]
	status = HAL_I2C_Mem_Write(&hi2c1, adress, 0x6B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 80029a8:	f7fe ffc8 	bl	800193c <HAL_I2C_Mem_Write>
	//GYRO_CONFIG: FSR 500
	data[0] = 0x08;
 80029ac:	2308      	movs	r3, #8
	status = HAL_I2C_Mem_Write(&hi2c1, adress, 0x6B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 80029ae:	7030      	strb	r0, [r6, #0]
	data[0] = 0x08;
 80029b0:	f88d 3014 	strb.w	r3, [sp, #20]
		status = HAL_I2C_Mem_Write(&hi2c1, adress, 0x1B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 80029b4:	f8cd 8008 	str.w	r8, [sp, #8]
 80029b8:	4623      	mov	r3, r4
 80029ba:	9401      	str	r4, [sp, #4]
 80029bc:	9500      	str	r5, [sp, #0]
 80029be:	221b      	movs	r2, #27
 80029c0:	21d0      	movs	r1, #208	; 0xd0
 80029c2:	4638      	mov	r0, r7
 80029c4:	f7fe ffba 	bl	800193c <HAL_I2C_Mem_Write>
	//ACCEL_CONFIG: 2g
		data[0] = 0x0;
		status =  HAL_I2C_Mem_Write(&hi2c1, adress, 0x1C, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 80029c8:	f8cd 8008 	str.w	r8, [sp, #8]
		status = HAL_I2C_Mem_Write(&hi2c1, adress, 0x1B, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 80029cc:	7030      	strb	r0, [r6, #0]
		status =  HAL_I2C_Mem_Write(&hi2c1, adress, 0x1C, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 80029ce:	9401      	str	r4, [sp, #4]
 80029d0:	9500      	str	r5, [sp, #0]
 80029d2:	4623      	mov	r3, r4
 80029d4:	221c      	movs	r2, #28
 80029d6:	21d0      	movs	r1, #208	; 0xd0
 80029d8:	4638      	mov	r0, r7
		data[0] = 0x0;
 80029da:	f88d 9014 	strb.w	r9, [sp, #20]
		status =  HAL_I2C_Mem_Write(&hi2c1, adress, 0x1C, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 80029de:	f7fe ffad 	bl	800193c <HAL_I2C_Mem_Write>
 80029e2:	7030      	strb	r0, [r6, #0]
}
 80029e4:	b007      	add	sp, #28
 80029e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029ea:	bf00      	nop
 80029ec:	20000504 	.word	0x20000504
 80029f0:	200005f8 	.word	0x200005f8

080029f4 <Accel_GetXYZ>:

void Accel_GetXYZ(int16_t* pData1)

{
 uint8_t buffer1[6] = {0};
 80029f4:	2200      	movs	r2, #0
{
 80029f6:	b510      	push	{r4, lr}
 80029f8:	b086      	sub	sp, #24
 uint8_t buffer1[6] = {0};
 80029fa:	9204      	str	r2, [sp, #16]
 80029fc:	f8ad 2014 	strh.w	r2, [sp, #20]
  /* Read output register X, Y & Z acceleration */
status = HAL_I2C_Mem_Read(&hi2c1, adress, 0x3B, I2C_MEMADD_SIZE_8BIT, buffer1, (uint16_t)0x06, 0x10000);
 8002a00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a04:	9202      	str	r2, [sp, #8]
 8002a06:	2206      	movs	r2, #6
 uint8_t buffer1[6] = {0};
 8002a08:	ab04      	add	r3, sp, #16
{
 8002a0a:	4604      	mov	r4, r0
status = HAL_I2C_Mem_Read(&hi2c1, adress, 0x3B, I2C_MEMADD_SIZE_8BIT, buffer1, (uint16_t)0x06, 0x10000);
 8002a0c:	9201      	str	r2, [sp, #4]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	223b      	movs	r2, #59	; 0x3b
 8002a12:	2301      	movs	r3, #1
 8002a14:	21d0      	movs	r1, #208	; 0xd0
 8002a16:	480e      	ldr	r0, [pc, #56]	; (8002a50 <Accel_GetXYZ+0x5c>)
 8002a18:	f7ff f826 	bl	8001a68 <HAL_I2C_Mem_Read>
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <Accel_GetXYZ+0x60>)

for(uint8_t i=0; i<3; i++)
    {
      pData1[i]=(int16_t)(((uint16_t)buffer1[2*i] << 8) + buffer1[2*i+1]);
 8002a1e:	f89d 2010 	ldrb.w	r2, [sp, #16]
status = HAL_I2C_Mem_Read(&hi2c1, adress, 0x3B, I2C_MEMADD_SIZE_8BIT, buffer1, (uint16_t)0x06, 0x10000);
 8002a22:	7018      	strb	r0, [r3, #0]
      pData1[i]=(int16_t)(((uint16_t)buffer1[2*i] << 8) + buffer1[2*i+1]);
 8002a24:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002a28:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a2c:	8023      	strh	r3, [r4, #0]
 8002a2e:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8002a32:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8002a36:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a3a:	8063      	strh	r3, [r4, #2]
 8002a3c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002a40:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002a44:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a48:	80a3      	strh	r3, [r4, #4]
    }
}
 8002a4a:	b006      	add	sp, #24
 8002a4c:	bd10      	pop	{r4, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000504 	.word	0x20000504
 8002a54:	200005f8 	.word	0x200005f8

08002a58 <Gyro_GetXYZ>:

void Gyro_GetXYZ(int16_t* pData2)

{
 uint8_t buffer2[6] = {0};
 8002a58:	2200      	movs	r2, #0
{
 8002a5a:	b510      	push	{r4, lr}
 8002a5c:	b086      	sub	sp, #24
 uint8_t buffer2[6] = {0};
 8002a5e:	9204      	str	r2, [sp, #16]
 8002a60:	f8ad 2014 	strh.w	r2, [sp, #20]
  /* Read output register X, Y & Z gyroscope */
status = HAL_I2C_Mem_Read(&hi2c1, adress, 0x43, I2C_MEMADD_SIZE_8BIT, buffer2, (uint16_t)0x06, 0x10000);
 8002a64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a68:	9202      	str	r2, [sp, #8]
 8002a6a:	2206      	movs	r2, #6
 uint8_t buffer2[6] = {0};
 8002a6c:	ab04      	add	r3, sp, #16
{
 8002a6e:	4604      	mov	r4, r0
status = HAL_I2C_Mem_Read(&hi2c1, adress, 0x43, I2C_MEMADD_SIZE_8BIT, buffer2, (uint16_t)0x06, 0x10000);
 8002a70:	9201      	str	r2, [sp, #4]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2243      	movs	r2, #67	; 0x43
 8002a76:	2301      	movs	r3, #1
 8002a78:	21d0      	movs	r1, #208	; 0xd0
 8002a7a:	480e      	ldr	r0, [pc, #56]	; (8002ab4 <Gyro_GetXYZ+0x5c>)
 8002a7c:	f7fe fff4 	bl	8001a68 <HAL_I2C_Mem_Read>
 8002a80:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <Gyro_GetXYZ+0x60>)

for(uint8_t i=0; i<3; i++)
    {
      pData2[i]=(int16_t)(((uint16_t)buffer2[2*i] << 8) + buffer2[2*i+1]);
 8002a82:	f89d 2010 	ldrb.w	r2, [sp, #16]
status = HAL_I2C_Mem_Read(&hi2c1, adress, 0x43, I2C_MEMADD_SIZE_8BIT, buffer2, (uint16_t)0x06, 0x10000);
 8002a86:	7018      	strb	r0, [r3, #0]
      pData2[i]=(int16_t)(((uint16_t)buffer2[2*i] << 8) + buffer2[2*i+1]);
 8002a88:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002a8c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a90:	8023      	strh	r3, [r4, #0]
 8002a92:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8002a96:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8002a9a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a9e:	8063      	strh	r3, [r4, #2]
 8002aa0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002aa4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002aa8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002aac:	80a3      	strh	r3, [r4, #4]
    }

}
 8002aae:	b006      	add	sp, #24
 8002ab0:	bd10      	pop	{r4, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000504 	.word	0x20000504
 8002ab8:	200005f8 	.word	0x200005f8
 8002abc:	00000000 	.word	0x00000000

08002ac0 <Accel_ReadAcc>:
void Accel_ReadAcc(void)
{
int16_t buffer[3] = {0};
 8002ac0:	2300      	movs	r3, #0
{
 8002ac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 xval = yval = zval = 0x00;
 8002ac6:	4c72      	ldr	r4, [pc, #456]	; (8002c90 <Accel_ReadAcc+0x1d0>)
{
 8002ac8:	b085      	sub	sp, #20
 xval = yval = zval = 0x00;
 8002aca:	4d72      	ldr	r5, [pc, #456]	; (8002c94 <Accel_ReadAcc+0x1d4>)
 8002acc:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8002cb0 <Accel_ReadAcc+0x1f0>

 Accel_GetXYZ(buffer);
 8002ad0:	a802      	add	r0, sp, #8
int16_t buffer[3] = {0};
 8002ad2:	9302      	str	r3, [sp, #8]
 8002ad4:	f8ad 300c 	strh.w	r3, [sp, #12]
 xval = yval = zval = 0x00;
 8002ad8:	8023      	strh	r3, [r4, #0]
 8002ada:	802b      	strh	r3, [r5, #0]
 8002adc:	f8aa 3000 	strh.w	r3, [sl]
 Accel_GetXYZ(buffer);
 8002ae0:	f7ff ff88 	bl	80029f4 <Accel_GetXYZ>

 /*xval = buffer[0];
 yval = buffer[1];
 zval = buffer[2];*/
 ydata = atan2(buffer[1], sqrt(pow(buffer[0], 2) + pow(buffer[2], 2))) * R2DEG;
 8002ae4:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 8002ae8:	f7fd fc84 	bl	80003f4 <__aeabi_i2d>
 8002aec:	4606      	mov	r6, r0
 8002aee:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8002af2:	460f      	mov	r7, r1
 8002af4:	f7fd fc7e 	bl	80003f4 <__aeabi_i2d>
 8002af8:	4680      	mov	r8, r0
 8002afa:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8002afe:	4689      	mov	r9, r1
 8002b00:	f7fd fc78 	bl	80003f4 <__aeabi_i2d>
 8002b04:	4642      	mov	r2, r8
 8002b06:	e9cd 0100 	strd	r0, r1, [sp]
 8002b0a:	464b      	mov	r3, r9
 8002b0c:	4640      	mov	r0, r8
 8002b0e:	4649      	mov	r1, r9
 8002b10:	f7fd fcd6 	bl	80004c0 <__aeabi_dmul>
 8002b14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b18:	4680      	mov	r8, r0
 8002b1a:	4689      	mov	r9, r1
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f7fd fcce 	bl	80004c0 <__aeabi_dmul>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4640      	mov	r0, r8
 8002b2a:	4649      	mov	r1, r9
 8002b2c:	f7fd fb16 	bl	800015c <__adddf3>
 8002b30:	f001 f910 	bl	8003d54 <sqrt>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4630      	mov	r0, r6
 8002b3a:	4639      	mov	r1, r7
 8002b3c:	f001 f908 	bl	8003d50 <atan2>
 8002b40:	a34d      	add	r3, pc, #308	; (adr r3, 8002c78 <Accel_ReadAcc+0x1b8>)
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f7fd fcbb 	bl	80004c0 <__aeabi_dmul>
 8002b4a:	f7fd ff69 	bl	8000a20 <__aeabi_d2iz>
 8002b4e:	f8df b164 	ldr.w	fp, [pc, #356]	; 8002cb4 <Accel_ReadAcc+0x1f4>
 8002b52:	f8ab 0000 	strh.w	r0, [fp]
 xdata = atan2(buffer[0], sqrt(pow(buffer[1], 2) + pow(buffer[2], 2))) * R2DEG;
 8002b56:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8002b5a:	f7fd fc4b 	bl	80003f4 <__aeabi_i2d>
 8002b5e:	4680      	mov	r8, r0
 8002b60:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 8002b64:	4689      	mov	r9, r1
 8002b66:	f7fd fc45 	bl	80003f4 <__aeabi_i2d>
 8002b6a:	4606      	mov	r6, r0
 8002b6c:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8002b70:	460f      	mov	r7, r1
 8002b72:	f7fd fc3f 	bl	80003f4 <__aeabi_i2d>
 8002b76:	4632      	mov	r2, r6
 8002b78:	e9cd 0100 	strd	r0, r1, [sp]
 8002b7c:	463b      	mov	r3, r7
 8002b7e:	4630      	mov	r0, r6
 8002b80:	4639      	mov	r1, r7
 8002b82:	f7fd fc9d 	bl	80004c0 <__aeabi_dmul>
 8002b86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b8a:	4606      	mov	r6, r0
 8002b8c:	460f      	mov	r7, r1
 8002b8e:	4610      	mov	r0, r2
 8002b90:	4619      	mov	r1, r3
 8002b92:	f7fd fc95 	bl	80004c0 <__aeabi_dmul>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4630      	mov	r0, r6
 8002b9c:	4639      	mov	r1, r7
 8002b9e:	f7fd fadd 	bl	800015c <__adddf3>
 8002ba2:	f001 f8d7 	bl	8003d54 <sqrt>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4640      	mov	r0, r8
 8002bac:	4649      	mov	r1, r9
 8002bae:	f001 f8cf 	bl	8003d50 <atan2>
 8002bb2:	a331      	add	r3, pc, #196	; (adr r3, 8002c78 <Accel_ReadAcc+0x1b8>)
 8002bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb8:	f7fd fc82 	bl	80004c0 <__aeabi_dmul>
 8002bbc:	f7fd ff30 	bl	8000a20 <__aeabi_d2iz>
 8002bc0:	4b35      	ldr	r3, [pc, #212]	; (8002c98 <Accel_ReadAcc+0x1d8>)
 8002bc2:	fa0f f880 	sxth.w	r8, r0
 8002bc6:	f8a3 8000 	strh.w	r8, [r3]
 //zdata = ((int16_t)(buffer[2]/ R2DEG)) % 180;
 xtemp = XGf + xdata;
 8002bca:	4b34      	ldr	r3, [pc, #208]	; (8002c9c <Accel_ReadAcc+0x1dc>)
 ytemp = YGf + ydata;
 8002bcc:	f9bb b000 	ldrsh.w	fp, [fp]
 xtemp = XGf + xdata;
 8002bd0:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002bd4:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <Accel_ReadAcc+0x1e0>)
 8002bd6:	eb08 0200 	add.w	r2, r8, r0
 8002bda:	801a      	strh	r2, [r3, #0]
 ytemp = YGf + ydata;
 8002bdc:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <Accel_ReadAcc+0x1e4>)
 8002bde:	f9b3 9000 	ldrsh.w	r9, [r3]
 8002be2:	4b31      	ldr	r3, [pc, #196]	; (8002ca8 <Accel_ReadAcc+0x1e8>)
 8002be4:	eb09 020b 	add.w	r2, r9, fp
 8002be8:	801a      	strh	r2, [r3, #0]
 xval= XGf * (1 - KOEF_COMPL) + xdata*KOEF_COMPL;
 8002bea:	f7fd fc03 	bl	80003f4 <__aeabi_i2d>
 8002bee:	a324      	add	r3, pc, #144	; (adr r3, 8002c80 <Accel_ReadAcc+0x1c0>)
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	f7fd fc64 	bl	80004c0 <__aeabi_dmul>
 8002bf8:	4606      	mov	r6, r0
 8002bfa:	4640      	mov	r0, r8
 8002bfc:	460f      	mov	r7, r1
 8002bfe:	f7fd fbf9 	bl	80003f4 <__aeabi_i2d>
 8002c02:	a321      	add	r3, pc, #132	; (adr r3, 8002c88 <Accel_ReadAcc+0x1c8>)
 8002c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c08:	f7fd fc5a 	bl	80004c0 <__aeabi_dmul>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4630      	mov	r0, r6
 8002c12:	4639      	mov	r1, r7
 8002c14:	f7fd faa2 	bl	800015c <__adddf3>
 8002c18:	f7fd ff02 	bl	8000a20 <__aeabi_d2iz>
 8002c1c:	f8aa 0000 	strh.w	r0, [sl]
yval = YGf * (1-KOEF_COMPL) + ydata*KOEF_COMPL;
 8002c20:	4648      	mov	r0, r9
 8002c22:	f7fd fbe7 	bl	80003f4 <__aeabi_i2d>
 8002c26:	a316      	add	r3, pc, #88	; (adr r3, 8002c80 <Accel_ReadAcc+0x1c0>)
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	f7fd fc48 	bl	80004c0 <__aeabi_dmul>
 8002c30:	4606      	mov	r6, r0
 8002c32:	4658      	mov	r0, fp
 8002c34:	460f      	mov	r7, r1
 8002c36:	f7fd fbdd 	bl	80003f4 <__aeabi_i2d>
 8002c3a:	a313      	add	r3, pc, #76	; (adr r3, 8002c88 <Accel_ReadAcc+0x1c8>)
 8002c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c40:	f7fd fc3e 	bl	80004c0 <__aeabi_dmul>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4630      	mov	r0, r6
 8002c4a:	4639      	mov	r1, r7
 8002c4c:	f7fd fa86 	bl	800015c <__adddf3>
 8002c50:	f7fd fee6 	bl	8000a20 <__aeabi_d2iz>
zval = ZGf * (1-KOEF_COMPL);
 8002c54:	4b15      	ldr	r3, [pc, #84]	; (8002cac <Accel_ReadAcc+0x1ec>)
yval = YGf * (1-KOEF_COMPL) + ydata*KOEF_COMPL;
 8002c56:	8028      	strh	r0, [r5, #0]
zval = ZGf * (1-KOEF_COMPL);
 8002c58:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002c5c:	f7fd fbca 	bl	80003f4 <__aeabi_i2d>
 8002c60:	a307      	add	r3, pc, #28	; (adr r3, 8002c80 <Accel_ReadAcc+0x1c0>)
 8002c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c66:	f7fd fc2b 	bl	80004c0 <__aeabi_dmul>
 8002c6a:	f7fd fed9 	bl	8000a20 <__aeabi_d2iz>
 8002c6e:	8020      	strh	r0, [r4, #0]
}
 8002c70:	b005      	add	sp, #20
 8002c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c76:	bf00      	nop
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	404ca5dc 	.word	0x404ca5dc
 8002c80:	9999999a 	.word	0x9999999a
 8002c84:	3fe99999 	.word	0x3fe99999
 8002c88:	9999999a 	.word	0x9999999a
 8002c8c:	3fc99999 	.word	0x3fc99999
 8002c90:	200005e2 	.word	0x200005e2
 8002c94:	200005b4 	.word	0x200005b4
 8002c98:	200005de 	.word	0x200005de
 8002c9c:	200005e4 	.word	0x200005e4
 8002ca0:	200005dc 	.word	0x200005dc
 8002ca4:	200005b8 	.word	0x200005b8
 8002ca8:	200005ac 	.word	0x200005ac
 8002cac:	200005d0 	.word	0x200005d0
 8002cb0:	200005da 	.word	0x200005da
 8002cb4:	200005e0 	.word	0x200005e0

08002cb8 <ReadGyro>:

void ReadGyro(void)
{
int16_t buffer[3] = {0};
 8002cb8:	2300      	movs	r3, #0
{
 8002cba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 xGyro = yGyro = zGyro = 0x00;
 8002cbe:	4e44      	ldr	r6, [pc, #272]	; (8002dd0 <ReadGyro+0x118>)
 8002cc0:	4c44      	ldr	r4, [pc, #272]	; (8002dd4 <ReadGyro+0x11c>)
 8002cc2:	4d45      	ldr	r5, [pc, #276]	; (8002dd8 <ReadGyro+0x120>)

 Gyro_GetXYZ(buffer);
 8002cc4:	4668      	mov	r0, sp
int16_t buffer[3] = {0};
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	f8ad 3004 	strh.w	r3, [sp, #4]
 xGyro = yGyro = zGyro = 0x00;
 8002ccc:	8033      	strh	r3, [r6, #0]
 8002cce:	8023      	strh	r3, [r4, #0]
 8002cd0:	802b      	strh	r3, [r5, #0]
 Gyro_GetXYZ(buffer);
 8002cd2:	f7ff fec1 	bl	8002a58 <Gyro_GetXYZ>

 xGyro = buffer[0];
 yGyro = buffer[1];
 zGyro = buffer[2];

 XG = (xGyro - fGX_Cal);
 8002cd6:	4b41      	ldr	r3, [pc, #260]	; (8002ddc <ReadGyro+0x124>)
 xGyro = buffer[0];
 8002cd8:	f9bd 0000 	ldrsh.w	r0, [sp]
 XG = (xGyro - fGX_Cal);
 8002cdc:	681b      	ldr	r3, [r3, #0]
 xGyro = buffer[0];
 8002cde:	8028      	strh	r0, [r5, #0]
 XG = (xGyro - fGX_Cal);
 8002ce0:	1ac0      	subs	r0, r0, r3
 8002ce2:	4b3f      	ldr	r3, [pc, #252]	; (8002de0 <ReadGyro+0x128>)
 8002ce4:	b200      	sxth	r0, r0
 8002ce6:	8018      	strh	r0, [r3, #0]
 YG = (yGyro - fGY_Cal);
 8002ce8:	4b3e      	ldr	r3, [pc, #248]	; (8002de4 <ReadGyro+0x12c>)
 yGyro = buffer[1];
 8002cea:	f9bd 5002 	ldrsh.w	r5, [sp, #2]
 YG = (yGyro - fGY_Cal);
 8002cee:	681b      	ldr	r3, [r3, #0]
 yGyro = buffer[1];
 8002cf0:	8025      	strh	r5, [r4, #0]
 YG = (yGyro - fGY_Cal);
 8002cf2:	1aed      	subs	r5, r5, r3
 8002cf4:	4b3c      	ldr	r3, [pc, #240]	; (8002de8 <ReadGyro+0x130>)
 8002cf6:	b22d      	sxth	r5, r5
 8002cf8:	801d      	strh	r5, [r3, #0]
 ZG = (zGyro - fGZ_Cal);
 8002cfa:	4b3c      	ldr	r3, [pc, #240]	; (8002dec <ReadGyro+0x134>)
 zGyro = buffer[2];
 8002cfc:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 ZG = (zGyro - fGZ_Cal);
 8002d00:	681b      	ldr	r3, [r3, #0]
 zGyro = buffer[2];
 8002d02:	8034      	strh	r4, [r6, #0]
 ZG = (zGyro - fGZ_Cal);
 8002d04:	1ae4      	subs	r4, r4, r3
 8002d06:	4b3a      	ldr	r3, [pc, #232]	; (8002df0 <ReadGyro+0x138>)
 8002d08:	b224      	sxth	r4, r4
 8002d0a:	801c      	strh	r4, [r3, #0]

	 XGf += XG/65.5*0.15;
 8002d0c:	f7fd fb72 	bl	80003f4 <__aeabi_i2d>
 8002d10:	a32b      	add	r3, pc, #172	; (adr r3, 8002dc0 <ReadGyro+0x108>)
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	f7fd fcfd 	bl	8000714 <__aeabi_ddiv>
 8002d1a:	a32b      	add	r3, pc, #172	; (adr r3, 8002dc8 <ReadGyro+0x110>)
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	f7fd fbce 	bl	80004c0 <__aeabi_dmul>
 8002d24:	4e33      	ldr	r6, [pc, #204]	; (8002df4 <ReadGyro+0x13c>)
 8002d26:	4680      	mov	r8, r0
 8002d28:	f9b6 0000 	ldrsh.w	r0, [r6]
 8002d2c:	4689      	mov	r9, r1
 8002d2e:	f7fd fb61 	bl	80003f4 <__aeabi_i2d>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4640      	mov	r0, r8
 8002d38:	4649      	mov	r1, r9
 8002d3a:	f7fd fa0f 	bl	800015c <__adddf3>
 8002d3e:	f7fd fe6f 	bl	8000a20 <__aeabi_d2iz>
 8002d42:	8030      	strh	r0, [r6, #0]

	 YGf += YG/65.5*0.15;
 8002d44:	4628      	mov	r0, r5
 8002d46:	f7fd fb55 	bl	80003f4 <__aeabi_i2d>
 8002d4a:	a31d      	add	r3, pc, #116	; (adr r3, 8002dc0 <ReadGyro+0x108>)
 8002d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d50:	f7fd fce0 	bl	8000714 <__aeabi_ddiv>
 8002d54:	a31c      	add	r3, pc, #112	; (adr r3, 8002dc8 <ReadGyro+0x110>)
 8002d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5a:	f7fd fbb1 	bl	80004c0 <__aeabi_dmul>
 8002d5e:	4e26      	ldr	r6, [pc, #152]	; (8002df8 <ReadGyro+0x140>)
 8002d60:	4680      	mov	r8, r0
 8002d62:	f9b6 0000 	ldrsh.w	r0, [r6]
 8002d66:	4689      	mov	r9, r1
 8002d68:	f7fd fb44 	bl	80003f4 <__aeabi_i2d>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4640      	mov	r0, r8
 8002d72:	4649      	mov	r1, r9
 8002d74:	f7fd f9f2 	bl	800015c <__adddf3>
 8002d78:	f7fd fe52 	bl	8000a20 <__aeabi_d2iz>
 8002d7c:	8030      	strh	r0, [r6, #0]

	 ZGf += ZG/65.5*0.15;
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f7fd fb38 	bl	80003f4 <__aeabi_i2d>
 8002d84:	a30e      	add	r3, pc, #56	; (adr r3, 8002dc0 <ReadGyro+0x108>)
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	f7fd fcc3 	bl	8000714 <__aeabi_ddiv>
 8002d8e:	a30e      	add	r3, pc, #56	; (adr r3, 8002dc8 <ReadGyro+0x110>)
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f7fd fb94 	bl	80004c0 <__aeabi_dmul>
 8002d98:	4d18      	ldr	r5, [pc, #96]	; (8002dfc <ReadGyro+0x144>)
 8002d9a:	4606      	mov	r6, r0
 8002d9c:	f9b5 0000 	ldrsh.w	r0, [r5]
 8002da0:	460f      	mov	r7, r1
 8002da2:	f7fd fb27 	bl	80003f4 <__aeabi_i2d>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4630      	mov	r0, r6
 8002dac:	4639      	mov	r1, r7
 8002dae:	f7fd f9d5 	bl	800015c <__adddf3>
 8002db2:	f7fd fe35 	bl	8000a20 <__aeabi_d2iz>
 8002db6:	8028      	strh	r0, [r5, #0]
}
 8002db8:	b003      	add	sp, #12
 8002dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dbe:	bf00      	nop
 8002dc0:	00000000 	.word	0x00000000
 8002dc4:	40506000 	.word	0x40506000
 8002dc8:	33333333 	.word	0x33333333
 8002dcc:	3fc33333 	.word	0x3fc33333
 8002dd0:	200005f6 	.word	0x200005f6
 8002dd4:	200005d2 	.word	0x200005d2
 8002dd8:	200005ae 	.word	0x200005ae
 8002ddc:	200005c0 	.word	0x200005c0
 8002de0:	200005cc 	.word	0x200005cc
 8002de4:	200005c4 	.word	0x200005c4
 8002de8:	200005e8 	.word	0x200005e8
 8002dec:	200005bc 	.word	0x200005bc
 8002df0:	200005e6 	.word	0x200005e6
 8002df4:	200005e4 	.word	0x200005e4
 8002df8:	200005b8 	.word	0x200005b8
 8002dfc:	200005d0 	.word	0x200005d0

08002e00 <GyroCalibrate>:

void GyroCalibrate()
{
 8002e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e02:	f242 7410 	movw	r4, #10000	; 0x2710
	  uint16_t iNumCM = 10000;
	  for (int i = 0; i < iNumCM ; i++)
	  {
		  ReadGyro();
	    fGX_Cal += xGyro;
 8002e06:	4e0d      	ldr	r6, [pc, #52]	; (8002e3c <GyroCalibrate+0x3c>)
 8002e08:	4f0d      	ldr	r7, [pc, #52]	; (8002e40 <GyroCalibrate+0x40>)
	    fGY_Cal += yGyro;
 8002e0a:	4d0e      	ldr	r5, [pc, #56]	; (8002e44 <GyroCalibrate+0x44>)
		  ReadGyro();
 8002e0c:	f7ff ff54 	bl	8002cb8 <ReadGyro>
	    fGX_Cal += xGyro;
 8002e10:	6832      	ldr	r2, [r6, #0]
 8002e12:	f9b7 3000 	ldrsh.w	r3, [r7]
	  for (int i = 0; i < iNumCM ; i++)
 8002e16:	3c01      	subs	r4, #1
	    fGX_Cal += xGyro;
 8002e18:	4413      	add	r3, r2
 8002e1a:	6033      	str	r3, [r6, #0]
	    fGY_Cal += yGyro;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <GyroCalibrate+0x48>)
 8002e1e:	682a      	ldr	r2, [r5, #0]
 8002e20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e24:	4413      	add	r3, r2
 8002e26:	602b      	str	r3, [r5, #0]
	    fGZ_Cal += zGyro;
 8002e28:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <GyroCalibrate+0x4c>)
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <GyroCalibrate+0x50>)
 8002e2c:	6811      	ldr	r1, [r2, #0]
 8002e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e32:	440b      	add	r3, r1
 8002e34:	6013      	str	r3, [r2, #0]
	  for (int i = 0; i < iNumCM ; i++)
 8002e36:	d1e9      	bne.n	8002e0c <GyroCalibrate+0xc>
	  }
}
 8002e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	200005c0 	.word	0x200005c0
 8002e40:	200005ae 	.word	0x200005ae
 8002e44:	200005c4 	.word	0x200005c4
 8002e48:	200005d2 	.word	0x200005d2
 8002e4c:	200005bc 	.word	0x200005bc
 8002e50:	200005f6 	.word	0x200005f6

08002e54 <deriveGyro>:

void deriveGyro()
{
	  uint16_t iNumCM = 10000;
	fGX_Cal /= iNumCM;
 8002e54:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e58:	4907      	ldr	r1, [pc, #28]	; (8002e78 <deriveGyro+0x24>)
 8002e5a:	680b      	ldr	r3, [r1, #0]
 8002e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
		  fGY_Cal /= iNumCM;
 8002e62:	4906      	ldr	r1, [pc, #24]	; (8002e7c <deriveGyro+0x28>)
 8002e64:	680b      	ldr	r3, [r1, #0]
 8002e66:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]
		  fGZ_Cal /= iNumCM;
 8002e6c:	4904      	ldr	r1, [pc, #16]	; (8002e80 <deriveGyro+0x2c>)
 8002e6e:	680b      	ldr	r3, [r1, #0]
 8002e70:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e74:	600b      	str	r3, [r1, #0]
 8002e76:	4770      	bx	lr
 8002e78:	200005c0 	.word	0x200005c0
 8002e7c:	200005c4 	.word	0x200005c4
 8002e80:	200005bc 	.word	0x200005bc

08002e84 <getPID>:
 */

#include"PID.h"

int16_t getPID(int8_t error, int32_t sumErr, int8_t deltaErr)
{
 8002e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	P_koef = 0.7;
 8002e88:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <getPID+0x5c>)
 8002e8a:	4e16      	ldr	r6, [pc, #88]	; (8002ee4 <getPID+0x60>)
	I_koef = 0.2;
 8002e8c:	4d16      	ldr	r5, [pc, #88]	; (8002ee8 <getPID+0x64>)
	P_koef = 0.7;
 8002e8e:	601e      	str	r6, [r3, #0]
	I_koef = 0.2;
 8002e90:	4b16      	ldr	r3, [pc, #88]	; (8002eec <getPID+0x68>)
	D_koef = 0.4;
 8002e92:	4c17      	ldr	r4, [pc, #92]	; (8002ef0 <getPID+0x6c>)
	I_koef = 0.2;
 8002e94:	601d      	str	r5, [r3, #0]
	D_koef = 0.4;
 8002e96:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <getPID+0x70>)
{
 8002e98:	4617      	mov	r7, r2
	D_koef = 0.4;
 8002e9a:	601c      	str	r4, [r3, #0]
{
 8002e9c:	4688      	mov	r8, r1

	return P_koef*error + I_koef*sumErr + D_koef*deltaErr;
 8002e9e:	f7fd fec1 	bl	8000c24 <__aeabi_i2f>
 8002ea2:	4631      	mov	r1, r6
 8002ea4:	f7fd ff12 	bl	8000ccc <__aeabi_fmul>
 8002ea8:	4606      	mov	r6, r0
 8002eaa:	4640      	mov	r0, r8
 8002eac:	f7fd feba 	bl	8000c24 <__aeabi_i2f>
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	f7fd ff0b 	bl	8000ccc <__aeabi_fmul>
 8002eb6:	4601      	mov	r1, r0
 8002eb8:	4630      	mov	r0, r6
 8002eba:	f7fd fdff 	bl	8000abc <__addsf3>
 8002ebe:	4605      	mov	r5, r0
 8002ec0:	4638      	mov	r0, r7
 8002ec2:	f7fd feaf 	bl	8000c24 <__aeabi_i2f>
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	f7fd ff00 	bl	8000ccc <__aeabi_fmul>
 8002ecc:	4601      	mov	r1, r0
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f7fd fdf4 	bl	8000abc <__addsf3>
 8002ed4:	f7fe f84a 	bl	8000f6c <__aeabi_f2iz>
}
 8002ed8:	b200      	sxth	r0, r0
 8002eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ede:	bf00      	nop
 8002ee0:	200004a8 	.word	0x200004a8
 8002ee4:	3f333333 	.word	0x3f333333
 8002ee8:	3e4ccccd 	.word	0x3e4ccccd
 8002eec:	200004a4 	.word	0x200004a4
 8002ef0:	3ecccccd 	.word	0x3ecccccd
 8002ef4:	200004ac 	.word	0x200004ac

08002ef8 <selfStabilizing>:
#include"PID.h"

extern int16_t dMThX, dMThY, dMThZ;
extern int16_t xval, yval, zval;

void selfStabilizing() {
 8002ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //
    //TODO:
    int16_t _iRollError = (int16_t)((acRoll - xval) * 8);  // 125/8 = 15.6 degree = max
 8002efc:	4b8c      	ldr	r3, [pc, #560]	; (8003130 <selfStabilizing+0x238>)
void selfStabilizing() {
 8002efe:	b087      	sub	sp, #28
    int16_t _iRollError = (int16_t)((acRoll - xval) * 8);  // 125/8 = 15.6 degree = max
 8002f00:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002f04:	f7fd fe8e 	bl	8000c24 <__aeabi_i2f>
 8002f08:	4b8a      	ldr	r3, [pc, #552]	; (8003134 <selfStabilizing+0x23c>)
 8002f0a:	4601      	mov	r1, r0
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	f7fd fdd3 	bl	8000ab8 <__aeabi_fsub>
 8002f12:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002f16:	f7fd fed9 	bl	8000ccc <__aeabi_fmul>
 8002f1a:	f7fe f827 	bl	8000f6c <__aeabi_f2iz>
    int16_t _iPitchError = (int16_t)((acPitch - yval) * 8);  // 125/8 = 15.6 degree = max
    int16_t _iYawError = (int16_t)((acYaw - zval) * 8);
    //
    int8_t iRollError = constrain(_iRollError, -125, 125);
 8002f1e:	b206      	sxth	r6, r0
 8002f20:	2e7d      	cmp	r6, #125	; 0x7d
 8002f22:	f06f 077c 	mvn.w	r7, #124	; 0x7c
 8002f26:	bfa8      	it	ge
 8002f28:	267d      	movge	r6, #125	; 0x7d
 8002f2a:	42be      	cmp	r6, r7
 8002f2c:	bfb8      	it	lt
 8002f2e:	463e      	movlt	r6, r7
    int8_t iDeltaRError = constrain(iRollError - iprevRollError, -125, 125);
 8002f30:	4b81      	ldr	r3, [pc, #516]	; (8003138 <selfStabilizing+0x240>)
    int8_t iPitchError = constrain(_iPitchError, -125, 125);
    int8_t iDeltaPError = constrain(iPitchError - iprevPitchError, -125, 125);
    int8_t iYawError = constrain(_iYawError, -125, 125);
    int8_t iDeltaYError = constrain(iYawError - iprevYawError, -125, 125);
    //
    integrRError += iRollError*90/125 * 0.15;
 8002f32:	f04f 0a5a 	mov.w	sl, #90	; 0x5a
    int8_t iDeltaRError = constrain(iRollError - iprevRollError, -125, 125);
 8002f36:	f9b3 3000 	ldrsh.w	r3, [r3]
    integrRError += iRollError*90/125 * 0.15;
 8002f3a:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
    int8_t iDeltaRError = constrain(iRollError - iprevRollError, -125, 125);
 8002f3e:	1af3      	subs	r3, r6, r3
 8002f40:	2b7d      	cmp	r3, #125	; 0x7d
 8002f42:	bfa8      	it	ge
 8002f44:	237d      	movge	r3, #125	; 0x7d
 8002f46:	42bb      	cmp	r3, r7
 8002f48:	bfb8      	it	lt
 8002f4a:	463b      	movlt	r3, r7
 8002f4c:	b25b      	sxtb	r3, r3
 8002f4e:	9301      	str	r3, [sp, #4]
    int16_t _iPitchError = (int16_t)((acPitch - yval) * 8);  // 125/8 = 15.6 degree = max
 8002f50:	4b7a      	ldr	r3, [pc, #488]	; (800313c <selfStabilizing+0x244>)
 8002f52:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002f56:	f7fd fe65 	bl	8000c24 <__aeabi_i2f>
 8002f5a:	4b79      	ldr	r3, [pc, #484]	; (8003140 <selfStabilizing+0x248>)
 8002f5c:	4601      	mov	r1, r0
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	f7fd fdaa 	bl	8000ab8 <__aeabi_fsub>
 8002f64:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002f68:	f7fd feb0 	bl	8000ccc <__aeabi_fmul>
 8002f6c:	f7fd fffe 	bl	8000f6c <__aeabi_f2iz>
    int8_t iPitchError = constrain(_iPitchError, -125, 125);
 8002f70:	b205      	sxth	r5, r0
 8002f72:	2d7d      	cmp	r5, #125	; 0x7d
 8002f74:	bfa8      	it	ge
 8002f76:	257d      	movge	r5, #125	; 0x7d
 8002f78:	42bd      	cmp	r5, r7
 8002f7a:	bfb8      	it	lt
 8002f7c:	463d      	movlt	r5, r7
    int8_t iDeltaPError = constrain(iPitchError - iprevPitchError, -125, 125);
 8002f7e:	4b71      	ldr	r3, [pc, #452]	; (8003144 <selfStabilizing+0x24c>)
 8002f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f84:	1aeb      	subs	r3, r5, r3
 8002f86:	2b7d      	cmp	r3, #125	; 0x7d
 8002f88:	bfa8      	it	ge
 8002f8a:	237d      	movge	r3, #125	; 0x7d
 8002f8c:	42bb      	cmp	r3, r7
 8002f8e:	bfb8      	it	lt
 8002f90:	463b      	movlt	r3, r7
 8002f92:	b25b      	sxtb	r3, r3
 8002f94:	9302      	str	r3, [sp, #8]
    int16_t _iYawError = (int16_t)((acYaw - zval) * 8);
 8002f96:	4b6c      	ldr	r3, [pc, #432]	; (8003148 <selfStabilizing+0x250>)
 8002f98:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002f9c:	f7fd fe42 	bl	8000c24 <__aeabi_i2f>
 8002fa0:	4b6a      	ldr	r3, [pc, #424]	; (800314c <selfStabilizing+0x254>)
 8002fa2:	4601      	mov	r1, r0
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	f7fd fd87 	bl	8000ab8 <__aeabi_fsub>
 8002faa:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002fae:	f7fd fe8d 	bl	8000ccc <__aeabi_fmul>
 8002fb2:	f7fd ffdb 	bl	8000f6c <__aeabi_f2iz>
    int8_t iYawError = constrain(_iYawError, -125, 125);
 8002fb6:	b204      	sxth	r4, r0
 8002fb8:	2c7d      	cmp	r4, #125	; 0x7d
 8002fba:	bfa8      	it	ge
 8002fbc:	247d      	movge	r4, #125	; 0x7d
 8002fbe:	42bc      	cmp	r4, r7
 8002fc0:	bfb8      	it	lt
 8002fc2:	463c      	movlt	r4, r7
    int8_t iDeltaYError = constrain(iYawError - iprevYawError, -125, 125);
 8002fc4:	4b62      	ldr	r3, [pc, #392]	; (8003150 <selfStabilizing+0x258>)
    integrRError += iRollError*90/125 * 0.15;
 8002fc6:	fb0a f006 	mul.w	r0, sl, r6
    int8_t iDeltaYError = constrain(iYawError - iprevYawError, -125, 125);
 8002fca:	f9b3 3000 	ldrsh.w	r3, [r3]
    integrRError += iRollError*90/125 * 0.15;
 8002fce:	fb90 f0fb 	sdiv	r0, r0, fp
    int8_t iDeltaYError = constrain(iYawError - iprevYawError, -125, 125);
 8002fd2:	1ae3      	subs	r3, r4, r3
 8002fd4:	2b7d      	cmp	r3, #125	; 0x7d
 8002fd6:	bfa8      	it	ge
 8002fd8:	237d      	movge	r3, #125	; 0x7d
 8002fda:	42bb      	cmp	r3, r7
 8002fdc:	bfb8      	it	lt
 8002fde:	463b      	movlt	r3, r7
 8002fe0:	b25b      	sxtb	r3, r3
 8002fe2:	9303      	str	r3, [sp, #12]
    integrRError += iRollError*90/125 * 0.15;
 8002fe4:	f7fd fa06 	bl	80003f4 <__aeabi_i2d>
 8002fe8:	a34f      	add	r3, pc, #316	; (adr r3, 8003128 <selfStabilizing+0x230>)
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f7fd fa67 	bl	80004c0 <__aeabi_dmul>
 8002ff2:	4f58      	ldr	r7, [pc, #352]	; (8003154 <selfStabilizing+0x25c>)
 8002ff4:	4680      	mov	r8, r0
 8002ff6:	6838      	ldr	r0, [r7, #0]
 8002ff8:	4689      	mov	r9, r1
 8002ffa:	f7fd f9fb 	bl	80003f4 <__aeabi_i2d>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4640      	mov	r0, r8
 8003004:	4649      	mov	r1, r9
 8003006:	f7fd f8a9 	bl	800015c <__adddf3>
 800300a:	f7fd fd09 	bl	8000a20 <__aeabi_d2iz>
 800300e:	6038      	str	r0, [r7, #0]
 8003010:	4681      	mov	r9, r0
    integrPError += iPitchError*90/125 * 0.15;
 8003012:	fb0a f005 	mul.w	r0, sl, r5
 8003016:	fb90 f0fb 	sdiv	r0, r0, fp
 800301a:	f7fd f9eb 	bl	80003f4 <__aeabi_i2d>
 800301e:	a342      	add	r3, pc, #264	; (adr r3, 8003128 <selfStabilizing+0x230>)
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	f7fd fa4c 	bl	80004c0 <__aeabi_dmul>
 8003028:	4f4b      	ldr	r7, [pc, #300]	; (8003158 <selfStabilizing+0x260>)
 800302a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800302e:	6838      	ldr	r0, [r7, #0]
 8003030:	f7fd f9e0 	bl	80003f4 <__aeabi_i2d>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800303c:	f7fd f88e 	bl	800015c <__adddf3>
 8003040:	f7fd fcee 	bl	8000a20 <__aeabi_d2iz>
 8003044:	6038      	str	r0, [r7, #0]
    integrYError += iYawError*90/125 * 0.15;
 8003046:	fb0a f004 	mul.w	r0, sl, r4
 800304a:	fb90 f0fb 	sdiv	r0, r0, fp
 800304e:	f7fd f9d1 	bl	80003f4 <__aeabi_i2d>
 8003052:	a335      	add	r3, pc, #212	; (adr r3, 8003128 <selfStabilizing+0x230>)
 8003054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003058:	f7fd fa32 	bl	80004c0 <__aeabi_dmul>
 800305c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8003168 <selfStabilizing+0x270>
 8003060:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003064:	f8d8 0000 	ldr.w	r0, [r8]
 8003068:	f7fd f9c4 	bl	80003f4 <__aeabi_i2d>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003074:	f7fd f872 	bl	800015c <__adddf3>
 8003078:	f7fd fcd2 	bl	8000a20 <__aeabi_d2iz>

    iprevRollError = iRollError;
 800307c:	4b2e      	ldr	r3, [pc, #184]	; (8003138 <selfStabilizing+0x240>)
    integrYError += iYawError*90/125 * 0.15;
 800307e:	f8c8 0000 	str.w	r0, [r8]
    iprevRollError = iRollError;
 8003082:	801e      	strh	r6, [r3, #0]
    iprevPitchError = iPitchError;
 8003084:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <selfStabilizing+0x24c>)
    iprevYawError = iYawError;

    dMThX = getPID(iRollError, integrRError, iDeltaRError);
 8003086:	9a01      	ldr	r2, [sp, #4]
    iprevPitchError = iPitchError;
 8003088:	801d      	strh	r5, [r3, #0]
    iprevYawError = iYawError;
 800308a:	4b31      	ldr	r3, [pc, #196]	; (8003150 <selfStabilizing+0x258>)
    dMThX = getPID(iRollError, integrRError, iDeltaRError);
 800308c:	4649      	mov	r1, r9
 800308e:	b270      	sxtb	r0, r6
    iprevYawError = iYawError;
 8003090:	801c      	strh	r4, [r3, #0]
    dMThX = getPID(iRollError, integrRError, iDeltaRError);
 8003092:	f7ff fef7 	bl	8002e84 <getPID>
 8003096:	4e31      	ldr	r6, [pc, #196]	; (800315c <selfStabilizing+0x264>)
    dMThY = getPID(iPitchError, integrPError, iDeltaPError);
 8003098:	9a02      	ldr	r2, [sp, #8]
    dMThX = getPID(iRollError, integrRError, iDeltaRError);
 800309a:	8030      	strh	r0, [r6, #0]
    dMThY = getPID(iPitchError, integrPError, iDeltaPError);
 800309c:	6839      	ldr	r1, [r7, #0]
 800309e:	b268      	sxtb	r0, r5
 80030a0:	f7ff fef0 	bl	8002e84 <getPID>
 80030a4:	4d2e      	ldr	r5, [pc, #184]	; (8003160 <selfStabilizing+0x268>)
    dMThZ = getPID(iYawError, integrYError, iDeltaYError);
 80030a6:	9a03      	ldr	r2, [sp, #12]
    dMThY = getPID(iPitchError, integrPError, iDeltaPError);
 80030a8:	8028      	strh	r0, [r5, #0]
    dMThZ = getPID(iYawError, integrYError, iDeltaYError);
 80030aa:	f8d8 1000 	ldr.w	r1, [r8]
 80030ae:	b260      	sxtb	r0, r4
 80030b0:	f7ff fee8 	bl	8002e84 <getPID>
    dMThX = constrain(dMThX, -125, 125) *90/125;
 80030b4:	f9b6 3000 	ldrsh.w	r3, [r6]
 80030b8:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 80030bc:	db28      	blt.n	8003110 <selfStabilizing+0x218>
 80030be:	455b      	cmp	r3, fp
 80030c0:	bfa8      	it	ge
 80030c2:	465b      	movge	r3, fp
 80030c4:	fb0a fa03 	mul.w	sl, sl, r3
 80030c8:	fb9a fafb 	sdiv	sl, sl, fp
    dMThY = constrain(dMThY, -125, 125)*90/125;
 80030cc:	f9b5 3000 	ldrsh.w	r3, [r5]
    dMThX = constrain(dMThX, -125, 125) *90/125;
 80030d0:	f8a6 a000 	strh.w	sl, [r6]
    dMThY = constrain(dMThY, -125, 125)*90/125;
 80030d4:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 80030d8:	db1d      	blt.n	8003116 <selfStabilizing+0x21e>
 80030da:	2b7d      	cmp	r3, #125	; 0x7d
 80030dc:	bfa8      	it	ge
 80030de:	237d      	movge	r3, #125	; 0x7d
 80030e0:	461a      	mov	r2, r3
 80030e2:	235a      	movs	r3, #90	; 0x5a
 80030e4:	4353      	muls	r3, r2
 80030e6:	227d      	movs	r2, #125	; 0x7d
 80030e8:	fb93 f3f2 	sdiv	r3, r3, r2
    dMThZ = constrain(dMThZ, -125, 125)*90/125;
 80030ec:	f110 0f7d 	cmn.w	r0, #125	; 0x7d
    dMThY = constrain(dMThY, -125, 125)*90/125;
 80030f0:	802b      	strh	r3, [r5, #0]
    dMThZ = constrain(dMThZ, -125, 125)*90/125;
 80030f2:	db13      	blt.n	800311c <selfStabilizing+0x224>
 80030f4:	287d      	cmp	r0, #125	; 0x7d
 80030f6:	bfa8      	it	ge
 80030f8:	207d      	movge	r0, #125	; 0x7d
 80030fa:	235a      	movs	r3, #90	; 0x5a
 80030fc:	227d      	movs	r2, #125	; 0x7d
 80030fe:	b200      	sxth	r0, r0
 8003100:	4343      	muls	r3, r0
 8003102:	fb93 f3f2 	sdiv	r3, r3, r2
 8003106:	4a17      	ldr	r2, [pc, #92]	; (8003164 <selfStabilizing+0x26c>)
 8003108:	8013      	strh	r3, [r2, #0]
     dMThZ = getFuzzyConclusion(iYawError, iDeltaYError) * 90 / 125;*/
    //dMTh = constrain(dMTh, 0, 2000);
    //
    //

}
 800310a:	b007      	add	sp, #28
 800310c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003110:	f06f 0a59 	mvn.w	sl, #89	; 0x59
 8003114:	e7da      	b.n	80030cc <selfStabilizing+0x1d4>
 8003116:	f06f 0359 	mvn.w	r3, #89	; 0x59
 800311a:	e7e7      	b.n	80030ec <selfStabilizing+0x1f4>
 800311c:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8003120:	e7f1      	b.n	8003106 <selfStabilizing+0x20e>
 8003122:	bf00      	nop
 8003124:	f3af 8000 	nop.w
 8003128:	33333333 	.word	0x33333333
 800312c:	3fc33333 	.word	0x3fc33333
 8003130:	200005da 	.word	0x200005da
 8003134:	200004f0 	.word	0x200004f0
 8003138:	200004f8 	.word	0x200004f8
 800313c:	200005b4 	.word	0x200005b4
 8003140:	200004fc 	.word	0x200004fc
 8003144:	200004fa 	.word	0x200004fa
 8003148:	200005e2 	.word	0x200005e2
 800314c:	200004b4 	.word	0x200004b4
 8003150:	200004b0 	.word	0x200004b0
 8003154:	200004ec 	.word	0x200004ec
 8003158:	200004f4 	.word	0x200004f4
 800315c:	200005c8 	.word	0x200005c8
 8003160:	200005d6 	.word	0x200005d6
 8003164:	200005f4 	.word	0x200005f4
 8003168:	200004e8 	.word	0x200004e8

0800316c <addrule>:

double mu(int8_t x, int8_t A) {
    return exp(-(pow(x - A, 2) / (2 * pow(30, 2))));
}

void addrule(int8_t fe, op_type op, int8_t fde, int8_t z) {
 800316c:	b570      	push	{r4, r5, r6, lr}
    rules[numofrules].fe = fe;
 800316e:	4e06      	ldr	r6, [pc, #24]	; (8003188 <addrule+0x1c>)
 8003170:	4c06      	ldr	r4, [pc, #24]	; (800318c <addrule+0x20>)
 8003172:	7835      	ldrb	r5, [r6, #0]
 8003174:	f804 0025 	strb.w	r0, [r4, r5, lsl #2]
    rules[numofrules].op = op;
 8003178:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    rules[numofrules].fde = fde;
    rules[numofrules].z = z;
    numofrules++;
 800317c:	3501      	adds	r5, #1
    rules[numofrules].fde = fde;
 800317e:	7082      	strb	r2, [r0, #2]
    rules[numofrules].z = z;
 8003180:	70c3      	strb	r3, [r0, #3]
    numofrules++;
 8003182:	7035      	strb	r5, [r6, #0]
    rules[numofrules].op = op;
 8003184:	7041      	strb	r1, [r0, #1]
    numofrules++;
 8003186:	bd70      	pop	{r4, r5, r6, pc}
 8003188:	20000500 	.word	0x20000500
 800318c:	200004b8 	.word	0x200004b8

08003190 <Fuzzy_Init>:

    //
    return summ_alpha_c / summ_alpha;
}

void Fuzzy_Init() {
 8003190:	b510      	push	{r4, lr}
    numofrules = 0;
 8003192:	2400      	movs	r4, #0
 8003194:	4b28      	ldr	r3, [pc, #160]	; (8003238 <Fuzzy_Init+0xa8>)

    addrule(fNO, AND, fNO, fNO);
 8003196:	4622      	mov	r2, r4
    numofrules = 0;
 8003198:	701c      	strb	r4, [r3, #0]
    addrule(fNO, AND, fNO, fNO);
 800319a:	4621      	mov	r1, r4
 800319c:	4623      	mov	r3, r4
 800319e:	4620      	mov	r0, r4
 80031a0:	f7ff ffe4 	bl	800316c <addrule>
    addrule(fVLN, OR, fVLN, fVLP);
 80031a4:	f06f 027c 	mvn.w	r2, #124	; 0x7c
 80031a8:	237d      	movs	r3, #125	; 0x7d
 80031aa:	4610      	mov	r0, r2
 80031ac:	2101      	movs	r1, #1
 80031ae:	f7ff ffdd 	bl	800316c <addrule>
    addrule(fVLP, OR, fVLP, fVLN);
 80031b2:	227d      	movs	r2, #125	; 0x7d
 80031b4:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80031b8:	4610      	mov	r0, r2
 80031ba:	2101      	movs	r1, #1
 80031bc:	f7ff ffd6 	bl	800316c <addrule>
    addrule(fLN, AND, fSN, fVLP);
 80031c0:	4621      	mov	r1, r4
 80031c2:	237d      	movs	r3, #125	; 0x7d
 80031c4:	f06f 0213 	mvn.w	r2, #19
 80031c8:	f06f 0059 	mvn.w	r0, #89	; 0x59
 80031cc:	f7ff ffce 	bl	800316c <addrule>
    addrule(fLP, AND, fSP, fVLN);
 80031d0:	4621      	mov	r1, r4
 80031d2:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80031d6:	2214      	movs	r2, #20
 80031d8:	205a      	movs	r0, #90	; 0x5a
 80031da:	f7ff ffc7 	bl	800316c <addrule>
    addrule(fSN, AND, fSN, fSP);
 80031de:	f06f 0213 	mvn.w	r2, #19
 80031e2:	4621      	mov	r1, r4
 80031e4:	4610      	mov	r0, r2
 80031e6:	2314      	movs	r3, #20
 80031e8:	f7ff ffc0 	bl	800316c <addrule>
    addrule(fSP, AND, fSP, fSN);
 80031ec:	2214      	movs	r2, #20
 80031ee:	4621      	mov	r1, r4
 80031f0:	4610      	mov	r0, r2
 80031f2:	f06f 0313 	mvn.w	r3, #19
 80031f6:	f7ff ffb9 	bl	800316c <addrule>

    addrule(fMN, AND, fMP, fSP);
 80031fa:	4621      	mov	r1, r4
 80031fc:	2314      	movs	r3, #20
 80031fe:	2237      	movs	r2, #55	; 0x37
 8003200:	f06f 0036 	mvn.w	r0, #54	; 0x36
 8003204:	f7ff ffb2 	bl	800316c <addrule>
    addrule(fMN, AND, fMN, fLP);
 8003208:	f06f 0236 	mvn.w	r2, #54	; 0x36
 800320c:	4621      	mov	r1, r4
 800320e:	4610      	mov	r0, r2
 8003210:	235a      	movs	r3, #90	; 0x5a
 8003212:	f7ff ffab 	bl	800316c <addrule>
    addrule(fMP, AND, fMN, fSN);
 8003216:	4621      	mov	r1, r4
 8003218:	f06f 0313 	mvn.w	r3, #19
 800321c:	f06f 0236 	mvn.w	r2, #54	; 0x36
 8003220:	2037      	movs	r0, #55	; 0x37
 8003222:	f7ff ffa3 	bl	800316c <addrule>
    addrule(fMP, AND, fMP, fLN);
 8003226:	2237      	movs	r2, #55	; 0x37
 8003228:	4621      	mov	r1, r4
}
 800322a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    addrule(fMP, AND, fMP, fLN);
 800322e:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8003232:	4610      	mov	r0, r2
 8003234:	f7ff bf9a 	b.w	800316c <addrule>
 8003238:	20000500 	.word	0x20000500

0800323c <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800323c:	4b0f      	ldr	r3, [pc, #60]	; (800327c <MX_GPIO_Init+0x40>)
{
 800323e:	b084      	sub	sp, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	f042 0220 	orr.w	r2, r2, #32
 8003246:	619a      	str	r2, [r3, #24]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	f002 0220 	and.w	r2, r2, #32
 800324e:	9201      	str	r2, [sp, #4]
 8003250:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003252:	699a      	ldr	r2, [r3, #24]
 8003254:	f042 0204 	orr.w	r2, r2, #4
 8003258:	619a      	str	r2, [r3, #24]
 800325a:	699a      	ldr	r2, [r3, #24]
 800325c:	f002 0204 	and.w	r2, r2, #4
 8003260:	9202      	str	r2, [sp, #8]
 8003262:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	f042 0208 	orr.w	r2, r2, #8
 800326a:	619a      	str	r2, [r3, #24]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	9303      	str	r3, [sp, #12]
 8003274:	9b03      	ldr	r3, [sp, #12]

}
 8003276:	b004      	add	sp, #16
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000

08003280 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003280:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003282:	480c      	ldr	r0, [pc, #48]	; (80032b4 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <MX_I2C1_Init+0x38>)
 8003286:	f8df e034 	ldr.w	lr, [pc, #52]	; 80032bc <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800328a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 800328e:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003292:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003294:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003296:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003298:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800329a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800329c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800329e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032a0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032a2:	f7fe f9f5 	bl	8001690 <HAL_I2C_Init>
 80032a6:	b118      	cbz	r0, 80032b0 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 80032a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80032ac:	f000 b952 	b.w	8003554 <Error_Handler>
 80032b0:	bd08      	pop	{r3, pc}
 80032b2:	bf00      	nop
 80032b4:	20000504 	.word	0x20000504
 80032b8:	40005400 	.word	0x40005400
 80032bc:	00061a80 	.word	0x00061a80

080032c0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80032c0:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80032c2:	480c      	ldr	r0, [pc, #48]	; (80032f4 <MX_I2C2_Init+0x34>)
  hi2c2.Init.ClockSpeed = 100000;
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <MX_I2C2_Init+0x38>)
 80032c6:	f8df e034 	ldr.w	lr, [pc, #52]	; 80032fc <MX_I2C2_Init+0x3c>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 100000;
 80032ce:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80032d2:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032d4:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80032d6:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80032d8:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032da:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80032dc:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032de:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032e0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80032e2:	f7fe f9d5 	bl	8001690 <HAL_I2C_Init>
 80032e6:	b118      	cbz	r0, 80032f0 <MX_I2C2_Init+0x30>
  {
    Error_Handler();
  }

}
 80032e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80032ec:	f000 b932 	b.w	8003554 <Error_Handler>
 80032f0:	bd08      	pop	{r3, pc}
 80032f2:	bf00      	nop
 80032f4:	20000558 	.word	0x20000558
 80032f8:	40005800 	.word	0x40005800
 80032fc:	000186a0 	.word	0x000186a0

08003300 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	2210      	movs	r2, #16
{
 8003302:	b510      	push	{r4, lr}
 8003304:	4604      	mov	r4, r0
 8003306:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	eb0d 0002 	add.w	r0, sp, r2
 800330c:	2100      	movs	r1, #0
 800330e:	f000 fd17 	bl	8003d40 <memset>
  if(i2cHandle->Instance==I2C1)
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	4a21      	ldr	r2, [pc, #132]	; (800339c <HAL_I2C_MspInit+0x9c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d11e      	bne.n	8003358 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800331a:	4c21      	ldr	r4, [pc, #132]	; (80033a0 <HAL_I2C_MspInit+0xa0>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331c:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800331e:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003320:	4820      	ldr	r0, [pc, #128]	; (80033a4 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003322:	f043 0308 	orr.w	r3, r3, #8
 8003326:	61a3      	str	r3, [r4, #24]
 8003328:	69a3      	ldr	r3, [r4, #24]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003332:	23c0      	movs	r3, #192	; 0xc0
 8003334:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003336:	2312      	movs	r3, #18
 8003338:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800333a:	2303      	movs	r3, #3
 800333c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333e:	f7fd fefd 	bl	800113c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003342:	69e3      	ldr	r3, [r4, #28]
 8003344:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003348:	61e3      	str	r3, [r4, #28]
 800334a:	69e3      	ldr	r3, [r4, #28]
 800334c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003350:	9301      	str	r3, [sp, #4]
 8003352:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003354:	b008      	add	sp, #32
 8003356:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 8003358:	4a13      	ldr	r2, [pc, #76]	; (80033a8 <HAL_I2C_MspInit+0xa8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d1fa      	bne.n	8003354 <HAL_I2C_MspInit+0x54>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800335e:	4c10      	ldr	r4, [pc, #64]	; (80033a0 <HAL_I2C_MspInit+0xa0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003360:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003362:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003364:	480f      	ldr	r0, [pc, #60]	; (80033a4 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003366:	f043 0308 	orr.w	r3, r3, #8
 800336a:	61a3      	str	r3, [r4, #24]
 800336c:	69a3      	ldr	r3, [r4, #24]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	9302      	str	r3, [sp, #8]
 8003374:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003376:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800337a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800337c:	2312      	movs	r3, #18
 800337e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003380:	2303      	movs	r3, #3
 8003382:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003384:	f7fd feda 	bl	800113c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003388:	69e3      	ldr	r3, [r4, #28]
 800338a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800338e:	61e3      	str	r3, [r4, #28]
 8003390:	69e3      	ldr	r3, [r4, #28]
 8003392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003396:	9303      	str	r3, [sp, #12]
 8003398:	9b03      	ldr	r3, [sp, #12]
}
 800339a:	e7db      	b.n	8003354 <HAL_I2C_MspInit+0x54>
 800339c:	40005400 	.word	0x40005400
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40010c00 	.word	0x40010c00
 80033a8:	40005800 	.word	0x40005800

080033ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033ac:	b510      	push	{r4, lr}
 80033ae:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033b0:	2228      	movs	r2, #40	; 0x28
 80033b2:	2100      	movs	r1, #0
 80033b4:	a806      	add	r0, sp, #24
 80033b6:	f000 fcc3 	bl	8003d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033ba:	2100      	movs	r1, #0
 80033bc:	2214      	movs	r2, #20
 80033be:	a801      	add	r0, sp, #4
 80033c0:	f000 fcbe 	bl	8003d40 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033c8:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033ca:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033cc:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033ce:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80033d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033d4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033d6:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033d8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80033da:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033dc:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033de:	f7fe fd13 	bl	8001e08 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033e2:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033e8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033ea:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033ec:	4621      	mov	r1, r4
 80033ee:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033f0:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033f2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033f4:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033f6:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033f8:	f7fe fece 	bl	8002198 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80033fc:	b010      	add	sp, #64	; 0x40
 80033fe:	bd10      	pop	{r4, pc}

08003400 <convertToChar>:
/* USER CODE BEGIN 4 */
void convertToChar(int16_t data)
{
	int16_t number = data;
	uint8_t neg = 0;
	if(number < 0)
 8003400:	2800      	cmp	r0, #0
	{
		number = -number;
		neg = 1;
 8003402:	bfb4      	ite	lt
 8003404:	2201      	movlt	r2, #1
	uint8_t neg = 0;
 8003406:	2200      	movge	r2, #0
	}
	for(uint8_t i = 6; i --> 0 ;)
 8003408:	f04f 0306 	mov.w	r3, #6
	{
		str[i] = (number % 10) + (unsigned char)'0';
 800340c:	f04f 010a 	mov.w	r1, #10
{
 8003410:	b530      	push	{r4, r5, lr}
		number = -number;
 8003412:	bfb8      	it	lt
 8003414:	4240      	neglt	r0, r0
		str[i] = (number % 10) + (unsigned char)'0';
 8003416:	4d0b      	ldr	r5, [pc, #44]	; (8003444 <convertToChar+0x44>)
		number = -number;
 8003418:	bfb8      	it	lt
 800341a:	b200      	sxthlt	r0, r0
	for(uint8_t i = 6; i --> 0 ;)
 800341c:	3b01      	subs	r3, #1
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2bff      	cmp	r3, #255	; 0xff
 8003422:	d106      	bne.n	8003432 <convertToChar+0x32>
		number /= 10;
	}
	if(neg)
 8003424:	b122      	cbz	r2, 8003430 <convertToChar+0x30>
	{
for(uint8_t j = 0; j < 6; j++)
{
	if(str[j + 1] != 0)
 8003426:	4b07      	ldr	r3, [pc, #28]	; (8003444 <convertToChar+0x44>)
 8003428:	785a      	ldrb	r2, [r3, #1]
 800342a:	b10a      	cbz	r2, 8003430 <convertToChar+0x30>
	str[j] = '-';
 800342c:	222d      	movs	r2, #45	; 0x2d
 800342e:	701a      	strb	r2, [r3, #0]
 8003430:	bd30      	pop	{r4, r5, pc}
		str[i] = (number % 10) + (unsigned char)'0';
 8003432:	fb90 f4f1 	sdiv	r4, r0, r1
 8003436:	fb01 0014 	mls	r0, r1, r4, r0
 800343a:	3030      	adds	r0, #48	; 0x30
 800343c:	54e8      	strb	r0, [r5, r3]
		number /= 10;
 800343e:	b220      	sxth	r0, r4
 8003440:	e7ec      	b.n	800341c <convertToChar+0x1c>
 8003442:	bf00      	nop
 8003444:	200005ea 	.word	0x200005ea

08003448 <main>:
{
 8003448:	b580      	push	{r7, lr}
  HAL_Init();
 800344a:	f7fd fdd9 	bl	8001000 <HAL_Init>
  SystemClock_Config();
 800344e:	f7ff ffad 	bl	80033ac <SystemClock_Config>
  MX_GPIO_Init();
 8003452:	f7ff fef3 	bl	800323c <MX_GPIO_Init>
  MX_TIM2_Init();
 8003456:	f000 fbc7 	bl	8003be8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800345a:	f000 faf3 	bl	8003a44 <MX_TIM3_Init>
  MX_I2C1_Init();
 800345e:	f7ff ff0f 	bl	8003280 <MX_I2C1_Init>
  MX_TIM4_Init();
 8003462:	f000 fb23 	bl	8003aac <MX_TIM4_Init>
  MX_I2C2_Init();
 8003466:	f7ff ff2b 	bl	80032c0 <MX_I2C2_Init>
  Accel_ini();
 800346a:	f7ff fa77 	bl	800295c <Accel_ini>
  GyroCalibrate();
 800346e:	f7ff fcc7 	bl	8002e00 <GyroCalibrate>
   deriveGyro();
 8003472:	f7ff fcef 	bl	8002e54 <deriveGyro>
  Accel_ReadAcc();
 8003476:	f7ff fb23 	bl	8002ac0 <Accel_ReadAcc>
  SSD1306_Init();
 800347a:	f000 f915 	bl	80036a8 <SSD1306_Init>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_1);
 800347e:	2100      	movs	r1, #0
 8003480:	4829      	ldr	r0, [pc, #164]	; (8003528 <main+0xe0>)
 8003482:	f7ff fa31 	bl	80028e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_2);
 8003486:	2104      	movs	r1, #4
 8003488:	4827      	ldr	r0, [pc, #156]	; (8003528 <main+0xe0>)
 800348a:	f7ff fa2d 	bl	80028e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_3);
 800348e:	2108      	movs	r1, #8
 8003490:	4825      	ldr	r0, [pc, #148]	; (8003528 <main+0xe0>)
 8003492:	f7ff fa29 	bl	80028e8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8003496:	4825      	ldr	r0, [pc, #148]	; (800352c <main+0xe4>)
 8003498:	f7fe ffb4 	bl	8002404 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800349c:	4824      	ldr	r0, [pc, #144]	; (8003530 <main+0xe8>)
 800349e:	f7fe ffb1 	bl	8002404 <HAL_TIM_Base_Start_IT>
XGf = YGf = ZGf = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	4a23      	ldr	r2, [pc, #140]	; (8003534 <main+0xec>)
 80034a6:	4c24      	ldr	r4, [pc, #144]	; (8003538 <main+0xf0>)
 80034a8:	8013      	strh	r3, [r2, #0]
 80034aa:	4a24      	ldr	r2, [pc, #144]	; (800353c <main+0xf4>)
 80034ac:	8023      	strh	r3, [r4, #0]
 80034ae:	8013      	strh	r3, [r2, #0]
Fuzzy_Init();
 80034b0:	f7ff fe6e 	bl	8003190 <Fuzzy_Init>
		 SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 80034b4:	4e22      	ldr	r6, [pc, #136]	; (8003540 <main+0xf8>)
 80034b6:	4d23      	ldr	r5, [pc, #140]	; (8003544 <main+0xfc>)
	  if(flag)
 80034b8:	4b23      	ldr	r3, [pc, #140]	; (8003548 <main+0x100>)
 80034ba:	781a      	ldrb	r2, [r3, #0]
 80034bc:	b902      	cbnz	r2, 80034c0 <main+0x78>
 80034be:	e7fe      	b.n	80034be <main+0x76>
	  flag = 0;
 80034c0:	2700      	movs	r7, #0
 80034c2:	701f      	strb	r7, [r3, #0]
		  ReadGyro();
 80034c4:	f7ff fbf8 	bl	8002cb8 <ReadGyro>
		  Accel_ReadAcc();
 80034c8:	f7ff fafa 	bl	8002ac0 <Accel_ReadAcc>
		  selfStabilizing();
 80034cc:	f7ff fd14 	bl	8002ef8 <selfStabilizing>
		  convertToChar(xval);
 80034d0:	4b1e      	ldr	r3, [pc, #120]	; (800354c <main+0x104>)
 80034d2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80034d6:	f7ff ff93 	bl	8003400 <convertToChar>
		 SSD1306_GotoXY(0, 20);
 80034da:	4638      	mov	r0, r7
 80034dc:	2114      	movs	r1, #20
 80034de:	f000 f87f 	bl	80035e0 <SSD1306_GotoXY>
		 SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 80034e2:	2201      	movs	r2, #1
 80034e4:	4631      	mov	r1, r6
 80034e6:	4628      	mov	r0, r5
 80034e8:	f000 f8ba 	bl	8003660 <SSD1306_Puts>
		 convertToChar(yval);
 80034ec:	4b18      	ldr	r3, [pc, #96]	; (8003550 <main+0x108>)
 80034ee:	f9b3 0000 	ldrsh.w	r0, [r3]
 80034f2:	f7ff ff85 	bl	8003400 <convertToChar>
		 SSD1306_GotoXY(80, 20);
 80034f6:	2114      	movs	r1, #20
 80034f8:	2050      	movs	r0, #80	; 0x50
 80034fa:	f000 f871 	bl	80035e0 <SSD1306_GotoXY>
		 SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 80034fe:	2201      	movs	r2, #1
 8003500:	4631      	mov	r1, r6
 8003502:	4628      	mov	r0, r5
 8003504:	f000 f8ac 	bl	8003660 <SSD1306_Puts>
		 convertToChar(ZGf);
 8003508:	f9b4 0000 	ldrsh.w	r0, [r4]
 800350c:	f7ff ff78 	bl	8003400 <convertToChar>
		 SSD1306_GotoXY(45, 30);
 8003510:	211e      	movs	r1, #30
 8003512:	202d      	movs	r0, #45	; 0x2d
 8003514:	f000 f864 	bl	80035e0 <SSD1306_GotoXY>
		 SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 8003518:	2201      	movs	r2, #1
 800351a:	4631      	mov	r1, r6
 800351c:	4628      	mov	r0, r5
 800351e:	f000 f89f 	bl	8003660 <SSD1306_Puts>
		 SSD1306_UpdateScreen();
 8003522:	f000 f819 	bl	8003558 <SSD1306_UpdateScreen>
 8003526:	e7c7      	b.n	80034b8 <main+0x70>
 8003528:	2000067c 	.word	0x2000067c
 800352c:	2000063c 	.word	0x2000063c
 8003530:	200005fc 	.word	0x200005fc
 8003534:	200005b8 	.word	0x200005b8
 8003538:	200005d0 	.word	0x200005d0
 800353c:	200005e4 	.word	0x200005e4
 8003540:	20000008 	.word	0x20000008
 8003544:	200005ea 	.word	0x200005ea
 8003548:	200005b0 	.word	0x200005b0
 800354c:	200005da 	.word	0x200005da
 8003550:	200005b4 	.word	0x200005b4

08003554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003554:	4770      	bx	lr
	...

08003558 <SSD1306_UpdateScreen>:
	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {
	SSD1306_Buffer_all[0] = 0x40;
 8003558:	2340      	movs	r3, #64	; 0x40
void SSD1306_UpdateScreen(void) {
 800355a:	b507      	push	{r0, r1, r2, lr}
	SSD1306_Buffer_all[0] = 0x40;
 800355c:	4a06      	ldr	r2, [pc, #24]	; (8003578 <SSD1306_UpdateScreen+0x20>)
	HAL_I2C_Master_Transmit(&hi2c2, SSD1306_I2C_ADDR, SSD1306_Buffer_all, SSD1306_WIDTH * SSD1306_HEIGHT / 8 + 1, 1000);
 800355e:	2178      	movs	r1, #120	; 0x78
	SSD1306_Buffer_all[0] = 0x40;
 8003560:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2, SSD1306_I2C_ADDR, SSD1306_Buffer_all, SSD1306_WIDTH * SSD1306_HEIGHT / 8 + 1, 1000);
 8003562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003566:	4805      	ldr	r0, [pc, #20]	; (800357c <SSD1306_UpdateScreen+0x24>)
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	f240 4301 	movw	r3, #1025	; 0x401
 800356e:	f7fe f90f 	bl	8001790 <HAL_I2C_Master_Transmit>
}
 8003572:	b003      	add	sp, #12
 8003574:	f85d fb04 	ldr.w	pc, [sp], #4
 8003578:	2000009e 	.word	0x2000009e
 800357c:	20000558 	.word	0x20000558

08003580 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(uint8_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, SSD1306_WIDTH * SSD1306_HEIGHT / 8);
 8003580:	2800      	cmp	r0, #0
 8003582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003586:	bf14      	ite	ne
 8003588:	21ff      	movne	r1, #255	; 0xff
 800358a:	2100      	moveq	r1, #0
 800358c:	4801      	ldr	r0, [pc, #4]	; (8003594 <SSD1306_Fill+0x14>)
 800358e:	f000 bbd7 	b.w	8003d40 <memset>
 8003592:	bf00      	nop
 8003594:	2000009f 	.word	0x2000009f

08003598 <SSD1306_DrawPixel>:
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, uint8_t color) {
	if (
 8003598:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawPixel(uint16_t x, uint16_t y, uint8_t color) {
 800359a:	b510      	push	{r4, lr}
	if (
 800359c:	d81a      	bhi.n	80035d4 <SSD1306_DrawPixel+0x3c>
		x >= SSD1306_WIDTH ||
 800359e:	293f      	cmp	r1, #63	; 0x3f
 80035a0:	d818      	bhi.n	80035d4 <SSD1306_DrawPixel+0x3c>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80035a2:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <SSD1306_DrawPixel+0x40>)
 80035a4:	791b      	ldrb	r3, [r3, #4]
 80035a6:	b113      	cbz	r3, 80035ae <SSD1306_DrawPixel+0x16>
		color = (uint8_t)!color;
 80035a8:	fab2 f282 	clz	r2, r2
 80035ac:	0952      	lsrs	r2, r2, #5
 80035ae:	08cc      	lsrs	r4, r1, #3
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80035b0:	2a01      	cmp	r2, #1
 80035b2:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <SSD1306_DrawPixel+0x44>)
 80035b4:	f001 0107 	and.w	r1, r1, #7
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80035b8:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
	if (color == SSD1306_COLOR_WHITE) {
 80035bc:	d104      	bne.n	80035c8 <SSD1306_DrawPixel+0x30>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80035be:	408a      	lsls	r2, r1
 80035c0:	5c19      	ldrb	r1, [r3, r0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	541a      	strb	r2, [r3, r0]
 80035c6:	bd10      	pop	{r4, pc}
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80035c8:	2201      	movs	r2, #1
 80035ca:	408a      	lsls	r2, r1
 80035cc:	5c19      	ldrb	r1, [r3, r0]
 80035ce:	ea21 0102 	bic.w	r1, r1, r2
 80035d2:	5419      	strb	r1, [r3, r0]
 80035d4:	bd10      	pop	{r4, pc}
 80035d6:	bf00      	nop
 80035d8:	20000098 	.word	0x20000098
 80035dc:	2000009f 	.word	0x2000009f

080035e0 <SSD1306_GotoXY>:
	}
}

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80035e0:	4b01      	ldr	r3, [pc, #4]	; (80035e8 <SSD1306_GotoXY+0x8>)
 80035e2:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80035e4:	8059      	strh	r1, [r3, #2]
 80035e6:	4770      	bx	lr
 80035e8:	20000098 	.word	0x20000098

080035ec <SSD1306_Putc>:
}

char SSD1306_Putc(char ch, FontDef_t* Font, uint8_t color) {
 80035ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t i, b, j;

	b = 0;
 80035f0:	f04f 0a00 	mov.w	sl, #0
char SSD1306_Putc(char ch, FontDef_t* Font, uint8_t color) {
 80035f4:	4680      	mov	r8, r0
 80035f6:	460d      	mov	r5, r1
 80035f8:	4691      	mov	r9, r2
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80035fa:	4656      	mov	r6, sl
 80035fc:	4f17      	ldr	r7, [pc, #92]	; (800365c <SSD1306_Putc+0x70>)
 80035fe:	786b      	ldrb	r3, [r5, #1]
 8003600:	429e      	cmp	r6, r3
 8003602:	d223      	bcs.n	800364c <SSD1306_Putc+0x60>
 8003604:	2400      	movs	r4, #0
 8003606:	e019      	b.n	800363c <SSD1306_Putc+0x50>
		for (j = 0; j < Font->FontWidth; j++) {
			if ((Font->data[ch*Font->CharBytes + b/8] >> b%8) & 1) {
 8003608:	6869      	ldr	r1, [r5, #4]
 800360a:	78aa      	ldrb	r2, [r5, #2]
 800360c:	08d8      	lsrs	r0, r3, #3
 800360e:	fb08 1202 	mla	r2, r8, r2, r1
 8003612:	5c12      	ldrb	r2, [r2, r0]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	fa42 f303 	asr.w	r3, r2, r3
 800361c:	07db      	lsls	r3, r3, #31
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (uint8_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (uint8_t)!color);
 800361e:	bf58      	it	pl
 8003620:	fab9 f289 	clzpl	r2, r9
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (uint8_t) color);
 8003624:	8879      	ldrh	r1, [r7, #2]
 8003626:	8838      	ldrh	r0, [r7, #0]
 8003628:	4431      	add	r1, r6
 800362a:	4420      	add	r0, r4
 800362c:	bf4c      	ite	mi
 800362e:	464a      	movmi	r2, r9
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (uint8_t)!color);
 8003630:	0952      	lsrpl	r2, r2, #5
 8003632:	b289      	uxth	r1, r1
 8003634:	b280      	uxth	r0, r0
 8003636:	f7ff ffaf 	bl	8003598 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800363a:	3401      	adds	r4, #1
 800363c:	782a      	ldrb	r2, [r5, #0]
 800363e:	eb0a 0304 	add.w	r3, sl, r4
 8003642:	4294      	cmp	r4, r2
 8003644:	d3e0      	bcc.n	8003608 <SSD1306_Putc+0x1c>
	for (i = 0; i < Font->FontHeight; i++) {
 8003646:	3601      	adds	r6, #1
 8003648:	469a      	mov	sl, r3
 800364a:	e7d8      	b.n	80035fe <SSD1306_Putc+0x12>
			b++;
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800364c:	4a03      	ldr	r2, [pc, #12]	; (800365c <SSD1306_Putc+0x70>)
 800364e:	782b      	ldrb	r3, [r5, #0]
 8003650:	8811      	ldrh	r1, [r2, #0]

	/* Return character written */
	return ch;
}
 8003652:	4640      	mov	r0, r8
	SSD1306.CurrentX += Font->FontWidth;
 8003654:	440b      	add	r3, r1
 8003656:	8013      	strh	r3, [r2, #0]
}
 8003658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800365c:	20000098 	.word	0x20000098

08003660 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, uint8_t color) {
 8003660:	b570      	push	{r4, r5, r6, lr}
 8003662:	460d      	mov	r5, r1
 8003664:	4616      	mov	r6, r2
 8003666:	1e44      	subs	r4, r0, #1
	/* Write characters */
	while (*str) {
 8003668:	7863      	ldrb	r3, [r4, #1]
 800366a:	b143      	cbz	r3, 800367e <SSD1306_Puts+0x1e>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800366c:	4618      	mov	r0, r3
 800366e:	4632      	mov	r2, r6
 8003670:	4629      	mov	r1, r5
 8003672:	f7ff ffbb 	bl	80035ec <SSD1306_Putc>
 8003676:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800367a:	4298      	cmp	r0, r3
 800367c:	d0f4      	beq.n	8003668 <SSD1306_Puts+0x8>
		str++;
	}

	/* Everything OK, zero should be returned */
	return *str;
}
 800367e:	4618      	mov	r0, r3
 8003680:	bd70      	pop	{r4, r5, r6, pc}
	...

08003684 <ssd1306_I2C_Write>:
	HAL_I2C_Master_Transmit(&hi2c2, address, &reg, 1, 100);
	HAL_I2C_Master_Transmit_DMA(&hi2c2, address, data, count);
}


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
	dt[1] = data;
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8003686:	230a      	movs	r3, #10
	dt[0] = reg;
 8003688:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 800368c:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	4601      	mov	r1, r0
 8003694:	2302      	movs	r3, #2
 8003696:	aa03      	add	r2, sp, #12
 8003698:	4802      	ldr	r0, [pc, #8]	; (80036a4 <ssd1306_I2C_Write+0x20>)
 800369a:	f7fe f879 	bl	8001790 <HAL_I2C_Master_Transmit>
}
 800369e:	b005      	add	sp, #20
 80036a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80036a4:	20000558 	.word	0x20000558

080036a8 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80036a8:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80036aa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80036ae:	2201      	movs	r2, #1
 80036b0:	2178      	movs	r1, #120	; 0x78
 80036b2:	4850      	ldr	r0, [pc, #320]	; (80037f4 <SSD1306_Init+0x14c>)
 80036b4:	f7fe faf8 	bl	8001ca8 <HAL_I2C_IsDeviceReady>
 80036b8:	4604      	mov	r4, r0
 80036ba:	2800      	cmp	r0, #0
 80036bc:	f040 8097 	bne.w	80037ee <SSD1306_Init+0x146>
	SSD1306_WRITECOMMAND(0xAE); //display off
 80036c0:	4601      	mov	r1, r0
 80036c2:	22ae      	movs	r2, #174	; 0xae
 80036c4:	2078      	movs	r0, #120	; 0x78
 80036c6:	f7ff ffdd 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80036ca:	4621      	mov	r1, r4
 80036cc:	2220      	movs	r2, #32
 80036ce:	2078      	movs	r0, #120	; 0x78
 80036d0:	f7ff ffd8 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80036d4:	4621      	mov	r1, r4
 80036d6:	2210      	movs	r2, #16
 80036d8:	2078      	movs	r0, #120	; 0x78
 80036da:	f7ff ffd3 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80036de:	4621      	mov	r1, r4
 80036e0:	22b0      	movs	r2, #176	; 0xb0
 80036e2:	2078      	movs	r0, #120	; 0x78
 80036e4:	f7ff ffce 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80036e8:	4621      	mov	r1, r4
 80036ea:	22c8      	movs	r2, #200	; 0xc8
 80036ec:	2078      	movs	r0, #120	; 0x78
 80036ee:	f7ff ffc9 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80036f2:	4622      	mov	r2, r4
 80036f4:	4621      	mov	r1, r4
 80036f6:	2078      	movs	r0, #120	; 0x78
 80036f8:	f7ff ffc4 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80036fc:	4621      	mov	r1, r4
 80036fe:	2210      	movs	r2, #16
 8003700:	2078      	movs	r0, #120	; 0x78
 8003702:	f7ff ffbf 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003706:	4621      	mov	r1, r4
 8003708:	2240      	movs	r2, #64	; 0x40
 800370a:	2078      	movs	r0, #120	; 0x78
 800370c:	f7ff ffba 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003710:	4621      	mov	r1, r4
 8003712:	2281      	movs	r2, #129	; 0x81
 8003714:	2078      	movs	r0, #120	; 0x78
 8003716:	f7ff ffb5 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800371a:	4621      	mov	r1, r4
 800371c:	22ff      	movs	r2, #255	; 0xff
 800371e:	2078      	movs	r0, #120	; 0x78
 8003720:	f7ff ffb0 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003724:	4621      	mov	r1, r4
 8003726:	22a1      	movs	r2, #161	; 0xa1
 8003728:	2078      	movs	r0, #120	; 0x78
 800372a:	f7ff ffab 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800372e:	4621      	mov	r1, r4
 8003730:	22a6      	movs	r2, #166	; 0xa6
 8003732:	2078      	movs	r0, #120	; 0x78
 8003734:	f7ff ffa6 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003738:	4621      	mov	r1, r4
 800373a:	22a8      	movs	r2, #168	; 0xa8
 800373c:	2078      	movs	r0, #120	; 0x78
 800373e:	f7ff ffa1 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003742:	4621      	mov	r1, r4
 8003744:	223f      	movs	r2, #63	; 0x3f
 8003746:	2078      	movs	r0, #120	; 0x78
 8003748:	f7ff ff9c 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800374c:	4621      	mov	r1, r4
 800374e:	22a4      	movs	r2, #164	; 0xa4
 8003750:	2078      	movs	r0, #120	; 0x78
 8003752:	f7ff ff97 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003756:	4621      	mov	r1, r4
 8003758:	22d3      	movs	r2, #211	; 0xd3
 800375a:	2078      	movs	r0, #120	; 0x78
 800375c:	f7ff ff92 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003760:	4622      	mov	r2, r4
 8003762:	4621      	mov	r1, r4
 8003764:	2078      	movs	r0, #120	; 0x78
 8003766:	f7ff ff8d 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800376a:	4621      	mov	r1, r4
 800376c:	22d5      	movs	r2, #213	; 0xd5
 800376e:	2078      	movs	r0, #120	; 0x78
 8003770:	f7ff ff88 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003774:	4621      	mov	r1, r4
 8003776:	22f0      	movs	r2, #240	; 0xf0
 8003778:	2078      	movs	r0, #120	; 0x78
 800377a:	f7ff ff83 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800377e:	4621      	mov	r1, r4
 8003780:	22d9      	movs	r2, #217	; 0xd9
 8003782:	2078      	movs	r0, #120	; 0x78
 8003784:	f7ff ff7e 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003788:	4621      	mov	r1, r4
 800378a:	2222      	movs	r2, #34	; 0x22
 800378c:	2078      	movs	r0, #120	; 0x78
 800378e:	f7ff ff79 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003792:	4621      	mov	r1, r4
 8003794:	22da      	movs	r2, #218	; 0xda
 8003796:	2078      	movs	r0, #120	; 0x78
 8003798:	f7ff ff74 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800379c:	4621      	mov	r1, r4
 800379e:	2212      	movs	r2, #18
 80037a0:	2078      	movs	r0, #120	; 0x78
 80037a2:	f7ff ff6f 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80037a6:	4621      	mov	r1, r4
 80037a8:	22db      	movs	r2, #219	; 0xdb
 80037aa:	2078      	movs	r0, #120	; 0x78
 80037ac:	f7ff ff6a 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80037b0:	4621      	mov	r1, r4
 80037b2:	2220      	movs	r2, #32
 80037b4:	2078      	movs	r0, #120	; 0x78
 80037b6:	f7ff ff65 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80037ba:	4621      	mov	r1, r4
 80037bc:	228d      	movs	r2, #141	; 0x8d
 80037be:	2078      	movs	r0, #120	; 0x78
 80037c0:	f7ff ff60 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80037c4:	4621      	mov	r1, r4
 80037c6:	2214      	movs	r2, #20
 80037c8:	2078      	movs	r0, #120	; 0x78
 80037ca:	f7ff ff5b 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80037ce:	22af      	movs	r2, #175	; 0xaf
 80037d0:	4621      	mov	r1, r4
 80037d2:	2078      	movs	r0, #120	; 0x78
 80037d4:	f7ff ff56 	bl	8003684 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80037d8:	4620      	mov	r0, r4
 80037da:	f7ff fed1 	bl	8003580 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80037de:	f7ff febb 	bl	8003558 <SSD1306_UpdateScreen>
	SSD1306.Initialized = 1;
 80037e2:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 80037e4:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <SSD1306_Init+0x150>)
	SSD1306.Initialized = 1;
 80037e6:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 80037e8:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 80037ea:	805c      	strh	r4, [r3, #2]
	return 1;
 80037ec:	bd10      	pop	{r4, pc}
		return 0;
 80037ee:	2000      	movs	r0, #0
}
 80037f0:	bd10      	pop	{r4, pc}
 80037f2:	bf00      	nop
 80037f4:	20000558 	.word	0x20000558
 80037f8:	20000098 	.word	0x20000098

080037fc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <HAL_MspInit+0x3c>)
{
 80037fe:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	619a      	str	r2, [r3, #24]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	f002 0201 	and.w	r2, r2, #1
 800380e:	9200      	str	r2, [sp, #0]
 8003810:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003818:	61da      	str	r2, [r3, #28]
 800381a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800381c:	4a07      	ldr	r2, [pc, #28]	; (800383c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003826:	6853      	ldr	r3, [r2, #4]
 8003828:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800382c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003830:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003832:	b002      	add	sp, #8
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000
 800383c:	40010000 	.word	0x40010000

08003840 <NMI_Handler>:
 8003840:	4770      	bx	lr

08003842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003842:	e7fe      	b.n	8003842 <HardFault_Handler>

08003844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003844:	e7fe      	b.n	8003844 <MemManage_Handler>

08003846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003846:	e7fe      	b.n	8003846 <BusFault_Handler>

08003848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003848:	e7fe      	b.n	8003848 <UsageFault_Handler>

0800384a <SVC_Handler>:
 800384a:	4770      	bx	lr

0800384c <DebugMon_Handler>:
 800384c:	4770      	bx	lr

0800384e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800384e:	4770      	bx	lr

08003850 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003850:	f7fd bbe8 	b.w	8001024 <HAL_IncTick>

08003854 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

val = 0;
	if(dMThZ != 0)
 8003858:	4b58      	ldr	r3, [pc, #352]	; (80039bc <TIM3_IRQHandler+0x168>)
 800385a:	4a59      	ldr	r2, [pc, #356]	; (80039c0 <TIM3_IRQHandler+0x16c>)
 800385c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d07c      	beq.n	800395e <TIM3_IRQHandler+0x10a>
			val = dMThZ*5 + 1500;
 8003864:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003868:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
	else
		val = 1500;
 800386c:	8013      	strh	r3, [r2, #0]

	val1 = val2 = val3 = val;

	if(dMThX != 0)
 800386e:	4b55      	ldr	r3, [pc, #340]	; (80039c4 <TIM3_IRQHandler+0x170>)
	val1 = val2 = val3 = val;
 8003870:	8812      	ldrh	r2, [r2, #0]
 8003872:	4c55      	ldr	r4, [pc, #340]	; (80039c8 <TIM3_IRQHandler+0x174>)
 8003874:	4e55      	ldr	r6, [pc, #340]	; (80039cc <TIM3_IRQHandler+0x178>)
 8003876:	4d56      	ldr	r5, [pc, #344]	; (80039d0 <TIM3_IRQHandler+0x17c>)
	if(dMThX != 0)
 8003878:	f9b3 3000 	ldrsh.w	r3, [r3]
	val1 = val2 = val3 = val;
 800387c:	8022      	strh	r2, [r4, #0]
 800387e:	8032      	strh	r2, [r6, #0]
 8003880:	802a      	strh	r2, [r5, #0]
	if(dMThX != 0)
 8003882:	b1bb      	cbz	r3, 80038b4 <TIM3_IRQHandler+0x60>
	{
		val3 += (-1 * dMThX/5*4) * 5;
 8003884:	f06f 0104 	mvn.w	r1, #4
 8003888:	fb93 f1f1 	sdiv	r1, r3, r1
 800388c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003890:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8003894:	8021      	strh	r1, [r4, #0]

		val1 += -dMThX/5/2*5;
 8003896:	f06f 0109 	mvn.w	r1, #9
 800389a:	fb93 f1f1 	sdiv	r1, r3, r1
 800389e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80038a2:	4411      	add	r1, r2
 80038a4:	8029      	strh	r1, [r5, #0]
		val2 += dMThX/5/2 * 5;
 80038a6:	210a      	movs	r1, #10
 80038a8:	fb93 f3f1 	sdiv	r3, r3, r1
 80038ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038b0:	4413      	add	r3, r2
 80038b2:	8033      	strh	r3, [r6, #0]
	}
	if(dMThY != 0)
 80038b4:	4b47      	ldr	r3, [pc, #284]	; (80039d4 <TIM3_IRQHandler+0x180>)
 80038b6:	f9b3 7000 	ldrsh.w	r7, [r3]
 80038ba:	b38f      	cbz	r7, 8003920 <TIM3_IRQHandler+0xcc>
	{
		val1 += -dMThY*0.5* 5;
 80038bc:	4278      	negs	r0, r7
 80038be:	f7fc fd99 	bl	80003f4 <__aeabi_i2d>
 80038c2:	2200      	movs	r2, #0
 80038c4:	4b44      	ldr	r3, [pc, #272]	; (80039d8 <TIM3_IRQHandler+0x184>)
 80038c6:	f7fc fdfb 	bl	80004c0 <__aeabi_dmul>
 80038ca:	2200      	movs	r2, #0
 80038cc:	4b43      	ldr	r3, [pc, #268]	; (80039dc <TIM3_IRQHandler+0x188>)
 80038ce:	f7fc fdf7 	bl	80004c0 <__aeabi_dmul>
 80038d2:	4680      	mov	r8, r0
 80038d4:	8828      	ldrh	r0, [r5, #0]
 80038d6:	4689      	mov	r9, r1
 80038d8:	f7fc fd8c 	bl	80003f4 <__aeabi_i2d>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4640      	mov	r0, r8
 80038e2:	4649      	mov	r1, r9
 80038e4:	f7fc fc3a 	bl	800015c <__adddf3>
 80038e8:	f7fd f8c2 	bl	8000a70 <__aeabi_d2uiz>
 80038ec:	8028      	strh	r0, [r5, #0]
		val3 += dMThY*0.5 * 5;
 80038ee:	4638      	mov	r0, r7
 80038f0:	f7fc fd80 	bl	80003f4 <__aeabi_i2d>
 80038f4:	2200      	movs	r2, #0
 80038f6:	4b38      	ldr	r3, [pc, #224]	; (80039d8 <TIM3_IRQHandler+0x184>)
 80038f8:	f7fc fde2 	bl	80004c0 <__aeabi_dmul>
 80038fc:	2200      	movs	r2, #0
 80038fe:	4b37      	ldr	r3, [pc, #220]	; (80039dc <TIM3_IRQHandler+0x188>)
 8003900:	f7fc fdde 	bl	80004c0 <__aeabi_dmul>
 8003904:	4680      	mov	r8, r0
 8003906:	8820      	ldrh	r0, [r4, #0]
 8003908:	4689      	mov	r9, r1
 800390a:	f7fc fd73 	bl	80003f4 <__aeabi_i2d>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4640      	mov	r0, r8
 8003914:	4649      	mov	r1, r9
 8003916:	f7fc fc21 	bl	800015c <__adddf3>
 800391a:	f7fd f8a9 	bl	8000a70 <__aeabi_d2uiz>
 800391e:	8020      	strh	r0, [r4, #0]
		//val1 += dMThY * 5;
	}
	if(val1 > 2000)
 8003920:	882b      	ldrh	r3, [r5, #0]
 8003922:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		val1 = 2000;
 8003926:	bf84      	itt	hi
 8003928:	f44f 63fa 	movhi.w	r3, #2000	; 0x7d0
 800392c:	802b      	strhhi	r3, [r5, #0]
	if(val2 > 2000)
 800392e:	8833      	ldrh	r3, [r6, #0]
		val2 = 2000;
	if(val3 > 2000)
		val3 = 2000;

	if(val1 < TIM2->CCR1)
 8003930:	882a      	ldrh	r2, [r5, #0]
	if(val2 > 2000)
 8003932:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		val2 = 2000;
 8003936:	bf84      	itt	hi
 8003938:	f44f 63fa 	movhi.w	r3, #2000	; 0x7d0
 800393c:	8033      	strhhi	r3, [r6, #0]
	if(val3 > 2000)
 800393e:	8823      	ldrh	r3, [r4, #0]
 8003940:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		val3 = 2000;
 8003944:	bf84      	itt	hi
 8003946:	f44f 63fa 	movhi.w	r3, #2000	; 0x7d0
 800394a:	8023      	strhhi	r3, [r4, #0]
	if(val1 < TIM2->CCR1)
 800394c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003950:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003952:	428a      	cmp	r2, r1
 8003954:	d206      	bcs.n	8003964 <TIM3_IRQHandler+0x110>
		TIM2->CCR1 = TIM2->CCR1 - 1;
 8003956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003958:	3a01      	subs	r2, #1
	else if(val1 > TIM2->CCR1)
		TIM2->CCR1 = TIM2->CCR1 + 1;
	else if(val1 == TIM2->CCR1)
	TIM2->CCR1 = val1;
 800395a:	635a      	str	r2, [r3, #52]	; 0x34
 800395c:	e00b      	b.n	8003976 <TIM3_IRQHandler+0x122>
		val = 1500;
 800395e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003962:	e783      	b.n	800386c <TIM3_IRQHandler+0x18>
	else if(val1 > TIM2->CCR1)
 8003964:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003966:	428a      	cmp	r2, r1
 8003968:	d902      	bls.n	8003970 <TIM3_IRQHandler+0x11c>
		TIM2->CCR1 = TIM2->CCR1 + 1;
 800396a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800396c:	3201      	adds	r2, #1
 800396e:	e7f4      	b.n	800395a <TIM3_IRQHandler+0x106>
	else if(val1 == TIM2->CCR1)
 8003970:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003972:	428a      	cmp	r2, r1
 8003974:	d0f1      	beq.n	800395a <TIM3_IRQHandler+0x106>

	if(val2 < TIM2->CCR2)
 8003976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800397a:	8832      	ldrh	r2, [r6, #0]
 800397c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800397e:	428a      	cmp	r2, r1
 8003980:	d210      	bcs.n	80039a4 <TIM3_IRQHandler+0x150>
			TIM2->CCR2 = TIM2->CCR2 - 1;
 8003982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003984:	3a01      	subs	r2, #1
		else if(val2 > TIM2->CCR2)
			TIM2->CCR2 = TIM2->CCR2 + 1;
		else
		TIM2->CCR2 = val2;
 8003986:	639a      	str	r2, [r3, #56]	; 0x38

	if(val3 < TIM2->CCR3)
 8003988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800398c:	8822      	ldrh	r2, [r4, #0]
 800398e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003990:	428a      	cmp	r2, r1
 8003992:	d20d      	bcs.n	80039b0 <TIM3_IRQHandler+0x15c>
				TIM2->CCR3 = TIM2->CCR3 - 1;
 8003994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003996:	3a01      	subs	r2, #1
			else if(val3 > TIM2->CCR3)
				TIM2->CCR3 = TIM2->CCR3 + 1;
			else
			TIM2->CCR3 = val3;
 8003998:	63da      	str	r2, [r3, #60]	; 0x3c

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800399a:	4811      	ldr	r0, [pc, #68]	; (80039e0 <TIM3_IRQHandler+0x18c>)
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800399c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_TIM_IRQHandler(&htim3);
 80039a0:	f7fe bdfa 	b.w	8002598 <HAL_TIM_IRQHandler>
		else if(val2 > TIM2->CCR2)
 80039a4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80039a6:	428a      	cmp	r2, r1
			TIM2->CCR2 = TIM2->CCR2 + 1;
 80039a8:	bf84      	itt	hi
 80039aa:	6b9a      	ldrhi	r2, [r3, #56]	; 0x38
 80039ac:	3201      	addhi	r2, #1
 80039ae:	e7ea      	b.n	8003986 <TIM3_IRQHandler+0x132>
			else if(val3 > TIM2->CCR3)
 80039b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80039b2:	428a      	cmp	r2, r1
				TIM2->CCR3 = TIM2->CCR3 + 1;
 80039b4:	bf84      	itt	hi
 80039b6:	6bda      	ldrhi	r2, [r3, #60]	; 0x3c
 80039b8:	3201      	addhi	r2, #1
 80039ba:	e7ed      	b.n	8003998 <TIM3_IRQHandler+0x144>
 80039bc:	200005f4 	.word	0x200005f4
 80039c0:	200005ca 	.word	0x200005ca
 80039c4:	200005c8 	.word	0x200005c8
 80039c8:	200005d4 	.word	0x200005d4
 80039cc:	200005ce 	.word	0x200005ce
 80039d0:	200005f2 	.word	0x200005f2
 80039d4:	200005d6 	.word	0x200005d6
 80039d8:	3fe00000 	.word	0x3fe00000
 80039dc:	40140000 	.word	0x40140000
 80039e0:	2000063c 	.word	0x2000063c

080039e4 <TIM4_IRQHandler>:
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */
	flag = 1;
 80039e4:	2201      	movs	r2, #1
 80039e6:	4b02      	ldr	r3, [pc, #8]	; (80039f0 <TIM4_IRQHandler+0xc>)
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80039e8:	4802      	ldr	r0, [pc, #8]	; (80039f4 <TIM4_IRQHandler+0x10>)
	flag = 1;
 80039ea:	701a      	strb	r2, [r3, #0]
  HAL_TIM_IRQHandler(&htim4);
 80039ec:	f7fe bdd4 	b.w	8002598 <HAL_TIM_IRQHandler>
 80039f0:	200005b0 	.word	0x200005b0
 80039f4:	200005fc 	.word	0x200005fc

080039f8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80039f8:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <SystemInit+0x40>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	f042 0201 	orr.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003a02:	6859      	ldr	r1, [r3, #4]
 8003a04:	4a0d      	ldr	r2, [pc, #52]	; (8003a3c <SystemInit+0x44>)
 8003a06:	400a      	ands	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003a10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a14:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a1c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003a24:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003a26:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003a2a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003a2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <SystemInit+0x48>)
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	f8ff0000 	.word	0xf8ff0000
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a46:	2210      	movs	r2, #16
 8003a48:	2100      	movs	r1, #0
 8003a4a:	a802      	add	r0, sp, #8
 8003a4c:	f000 f978 	bl	8003d40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 72-1;
 8003a50:	2247      	movs	r2, #71	; 0x47
  htim3.Instance = TIM3;
 8003a52:	4814      	ldr	r0, [pc, #80]	; (8003aa4 <MX_TIM3_Init+0x60>)
  htim3.Init.Prescaler = 72-1;
 8003a54:	4914      	ldr	r1, [pc, #80]	; (8003aa8 <MX_TIM3_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a56:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 72-1;
 8003a58:	e880 0006 	stmia.w	r0, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000-1;
 8003a5c:	f240 32e7 	movw	r2, #999	; 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a64:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000-1;
 8003a66:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a68:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a6a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a6c:	f7fe fe6e 	bl	800274c <HAL_TIM_Base_Init>
 8003a70:	b108      	cbz	r0, 8003a76 <MX_TIM3_Init+0x32>
  {
    Error_Handler();
 8003a72:	f7ff fd6f 	bl	8003554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a7a:	a902      	add	r1, sp, #8
 8003a7c:	4809      	ldr	r0, [pc, #36]	; (8003aa4 <MX_TIM3_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a7e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a80:	f7fe fccc 	bl	800241c <HAL_TIM_ConfigClockSource>
 8003a84:	b108      	cbz	r0, 8003a8a <MX_TIM3_Init+0x46>
  {
    Error_Handler();
 8003a86:	f7ff fd65 	bl	8003554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a8a:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a8c:	4669      	mov	r1, sp
 8003a8e:	4805      	ldr	r0, [pc, #20]	; (8003aa4 <MX_TIM3_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a90:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a92:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a94:	f7fe ff3e 	bl	8002914 <HAL_TIMEx_MasterConfigSynchronization>
 8003a98:	b108      	cbz	r0, 8003a9e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8003a9a:	f7ff fd5b 	bl	8003554 <Error_Handler>
  }

}
 8003a9e:	b007      	add	sp, #28
 8003aa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003aa4:	2000063c 	.word	0x2000063c
 8003aa8:	40000400 	.word	0x40000400

08003aac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003aac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aae:	2210      	movs	r2, #16
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	a802      	add	r0, sp, #8
 8003ab4:	f000 f944 	bl	8003d40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 720-1;
 8003ab8:	f240 22cf 	movw	r2, #719	; 0x2cf
  htim4.Instance = TIM4;
 8003abc:	4814      	ldr	r0, [pc, #80]	; (8003b10 <MX_TIM4_Init+0x64>)
  htim4.Init.Prescaler = 720-1;
 8003abe:	4915      	ldr	r1, [pc, #84]	; (8003b14 <MX_TIM4_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ac0:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 720-1;
 8003ac2:	e880 0006 	stmia.w	r0, {r1, r2}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 1000-1;
 8003ac6:	f240 32e7 	movw	r2, #999	; 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	9301      	str	r3, [sp, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ace:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 1000-1;
 8003ad0:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ad2:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ad4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003ad6:	f7fe fe39 	bl	800274c <HAL_TIM_Base_Init>
 8003ada:	b108      	cbz	r0, 8003ae0 <MX_TIM4_Init+0x34>
  {
    Error_Handler();
 8003adc:	f7ff fd3a 	bl	8003554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003ae4:	a902      	add	r1, sp, #8
 8003ae6:	480a      	ldr	r0, [pc, #40]	; (8003b10 <MX_TIM4_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ae8:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003aea:	f7fe fc97 	bl	800241c <HAL_TIM_ConfigClockSource>
 8003aee:	b108      	cbz	r0, 8003af4 <MX_TIM4_Init+0x48>
  {
    Error_Handler();
 8003af0:	f7ff fd30 	bl	8003554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003af4:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003af6:	4669      	mov	r1, sp
 8003af8:	4805      	ldr	r0, [pc, #20]	; (8003b10 <MX_TIM4_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003afa:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003afc:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003afe:	f7fe ff09 	bl	8002914 <HAL_TIMEx_MasterConfigSynchronization>
 8003b02:	b108      	cbz	r0, 8003b08 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8003b04:	f7ff fd26 	bl	8003554 <Error_Handler>
  }

}
 8003b08:	b007      	add	sp, #28
 8003b0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b0e:	bf00      	nop
 8003b10:	200005fc 	.word	0x200005fc
 8003b14:	40000800 	.word	0x40000800

08003b18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM2)
 8003b1a:	6803      	ldr	r3, [r0, #0]
 8003b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b20:	d10d      	bne.n	8003b3e <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b22:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	61da      	str	r2, [r3, #28]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003b38:	b005      	add	sp, #20
 8003b3a:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM3)
 8003b3e:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <HAL_TIM_Base_MspInit+0x7c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d112      	bne.n	8003b6a <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b44:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <HAL_TIM_Base_MspInit+0x80>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b46:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b48:	69da      	ldr	r2, [r3, #28]
 8003b4a:	f042 0202 	orr.w	r2, r2, #2
 8003b4e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b50:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b52:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b54:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	9302      	str	r3, [sp, #8]
 8003b5c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b5e:	f7fd fa97 	bl	8001090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b62:	201d      	movs	r0, #29
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b64:	f7fd fac8 	bl	80010f8 <HAL_NVIC_EnableIRQ>
}
 8003b68:	e7e6      	b.n	8003b38 <HAL_TIM_Base_MspInit+0x20>
  else if(tim_baseHandle->Instance==TIM4)
 8003b6a:	4a0c      	ldr	r2, [pc, #48]	; (8003b9c <HAL_TIM_Base_MspInit+0x84>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d1e3      	bne.n	8003b38 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <HAL_TIM_Base_MspInit+0x80>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b72:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	f042 0204 	orr.w	r2, r2, #4
 8003b7a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b7c:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b7e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b80:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	9303      	str	r3, [sp, #12]
 8003b88:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b8a:	f7fd fa81 	bl	8001090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b8e:	201e      	movs	r0, #30
 8003b90:	e7e8      	b.n	8003b64 <HAL_TIM_Base_MspInit+0x4c>
 8003b92:	bf00      	nop
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40000800 	.word	0x40000800

08003ba0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ba0:	b510      	push	{r4, lr}
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba6:	2210      	movs	r2, #16
 8003ba8:	2100      	movs	r1, #0
 8003baa:	a802      	add	r0, sp, #8
 8003bac:	f000 f8c8 	bl	8003d40 <memset>
  if(timHandle->Instance==TIM2)
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb6:	d113      	bne.n	8003be0 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003bbc:	699a      	ldr	r2, [r3, #24]
    PA2     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bbe:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc0:	f042 0204 	orr.w	r2, r2, #4
 8003bc4:	619a      	str	r2, [r3, #24]
 8003bc6:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc8:	4806      	ldr	r0, [pc, #24]	; (8003be4 <HAL_TIM_MspPostInit+0x44>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003bd2:	2307      	movs	r3, #7
 8003bd4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bda:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bdc:	f7fd faae 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003be0:	b006      	add	sp, #24
 8003be2:	bd10      	pop	{r4, pc}
 8003be4:	40010800 	.word	0x40010800

08003be8 <MX_TIM2_Init>:
{
 8003be8:	b510      	push	{r4, lr}
 8003bea:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bec:	2210      	movs	r2, #16
 8003bee:	2100      	movs	r1, #0
 8003bf0:	a803      	add	r0, sp, #12
 8003bf2:	f000 f8a5 	bl	8003d40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bf6:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bf8:	221c      	movs	r2, #28
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c00:	9401      	str	r4, [sp, #4]
 8003c02:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c04:	f000 f89c 	bl	8003d40 <memset>
  htim2.Init.Prescaler = 72-1;
 8003c08:	2347      	movs	r3, #71	; 0x47
 8003c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8003c0e:	4826      	ldr	r0, [pc, #152]	; (8003ca8 <MX_TIM2_Init+0xc0>)
  htim2.Init.Prescaler = 72-1;
 8003c10:	e880 000c 	stmia.w	r0, {r2, r3}
  htim2.Init.Period = 20000-1;
 8003c14:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8003c18:	60c3      	str	r3, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c1a:	2380      	movs	r3, #128	; 0x80
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c1c:	6084      	str	r4, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c1e:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c20:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c22:	f7fe fd93 	bl	800274c <HAL_TIM_Base_Init>
 8003c26:	b108      	cbz	r0, 8003c2c <MX_TIM2_Init+0x44>
    Error_Handler();
 8003c28:	f7ff fc94 	bl	8003554 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c30:	a903      	add	r1, sp, #12
 8003c32:	481d      	ldr	r0, [pc, #116]	; (8003ca8 <MX_TIM2_Init+0xc0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c34:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c36:	f7fe fbf1 	bl	800241c <HAL_TIM_ConfigClockSource>
 8003c3a:	b108      	cbz	r0, 8003c40 <MX_TIM2_Init+0x58>
    Error_Handler();
 8003c3c:	f7ff fc8a 	bl	8003554 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003c40:	4819      	ldr	r0, [pc, #100]	; (8003ca8 <MX_TIM2_Init+0xc0>)
 8003c42:	f7fe fd9d 	bl	8002780 <HAL_TIM_PWM_Init>
 8003c46:	b108      	cbz	r0, 8003c4c <MX_TIM2_Init+0x64>
    Error_Handler();
 8003c48:	f7ff fc84 	bl	8003554 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c4c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c4e:	a901      	add	r1, sp, #4
 8003c50:	4815      	ldr	r0, [pc, #84]	; (8003ca8 <MX_TIM2_Init+0xc0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c52:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c54:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c56:	f7fe fe5d 	bl	8002914 <HAL_TIMEx_MasterConfigSynchronization>
 8003c5a:	b108      	cbz	r0, 8003c60 <MX_TIM2_Init+0x78>
    Error_Handler();
 8003c5c:	f7ff fc7a 	bl	8003554 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c60:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c62:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c64:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 1500;
 8003c66:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c6a:	a907      	add	r1, sp, #28
 8003c6c:	480e      	ldr	r0, [pc, #56]	; (8003ca8 <MX_TIM2_Init+0xc0>)
  sConfigOC.Pulse = 1500;
 8003c6e:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c70:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c72:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c74:	f7fe fdca 	bl	800280c <HAL_TIM_PWM_ConfigChannel>
 8003c78:	b108      	cbz	r0, 8003c7e <MX_TIM2_Init+0x96>
    Error_Handler();
 8003c7a:	f7ff fc6b 	bl	8003554 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c7e:	2204      	movs	r2, #4
 8003c80:	a907      	add	r1, sp, #28
 8003c82:	4809      	ldr	r0, [pc, #36]	; (8003ca8 <MX_TIM2_Init+0xc0>)
 8003c84:	f7fe fdc2 	bl	800280c <HAL_TIM_PWM_ConfigChannel>
 8003c88:	b108      	cbz	r0, 8003c8e <MX_TIM2_Init+0xa6>
    Error_Handler();
 8003c8a:	f7ff fc63 	bl	8003554 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c8e:	2208      	movs	r2, #8
 8003c90:	a907      	add	r1, sp, #28
 8003c92:	4805      	ldr	r0, [pc, #20]	; (8003ca8 <MX_TIM2_Init+0xc0>)
 8003c94:	f7fe fdba 	bl	800280c <HAL_TIM_PWM_ConfigChannel>
 8003c98:	b108      	cbz	r0, 8003c9e <MX_TIM2_Init+0xb6>
    Error_Handler();
 8003c9a:	f7ff fc5b 	bl	8003554 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8003c9e:	4802      	ldr	r0, [pc, #8]	; (8003ca8 <MX_TIM2_Init+0xc0>)
 8003ca0:	f7ff ff7e 	bl	8003ba0 <HAL_TIM_MspPostInit>
}
 8003ca4:	b00e      	add	sp, #56	; 0x38
 8003ca6:	bd10      	pop	{r4, pc}
 8003ca8:	2000067c 	.word	0x2000067c

08003cac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003cac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003cae:	e003      	b.n	8003cb8 <LoopCopyDataInit>

08003cb0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003cb2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003cb4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003cb6:	3104      	adds	r1, #4

08003cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003cb8:	480a      	ldr	r0, [pc, #40]	; (8003ce4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003cba:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003cbc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003cbe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003cc0:	d3f6      	bcc.n	8003cb0 <CopyDataInit>
  ldr r2, =_sbss
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003cc4:	e002      	b.n	8003ccc <LoopFillZerobss>

08003cc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003cc6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003cc8:	f842 3b04 	str.w	r3, [r2], #4

08003ccc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003cce:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003cd0:	d3f9      	bcc.n	8003cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003cd2:	f7ff fe91 	bl	80039f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cd6:	f000 f80f 	bl	8003cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003cda:	f7ff fbb5 	bl	8003448 <main>
  bx lr
 8003cde:	4770      	bx	lr
  ldr r3, =_sidata
 8003ce0:	08004ee0 	.word	0x08004ee0
  ldr r0, =_sdata
 8003ce4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003ce8:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8003cec:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8003cf0:	200006bc 	.word	0x200006bc

08003cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003cf4:	e7fe      	b.n	8003cf4 <ADC1_2_IRQHandler>
	...

08003cf8 <__libc_init_array>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	2500      	movs	r5, #0
 8003cfc:	4e0c      	ldr	r6, [pc, #48]	; (8003d30 <__libc_init_array+0x38>)
 8003cfe:	4c0d      	ldr	r4, [pc, #52]	; (8003d34 <__libc_init_array+0x3c>)
 8003d00:	1ba4      	subs	r4, r4, r6
 8003d02:	10a4      	asrs	r4, r4, #2
 8003d04:	42a5      	cmp	r5, r4
 8003d06:	d109      	bne.n	8003d1c <__libc_init_array+0x24>
 8003d08:	f000 fba0 	bl	800444c <_init>
 8003d0c:	2500      	movs	r5, #0
 8003d0e:	4e0a      	ldr	r6, [pc, #40]	; (8003d38 <__libc_init_array+0x40>)
 8003d10:	4c0a      	ldr	r4, [pc, #40]	; (8003d3c <__libc_init_array+0x44>)
 8003d12:	1ba4      	subs	r4, r4, r6
 8003d14:	10a4      	asrs	r4, r4, #2
 8003d16:	42a5      	cmp	r5, r4
 8003d18:	d105      	bne.n	8003d26 <__libc_init_array+0x2e>
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
 8003d1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d20:	4798      	blx	r3
 8003d22:	3501      	adds	r5, #1
 8003d24:	e7ee      	b.n	8003d04 <__libc_init_array+0xc>
 8003d26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d2a:	4798      	blx	r3
 8003d2c:	3501      	adds	r5, #1
 8003d2e:	e7f2      	b.n	8003d16 <__libc_init_array+0x1e>
 8003d30:	08004ed8 	.word	0x08004ed8
 8003d34:	08004ed8 	.word	0x08004ed8
 8003d38:	08004ed8 	.word	0x08004ed8
 8003d3c:	08004edc 	.word	0x08004edc

08003d40 <memset>:
 8003d40:	4603      	mov	r3, r0
 8003d42:	4402      	add	r2, r0
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d100      	bne.n	8003d4a <memset+0xa>
 8003d48:	4770      	bx	lr
 8003d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d4e:	e7f9      	b.n	8003d44 <memset+0x4>

08003d50 <atan2>:
 8003d50:	f000 b856 	b.w	8003e00 <__ieee754_atan2>

08003d54 <sqrt>:
 8003d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d58:	b08b      	sub	sp, #44	; 0x2c
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	460d      	mov	r5, r1
 8003d5e:	f000 f929 	bl	8003fb4 <__ieee754_sqrt>
 8003d62:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <sqrt+0xa0>)
 8003d64:	4680      	mov	r8, r0
 8003d66:	f993 a000 	ldrsb.w	sl, [r3]
 8003d6a:	4689      	mov	r9, r1
 8003d6c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003d70:	d02b      	beq.n	8003dca <sqrt+0x76>
 8003d72:	4622      	mov	r2, r4
 8003d74:	462b      	mov	r3, r5
 8003d76:	4620      	mov	r0, r4
 8003d78:	4629      	mov	r1, r5
 8003d7a:	f7fc fe3b 	bl	80009f4 <__aeabi_dcmpun>
 8003d7e:	4683      	mov	fp, r0
 8003d80:	bb18      	cbnz	r0, 8003dca <sqrt+0x76>
 8003d82:	2600      	movs	r6, #0
 8003d84:	2700      	movs	r7, #0
 8003d86:	4632      	mov	r2, r6
 8003d88:	463b      	mov	r3, r7
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	f7fc fe09 	bl	80009a4 <__aeabi_dcmplt>
 8003d92:	b1d0      	cbz	r0, 8003dca <sqrt+0x76>
 8003d94:	2301      	movs	r3, #1
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <sqrt+0xa4>)
 8003d9a:	f8cd b020 	str.w	fp, [sp, #32]
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003da4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003da8:	f1ba 0f00 	cmp.w	sl, #0
 8003dac:	d112      	bne.n	8003dd4 <sqrt+0x80>
 8003dae:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8003db2:	4668      	mov	r0, sp
 8003db4:	f000 fb41 	bl	800443a <matherr>
 8003db8:	b1b8      	cbz	r0, 8003dea <sqrt+0x96>
 8003dba:	9b08      	ldr	r3, [sp, #32]
 8003dbc:	b11b      	cbz	r3, 8003dc6 <sqrt+0x72>
 8003dbe:	f000 fb3f 	bl	8004440 <__errno>
 8003dc2:	9b08      	ldr	r3, [sp, #32]
 8003dc4:	6003      	str	r3, [r0, #0]
 8003dc6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8003dca:	4640      	mov	r0, r8
 8003dcc:	4649      	mov	r1, r9
 8003dce:	b00b      	add	sp, #44	; 0x2c
 8003dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dd4:	4632      	mov	r2, r6
 8003dd6:	463b      	mov	r3, r7
 8003dd8:	4630      	mov	r0, r6
 8003dda:	4639      	mov	r1, r7
 8003ddc:	f7fc fc9a 	bl	8000714 <__aeabi_ddiv>
 8003de0:	f1ba 0f02 	cmp.w	sl, #2
 8003de4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003de8:	d1e3      	bne.n	8003db2 <sqrt+0x5e>
 8003dea:	f000 fb29 	bl	8004440 <__errno>
 8003dee:	2321      	movs	r3, #33	; 0x21
 8003df0:	6003      	str	r3, [r0, #0]
 8003df2:	e7e2      	b.n	8003dba <sqrt+0x66>
 8003df4:	20000014 	.word	0x20000014
 8003df8:	08004e90 	.word	0x08004e90
 8003dfc:	00000000 	.word	0x00000000

08003e00 <__ieee754_atan2>:
 8003e00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e04:	4256      	negs	r6, r2
 8003e06:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8003e0a:	4316      	orrs	r6, r2
 8003e0c:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8003fb0 <__ieee754_atan2+0x1b0>
 8003e10:	ea4e 76d6 	orr.w	r6, lr, r6, lsr #31
 8003e14:	454e      	cmp	r6, r9
 8003e16:	4604      	mov	r4, r0
 8003e18:	460d      	mov	r5, r1
 8003e1a:	4688      	mov	r8, r1
 8003e1c:	d807      	bhi.n	8003e2e <__ieee754_atan2+0x2e>
 8003e1e:	4246      	negs	r6, r0
 8003e20:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003e24:	4306      	orrs	r6, r0
 8003e26:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8003e2a:	454e      	cmp	r6, r9
 8003e2c:	d906      	bls.n	8003e3c <__ieee754_atan2+0x3c>
 8003e2e:	4620      	mov	r0, r4
 8003e30:	4629      	mov	r1, r5
 8003e32:	f7fc f993 	bl	800015c <__adddf3>
 8003e36:	4604      	mov	r4, r0
 8003e38:	460d      	mov	r5, r1
 8003e3a:	e015      	b.n	8003e68 <__ieee754_atan2+0x68>
 8003e3c:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8003e40:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8003e44:	4316      	orrs	r6, r2
 8003e46:	d103      	bne.n	8003e50 <__ieee754_atan2+0x50>
 8003e48:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e4c:	f000 b960 	b.w	8004110 <atan>
 8003e50:	179e      	asrs	r6, r3, #30
 8003e52:	f006 0602 	and.w	r6, r6, #2
 8003e56:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8003e5a:	ea50 0107 	orrs.w	r1, r0, r7
 8003e5e:	d107      	bne.n	8003e70 <__ieee754_atan2+0x70>
 8003e60:	2e02      	cmp	r6, #2
 8003e62:	d030      	beq.n	8003ec6 <__ieee754_atan2+0xc6>
 8003e64:	2e03      	cmp	r6, #3
 8003e66:	d032      	beq.n	8003ece <__ieee754_atan2+0xce>
 8003e68:	4620      	mov	r0, r4
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e70:	ea52 010e 	orrs.w	r1, r2, lr
 8003e74:	d106      	bne.n	8003e84 <__ieee754_atan2+0x84>
 8003e76:	f1b8 0f00 	cmp.w	r8, #0
 8003e7a:	da71      	bge.n	8003f60 <__ieee754_atan2+0x160>
 8003e7c:	a53a      	add	r5, pc, #232	; (adr r5, 8003f68 <__ieee754_atan2+0x168>)
 8003e7e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003e82:	e7f1      	b.n	8003e68 <__ieee754_atan2+0x68>
 8003e84:	45ce      	cmp	lr, r9
 8003e86:	d126      	bne.n	8003ed6 <__ieee754_atan2+0xd6>
 8003e88:	4577      	cmp	r7, lr
 8003e8a:	d111      	bne.n	8003eb0 <__ieee754_atan2+0xb0>
 8003e8c:	2e02      	cmp	r6, #2
 8003e8e:	d007      	beq.n	8003ea0 <__ieee754_atan2+0xa0>
 8003e90:	2e03      	cmp	r6, #3
 8003e92:	d009      	beq.n	8003ea8 <__ieee754_atan2+0xa8>
 8003e94:	2e01      	cmp	r6, #1
 8003e96:	d15d      	bne.n	8003f54 <__ieee754_atan2+0x154>
 8003e98:	a535      	add	r5, pc, #212	; (adr r5, 8003f70 <__ieee754_atan2+0x170>)
 8003e9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003e9e:	e7e3      	b.n	8003e68 <__ieee754_atan2+0x68>
 8003ea0:	a535      	add	r5, pc, #212	; (adr r5, 8003f78 <__ieee754_atan2+0x178>)
 8003ea2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003ea6:	e7df      	b.n	8003e68 <__ieee754_atan2+0x68>
 8003ea8:	a535      	add	r5, pc, #212	; (adr r5, 8003f80 <__ieee754_atan2+0x180>)
 8003eaa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003eae:	e7db      	b.n	8003e68 <__ieee754_atan2+0x68>
 8003eb0:	2e02      	cmp	r6, #2
 8003eb2:	d008      	beq.n	8003ec6 <__ieee754_atan2+0xc6>
 8003eb4:	2e03      	cmp	r6, #3
 8003eb6:	d00a      	beq.n	8003ece <__ieee754_atan2+0xce>
 8003eb8:	2e01      	cmp	r6, #1
 8003eba:	f04f 0400 	mov.w	r4, #0
 8003ebe:	d14d      	bne.n	8003f5c <__ieee754_atan2+0x15c>
 8003ec0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8003ec4:	e7d0      	b.n	8003e68 <__ieee754_atan2+0x68>
 8003ec6:	a530      	add	r5, pc, #192	; (adr r5, 8003f88 <__ieee754_atan2+0x188>)
 8003ec8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003ecc:	e7cc      	b.n	8003e68 <__ieee754_atan2+0x68>
 8003ece:	a530      	add	r5, pc, #192	; (adr r5, 8003f90 <__ieee754_atan2+0x190>)
 8003ed0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003ed4:	e7c8      	b.n	8003e68 <__ieee754_atan2+0x68>
 8003ed6:	454f      	cmp	r7, r9
 8003ed8:	d0cd      	beq.n	8003e76 <__ieee754_atan2+0x76>
 8003eda:	eba7 070e 	sub.w	r7, r7, lr
 8003ede:	153f      	asrs	r7, r7, #20
 8003ee0:	2f3c      	cmp	r7, #60	; 0x3c
 8003ee2:	dc1e      	bgt.n	8003f22 <__ieee754_atan2+0x122>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	da01      	bge.n	8003eec <__ieee754_atan2+0xec>
 8003ee8:	373c      	adds	r7, #60	; 0x3c
 8003eea:	db1e      	blt.n	8003f2a <__ieee754_atan2+0x12a>
 8003eec:	4620      	mov	r0, r4
 8003eee:	4629      	mov	r1, r5
 8003ef0:	f7fc fc10 	bl	8000714 <__aeabi_ddiv>
 8003ef4:	f000 fa9e 	bl	8004434 <fabs>
 8003ef8:	f000 f90a 	bl	8004110 <atan>
 8003efc:	4604      	mov	r4, r0
 8003efe:	460d      	mov	r5, r1
 8003f00:	2e01      	cmp	r6, #1
 8003f02:	d015      	beq.n	8003f30 <__ieee754_atan2+0x130>
 8003f04:	2e02      	cmp	r6, #2
 8003f06:	d016      	beq.n	8003f36 <__ieee754_atan2+0x136>
 8003f08:	2e00      	cmp	r6, #0
 8003f0a:	d0ad      	beq.n	8003e68 <__ieee754_atan2+0x68>
 8003f0c:	a322      	add	r3, pc, #136	; (adr r3, 8003f98 <__ieee754_atan2+0x198>)
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	4620      	mov	r0, r4
 8003f14:	4629      	mov	r1, r5
 8003f16:	f7fc f91f 	bl	8000158 <__aeabi_dsub>
 8003f1a:	a31b      	add	r3, pc, #108	; (adr r3, 8003f88 <__ieee754_atan2+0x188>)
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	e015      	b.n	8003f4e <__ieee754_atan2+0x14e>
 8003f22:	a51f      	add	r5, pc, #124	; (adr r5, 8003fa0 <__ieee754_atan2+0x1a0>)
 8003f24:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003f28:	e7ea      	b.n	8003f00 <__ieee754_atan2+0x100>
 8003f2a:	2400      	movs	r4, #0
 8003f2c:	2500      	movs	r5, #0
 8003f2e:	e7e7      	b.n	8003f00 <__ieee754_atan2+0x100>
 8003f30:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8003f34:	e798      	b.n	8003e68 <__ieee754_atan2+0x68>
 8003f36:	a318      	add	r3, pc, #96	; (adr r3, 8003f98 <__ieee754_atan2+0x198>)
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	4629      	mov	r1, r5
 8003f40:	f7fc f90a 	bl	8000158 <__aeabi_dsub>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	a10f      	add	r1, pc, #60	; (adr r1, 8003f88 <__ieee754_atan2+0x188>)
 8003f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f4e:	f7fc f903 	bl	8000158 <__aeabi_dsub>
 8003f52:	e770      	b.n	8003e36 <__ieee754_atan2+0x36>
 8003f54:	a514      	add	r5, pc, #80	; (adr r5, 8003fa8 <__ieee754_atan2+0x1a8>)
 8003f56:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003f5a:	e785      	b.n	8003e68 <__ieee754_atan2+0x68>
 8003f5c:	2500      	movs	r5, #0
 8003f5e:	e783      	b.n	8003e68 <__ieee754_atan2+0x68>
 8003f60:	a50f      	add	r5, pc, #60	; (adr r5, 8003fa0 <__ieee754_atan2+0x1a0>)
 8003f62:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003f66:	e77f      	b.n	8003e68 <__ieee754_atan2+0x68>
 8003f68:	54442d18 	.word	0x54442d18
 8003f6c:	bff921fb 	.word	0xbff921fb
 8003f70:	54442d18 	.word	0x54442d18
 8003f74:	bfe921fb 	.word	0xbfe921fb
 8003f78:	7f3321d2 	.word	0x7f3321d2
 8003f7c:	4002d97c 	.word	0x4002d97c
 8003f80:	7f3321d2 	.word	0x7f3321d2
 8003f84:	c002d97c 	.word	0xc002d97c
 8003f88:	54442d18 	.word	0x54442d18
 8003f8c:	400921fb 	.word	0x400921fb
 8003f90:	54442d18 	.word	0x54442d18
 8003f94:	c00921fb 	.word	0xc00921fb
 8003f98:	33145c07 	.word	0x33145c07
 8003f9c:	3ca1a626 	.word	0x3ca1a626
 8003fa0:	54442d18 	.word	0x54442d18
 8003fa4:	3ff921fb 	.word	0x3ff921fb
 8003fa8:	54442d18 	.word	0x54442d18
 8003fac:	3fe921fb 	.word	0x3fe921fb
 8003fb0:	7ff00000 	.word	0x7ff00000

08003fb4 <__ieee754_sqrt>:
 8003fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb8:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8004108 <__ieee754_sqrt+0x154>
 8003fbc:	4606      	mov	r6, r0
 8003fbe:	ea3e 0e01 	bics.w	lr, lr, r1
 8003fc2:	460d      	mov	r5, r1
 8003fc4:	4607      	mov	r7, r0
 8003fc6:	460a      	mov	r2, r1
 8003fc8:	460c      	mov	r4, r1
 8003fca:	4603      	mov	r3, r0
 8003fcc:	d10f      	bne.n	8003fee <__ieee754_sqrt+0x3a>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	f7fc fa75 	bl	80004c0 <__aeabi_dmul>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4630      	mov	r0, r6
 8003fdc:	4629      	mov	r1, r5
 8003fde:	f7fc f8bd 	bl	800015c <__adddf3>
 8003fe2:	4606      	mov	r6, r0
 8003fe4:	460d      	mov	r5, r1
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	4629      	mov	r1, r5
 8003fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fee:	2900      	cmp	r1, #0
 8003ff0:	dc0e      	bgt.n	8004010 <__ieee754_sqrt+0x5c>
 8003ff2:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 8003ff6:	ea5e 0707 	orrs.w	r7, lr, r7
 8003ffa:	d0f4      	beq.n	8003fe6 <__ieee754_sqrt+0x32>
 8003ffc:	b141      	cbz	r1, 8004010 <__ieee754_sqrt+0x5c>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	f7fc f8a9 	bl	8000158 <__aeabi_dsub>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	f7fc fb83 	bl	8000714 <__aeabi_ddiv>
 800400e:	e7e8      	b.n	8003fe2 <__ieee754_sqrt+0x2e>
 8004010:	1512      	asrs	r2, r2, #20
 8004012:	d10c      	bne.n	800402e <__ieee754_sqrt+0x7a>
 8004014:	2c00      	cmp	r4, #0
 8004016:	d06e      	beq.n	80040f6 <__ieee754_sqrt+0x142>
 8004018:	2100      	movs	r1, #0
 800401a:	02e6      	lsls	r6, r4, #11
 800401c:	d56f      	bpl.n	80040fe <__ieee754_sqrt+0x14a>
 800401e:	1e48      	subs	r0, r1, #1
 8004020:	1a12      	subs	r2, r2, r0
 8004022:	f1c1 0020 	rsb	r0, r1, #32
 8004026:	fa23 f000 	lsr.w	r0, r3, r0
 800402a:	4304      	orrs	r4, r0
 800402c:	408b      	lsls	r3, r1
 800402e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004032:	07d5      	lsls	r5, r2, #31
 8004034:	f04f 0500 	mov.w	r5, #0
 8004038:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800403c:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8004040:	bf42      	ittt	mi
 8004042:	0064      	lslmi	r4, r4, #1
 8004044:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 8004048:	005b      	lslmi	r3, r3, #1
 800404a:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 800404e:	1050      	asrs	r0, r2, #1
 8004050:	4421      	add	r1, r4
 8004052:	2216      	movs	r2, #22
 8004054:	462c      	mov	r4, r5
 8004056:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	19a7      	adds	r7, r4, r6
 800405e:	428f      	cmp	r7, r1
 8004060:	bfde      	ittt	le
 8004062:	1bc9      	suble	r1, r1, r7
 8004064:	19bc      	addle	r4, r7, r6
 8004066:	19ad      	addle	r5, r5, r6
 8004068:	0049      	lsls	r1, r1, #1
 800406a:	3a01      	subs	r2, #1
 800406c:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004070:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004074:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004078:	d1f0      	bne.n	800405c <__ieee754_sqrt+0xa8>
 800407a:	f04f 0e20 	mov.w	lr, #32
 800407e:	4694      	mov	ip, r2
 8004080:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004084:	42a1      	cmp	r1, r4
 8004086:	eb06 070c 	add.w	r7, r6, ip
 800408a:	dc02      	bgt.n	8004092 <__ieee754_sqrt+0xde>
 800408c:	d112      	bne.n	80040b4 <__ieee754_sqrt+0x100>
 800408e:	429f      	cmp	r7, r3
 8004090:	d810      	bhi.n	80040b4 <__ieee754_sqrt+0x100>
 8004092:	2f00      	cmp	r7, #0
 8004094:	eb07 0c06 	add.w	ip, r7, r6
 8004098:	da34      	bge.n	8004104 <__ieee754_sqrt+0x150>
 800409a:	f1bc 0f00 	cmp.w	ip, #0
 800409e:	db31      	blt.n	8004104 <__ieee754_sqrt+0x150>
 80040a0:	f104 0801 	add.w	r8, r4, #1
 80040a4:	1b09      	subs	r1, r1, r4
 80040a6:	4644      	mov	r4, r8
 80040a8:	429f      	cmp	r7, r3
 80040aa:	bf88      	it	hi
 80040ac:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80040b0:	1bdb      	subs	r3, r3, r7
 80040b2:	4432      	add	r2, r6
 80040b4:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 80040b8:	f1be 0e01 	subs.w	lr, lr, #1
 80040bc:	4439      	add	r1, r7
 80040be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80040c2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80040c6:	d1dd      	bne.n	8004084 <__ieee754_sqrt+0xd0>
 80040c8:	430b      	orrs	r3, r1
 80040ca:	d006      	beq.n	80040da <__ieee754_sqrt+0x126>
 80040cc:	1c54      	adds	r4, r2, #1
 80040ce:	bf0b      	itete	eq
 80040d0:	4672      	moveq	r2, lr
 80040d2:	3201      	addne	r2, #1
 80040d4:	3501      	addeq	r5, #1
 80040d6:	f022 0201 	bicne.w	r2, r2, #1
 80040da:	106b      	asrs	r3, r5, #1
 80040dc:	0852      	lsrs	r2, r2, #1
 80040de:	07e9      	lsls	r1, r5, #31
 80040e0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80040e4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80040e8:	bf48      	it	mi
 80040ea:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80040ee:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 80040f2:	4616      	mov	r6, r2
 80040f4:	e777      	b.n	8003fe6 <__ieee754_sqrt+0x32>
 80040f6:	0adc      	lsrs	r4, r3, #11
 80040f8:	3a15      	subs	r2, #21
 80040fa:	055b      	lsls	r3, r3, #21
 80040fc:	e78a      	b.n	8004014 <__ieee754_sqrt+0x60>
 80040fe:	0064      	lsls	r4, r4, #1
 8004100:	3101      	adds	r1, #1
 8004102:	e78a      	b.n	800401a <__ieee754_sqrt+0x66>
 8004104:	46a0      	mov	r8, r4
 8004106:	e7cd      	b.n	80040a4 <__ieee754_sqrt+0xf0>
 8004108:	7ff00000 	.word	0x7ff00000
 800410c:	00000000 	.word	0x00000000

08004110 <atan>:
 8004110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004114:	4bba      	ldr	r3, [pc, #744]	; (8004400 <atan+0x2f0>)
 8004116:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800411a:	429e      	cmp	r6, r3
 800411c:	4604      	mov	r4, r0
 800411e:	460d      	mov	r5, r1
 8004120:	468b      	mov	fp, r1
 8004122:	dd17      	ble.n	8004154 <atan+0x44>
 8004124:	4ab7      	ldr	r2, [pc, #732]	; (8004404 <atan+0x2f4>)
 8004126:	4296      	cmp	r6, r2
 8004128:	dc01      	bgt.n	800412e <atan+0x1e>
 800412a:	d109      	bne.n	8004140 <atan+0x30>
 800412c:	b140      	cbz	r0, 8004140 <atan+0x30>
 800412e:	4622      	mov	r2, r4
 8004130:	462b      	mov	r3, r5
 8004132:	4620      	mov	r0, r4
 8004134:	4629      	mov	r1, r5
 8004136:	f7fc f811 	bl	800015c <__adddf3>
 800413a:	4604      	mov	r4, r0
 800413c:	460d      	mov	r5, r1
 800413e:	e005      	b.n	800414c <atan+0x3c>
 8004140:	f1bb 0f00 	cmp.w	fp, #0
 8004144:	4cb0      	ldr	r4, [pc, #704]	; (8004408 <atan+0x2f8>)
 8004146:	f300 8129 	bgt.w	800439c <atan+0x28c>
 800414a:	4db0      	ldr	r5, [pc, #704]	; (800440c <atan+0x2fc>)
 800414c:	4620      	mov	r0, r4
 800414e:	4629      	mov	r1, r5
 8004150:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004154:	4bae      	ldr	r3, [pc, #696]	; (8004410 <atan+0x300>)
 8004156:	429e      	cmp	r6, r3
 8004158:	dc11      	bgt.n	800417e <atan+0x6e>
 800415a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800415e:	429e      	cmp	r6, r3
 8004160:	dc0a      	bgt.n	8004178 <atan+0x68>
 8004162:	a38f      	add	r3, pc, #572	; (adr r3, 80043a0 <atan+0x290>)
 8004164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004168:	f7fb fff8 	bl	800015c <__adddf3>
 800416c:	2200      	movs	r2, #0
 800416e:	4ba9      	ldr	r3, [pc, #676]	; (8004414 <atan+0x304>)
 8004170:	f7fc fc36 	bl	80009e0 <__aeabi_dcmpgt>
 8004174:	2800      	cmp	r0, #0
 8004176:	d1e9      	bne.n	800414c <atan+0x3c>
 8004178:	f04f 3aff 	mov.w	sl, #4294967295
 800417c:	e027      	b.n	80041ce <atan+0xbe>
 800417e:	f000 f959 	bl	8004434 <fabs>
 8004182:	4ba5      	ldr	r3, [pc, #660]	; (8004418 <atan+0x308>)
 8004184:	4604      	mov	r4, r0
 8004186:	429e      	cmp	r6, r3
 8004188:	460d      	mov	r5, r1
 800418a:	f300 80b8 	bgt.w	80042fe <atan+0x1ee>
 800418e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004192:	429e      	cmp	r6, r3
 8004194:	f300 809c 	bgt.w	80042d0 <atan+0x1c0>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	f7fb ffde 	bl	800015c <__adddf3>
 80041a0:	2200      	movs	r2, #0
 80041a2:	4b9c      	ldr	r3, [pc, #624]	; (8004414 <atan+0x304>)
 80041a4:	f7fb ffd8 	bl	8000158 <__aeabi_dsub>
 80041a8:	2200      	movs	r2, #0
 80041aa:	4606      	mov	r6, r0
 80041ac:	460f      	mov	r7, r1
 80041ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041b2:	4620      	mov	r0, r4
 80041b4:	4629      	mov	r1, r5
 80041b6:	f7fb ffd1 	bl	800015c <__adddf3>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4630      	mov	r0, r6
 80041c0:	4639      	mov	r1, r7
 80041c2:	f7fc faa7 	bl	8000714 <__aeabi_ddiv>
 80041c6:	f04f 0a00 	mov.w	sl, #0
 80041ca:	4604      	mov	r4, r0
 80041cc:	460d      	mov	r5, r1
 80041ce:	4622      	mov	r2, r4
 80041d0:	462b      	mov	r3, r5
 80041d2:	4620      	mov	r0, r4
 80041d4:	4629      	mov	r1, r5
 80041d6:	f7fc f973 	bl	80004c0 <__aeabi_dmul>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4680      	mov	r8, r0
 80041e0:	4689      	mov	r9, r1
 80041e2:	f7fc f96d 	bl	80004c0 <__aeabi_dmul>
 80041e6:	a370      	add	r3, pc, #448	; (adr r3, 80043a8 <atan+0x298>)
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	4606      	mov	r6, r0
 80041ee:	460f      	mov	r7, r1
 80041f0:	f7fc f966 	bl	80004c0 <__aeabi_dmul>
 80041f4:	a36e      	add	r3, pc, #440	; (adr r3, 80043b0 <atan+0x2a0>)
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	f7fb ffaf 	bl	800015c <__adddf3>
 80041fe:	4632      	mov	r2, r6
 8004200:	463b      	mov	r3, r7
 8004202:	f7fc f95d 	bl	80004c0 <__aeabi_dmul>
 8004206:	a36c      	add	r3, pc, #432	; (adr r3, 80043b8 <atan+0x2a8>)
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f7fb ffa6 	bl	800015c <__adddf3>
 8004210:	4632      	mov	r2, r6
 8004212:	463b      	mov	r3, r7
 8004214:	f7fc f954 	bl	80004c0 <__aeabi_dmul>
 8004218:	a369      	add	r3, pc, #420	; (adr r3, 80043c0 <atan+0x2b0>)
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	f7fb ff9d 	bl	800015c <__adddf3>
 8004222:	4632      	mov	r2, r6
 8004224:	463b      	mov	r3, r7
 8004226:	f7fc f94b 	bl	80004c0 <__aeabi_dmul>
 800422a:	a367      	add	r3, pc, #412	; (adr r3, 80043c8 <atan+0x2b8>)
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	f7fb ff94 	bl	800015c <__adddf3>
 8004234:	4632      	mov	r2, r6
 8004236:	463b      	mov	r3, r7
 8004238:	f7fc f942 	bl	80004c0 <__aeabi_dmul>
 800423c:	a364      	add	r3, pc, #400	; (adr r3, 80043d0 <atan+0x2c0>)
 800423e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004242:	f7fb ff8b 	bl	800015c <__adddf3>
 8004246:	4642      	mov	r2, r8
 8004248:	464b      	mov	r3, r9
 800424a:	f7fc f939 	bl	80004c0 <__aeabi_dmul>
 800424e:	a362      	add	r3, pc, #392	; (adr r3, 80043d8 <atan+0x2c8>)
 8004250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004254:	4680      	mov	r8, r0
 8004256:	4689      	mov	r9, r1
 8004258:	4630      	mov	r0, r6
 800425a:	4639      	mov	r1, r7
 800425c:	f7fc f930 	bl	80004c0 <__aeabi_dmul>
 8004260:	a35f      	add	r3, pc, #380	; (adr r3, 80043e0 <atan+0x2d0>)
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	f7fb ff77 	bl	8000158 <__aeabi_dsub>
 800426a:	4632      	mov	r2, r6
 800426c:	463b      	mov	r3, r7
 800426e:	f7fc f927 	bl	80004c0 <__aeabi_dmul>
 8004272:	a35d      	add	r3, pc, #372	; (adr r3, 80043e8 <atan+0x2d8>)
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	f7fb ff6e 	bl	8000158 <__aeabi_dsub>
 800427c:	4632      	mov	r2, r6
 800427e:	463b      	mov	r3, r7
 8004280:	f7fc f91e 	bl	80004c0 <__aeabi_dmul>
 8004284:	a35a      	add	r3, pc, #360	; (adr r3, 80043f0 <atan+0x2e0>)
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	f7fb ff65 	bl	8000158 <__aeabi_dsub>
 800428e:	4632      	mov	r2, r6
 8004290:	463b      	mov	r3, r7
 8004292:	f7fc f915 	bl	80004c0 <__aeabi_dmul>
 8004296:	a358      	add	r3, pc, #352	; (adr r3, 80043f8 <atan+0x2e8>)
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f7fb ff5c 	bl	8000158 <__aeabi_dsub>
 80042a0:	4632      	mov	r2, r6
 80042a2:	463b      	mov	r3, r7
 80042a4:	f7fc f90c 	bl	80004c0 <__aeabi_dmul>
 80042a8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	d14e      	bne.n	8004350 <atan+0x240>
 80042b2:	4640      	mov	r0, r8
 80042b4:	4649      	mov	r1, r9
 80042b6:	f7fb ff51 	bl	800015c <__adddf3>
 80042ba:	4622      	mov	r2, r4
 80042bc:	462b      	mov	r3, r5
 80042be:	f7fc f8ff 	bl	80004c0 <__aeabi_dmul>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4620      	mov	r0, r4
 80042c8:	4629      	mov	r1, r5
 80042ca:	f7fb ff45 	bl	8000158 <__aeabi_dsub>
 80042ce:	e734      	b.n	800413a <atan+0x2a>
 80042d0:	2200      	movs	r2, #0
 80042d2:	4b50      	ldr	r3, [pc, #320]	; (8004414 <atan+0x304>)
 80042d4:	f7fb ff40 	bl	8000158 <__aeabi_dsub>
 80042d8:	2200      	movs	r2, #0
 80042da:	4606      	mov	r6, r0
 80042dc:	460f      	mov	r7, r1
 80042de:	4b4d      	ldr	r3, [pc, #308]	; (8004414 <atan+0x304>)
 80042e0:	4620      	mov	r0, r4
 80042e2:	4629      	mov	r1, r5
 80042e4:	f7fb ff3a 	bl	800015c <__adddf3>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4630      	mov	r0, r6
 80042ee:	4639      	mov	r1, r7
 80042f0:	f7fc fa10 	bl	8000714 <__aeabi_ddiv>
 80042f4:	f04f 0a01 	mov.w	sl, #1
 80042f8:	4604      	mov	r4, r0
 80042fa:	460d      	mov	r5, r1
 80042fc:	e767      	b.n	80041ce <atan+0xbe>
 80042fe:	4b47      	ldr	r3, [pc, #284]	; (800441c <atan+0x30c>)
 8004300:	429e      	cmp	r6, r3
 8004302:	dc1a      	bgt.n	800433a <atan+0x22a>
 8004304:	2200      	movs	r2, #0
 8004306:	4b46      	ldr	r3, [pc, #280]	; (8004420 <atan+0x310>)
 8004308:	f7fb ff26 	bl	8000158 <__aeabi_dsub>
 800430c:	2200      	movs	r2, #0
 800430e:	4606      	mov	r6, r0
 8004310:	460f      	mov	r7, r1
 8004312:	4b43      	ldr	r3, [pc, #268]	; (8004420 <atan+0x310>)
 8004314:	4620      	mov	r0, r4
 8004316:	4629      	mov	r1, r5
 8004318:	f7fc f8d2 	bl	80004c0 <__aeabi_dmul>
 800431c:	2200      	movs	r2, #0
 800431e:	4b3d      	ldr	r3, [pc, #244]	; (8004414 <atan+0x304>)
 8004320:	f7fb ff1c 	bl	800015c <__adddf3>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4630      	mov	r0, r6
 800432a:	4639      	mov	r1, r7
 800432c:	f7fc f9f2 	bl	8000714 <__aeabi_ddiv>
 8004330:	f04f 0a02 	mov.w	sl, #2
 8004334:	4604      	mov	r4, r0
 8004336:	460d      	mov	r5, r1
 8004338:	e749      	b.n	80041ce <atan+0xbe>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	2000      	movs	r0, #0
 8004340:	4938      	ldr	r1, [pc, #224]	; (8004424 <atan+0x314>)
 8004342:	f7fc f9e7 	bl	8000714 <__aeabi_ddiv>
 8004346:	f04f 0a03 	mov.w	sl, #3
 800434a:	4604      	mov	r4, r0
 800434c:	460d      	mov	r5, r1
 800434e:	e73e      	b.n	80041ce <atan+0xbe>
 8004350:	4640      	mov	r0, r8
 8004352:	4649      	mov	r1, r9
 8004354:	f7fb ff02 	bl	800015c <__adddf3>
 8004358:	4622      	mov	r2, r4
 800435a:	462b      	mov	r3, r5
 800435c:	f7fc f8b0 	bl	80004c0 <__aeabi_dmul>
 8004360:	4e31      	ldr	r6, [pc, #196]	; (8004428 <atan+0x318>)
 8004362:	4b32      	ldr	r3, [pc, #200]	; (800442c <atan+0x31c>)
 8004364:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8004368:	4456      	add	r6, sl
 800436a:	449a      	add	sl, r3
 800436c:	e9da 2300 	ldrd	r2, r3, [sl]
 8004370:	f7fb fef2 	bl	8000158 <__aeabi_dsub>
 8004374:	4622      	mov	r2, r4
 8004376:	462b      	mov	r3, r5
 8004378:	f7fb feee 	bl	8000158 <__aeabi_dsub>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004384:	f7fb fee8 	bl	8000158 <__aeabi_dsub>
 8004388:	f1bb 0f00 	cmp.w	fp, #0
 800438c:	4604      	mov	r4, r0
 800438e:	460d      	mov	r5, r1
 8004390:	f6bf aedc 	bge.w	800414c <atan+0x3c>
 8004394:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004398:	461d      	mov	r5, r3
 800439a:	e6d7      	b.n	800414c <atan+0x3c>
 800439c:	4d24      	ldr	r5, [pc, #144]	; (8004430 <atan+0x320>)
 800439e:	e6d5      	b.n	800414c <atan+0x3c>
 80043a0:	8800759c 	.word	0x8800759c
 80043a4:	7e37e43c 	.word	0x7e37e43c
 80043a8:	e322da11 	.word	0xe322da11
 80043ac:	3f90ad3a 	.word	0x3f90ad3a
 80043b0:	24760deb 	.word	0x24760deb
 80043b4:	3fa97b4b 	.word	0x3fa97b4b
 80043b8:	a0d03d51 	.word	0xa0d03d51
 80043bc:	3fb10d66 	.word	0x3fb10d66
 80043c0:	c54c206e 	.word	0xc54c206e
 80043c4:	3fb745cd 	.word	0x3fb745cd
 80043c8:	920083ff 	.word	0x920083ff
 80043cc:	3fc24924 	.word	0x3fc24924
 80043d0:	5555550d 	.word	0x5555550d
 80043d4:	3fd55555 	.word	0x3fd55555
 80043d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80043dc:	bfa2b444 	.word	0xbfa2b444
 80043e0:	52defd9a 	.word	0x52defd9a
 80043e4:	3fadde2d 	.word	0x3fadde2d
 80043e8:	af749a6d 	.word	0xaf749a6d
 80043ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80043f0:	fe231671 	.word	0xfe231671
 80043f4:	3fbc71c6 	.word	0x3fbc71c6
 80043f8:	9998ebc4 	.word	0x9998ebc4
 80043fc:	3fc99999 	.word	0x3fc99999
 8004400:	440fffff 	.word	0x440fffff
 8004404:	7ff00000 	.word	0x7ff00000
 8004408:	54442d18 	.word	0x54442d18
 800440c:	bff921fb 	.word	0xbff921fb
 8004410:	3fdbffff 	.word	0x3fdbffff
 8004414:	3ff00000 	.word	0x3ff00000
 8004418:	3ff2ffff 	.word	0x3ff2ffff
 800441c:	40037fff 	.word	0x40037fff
 8004420:	3ff80000 	.word	0x3ff80000
 8004424:	bff00000 	.word	0xbff00000
 8004428:	08004e98 	.word	0x08004e98
 800442c:	08004eb8 	.word	0x08004eb8
 8004430:	3ff921fb 	.word	0x3ff921fb

08004434 <fabs>:
 8004434:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004438:	4770      	bx	lr

0800443a <matherr>:
 800443a:	2000      	movs	r0, #0
 800443c:	4770      	bx	lr
	...

08004440 <__errno>:
 8004440:	4b01      	ldr	r3, [pc, #4]	; (8004448 <__errno+0x8>)
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	20000018 	.word	0x20000018

0800444c <_init>:
 800444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444e:	bf00      	nop
 8004450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004452:	bc08      	pop	{r3}
 8004454:	469e      	mov	lr, r3
 8004456:	4770      	bx	lr

08004458 <_fini>:
 8004458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445a:	bf00      	nop
 800445c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800445e:	bc08      	pop	{r3}
 8004460:	469e      	mov	lr, r3
 8004462:	4770      	bx	lr
